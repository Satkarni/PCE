
Greaves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002652  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b2  00800100  00800100  000026c6  2**0
                  ALLOC
  2 .comment      0000005c  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000130  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e42  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004ef  00000000  00000000  00004694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000016ad  00000000  00000000  00004b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000030c  00000000  00000000  00006230  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000007fe  00000000  00000000  0000653c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e7a  00000000  00000000  00006d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  00007bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	00 00       	nop
       4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c0       	rjmp	.+422    	; 0x1c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c0       	rjmp	.+406    	; 0x1c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c3       	rjmp	.+1730   	; 0x6f4 <__vector_12>
      32:	00 00       	nop
      34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d5 02       	muls	r29, r21
      8e:	e5 02       	muls	r30, r21
      90:	f5 02       	muls	r31, r21
      92:	05 03       	mulsu	r16, r21
      94:	16 03       	mulsu	r17, r22
      96:	27 03       	mulsu	r18, r23
      98:	38 03       	fmul	r19, r16
      9a:	49 03       	fmul	r20, r17

0000009c <__trampolines_end>:
      9c:	6e 61       	ori	r22, 0x1E	; 30
      9e:	6e 00       	.word	0x006e	; ????

000000a0 <__c.2159>:
      a0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      b0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      c0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      d0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      e0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      f0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     100:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     110:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     120:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     130:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     140:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     150:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     160:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     170:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     180:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     190:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d0 e1       	ldi	r29, 0x10	; 16
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_clear_bss>:
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a2 3b       	cpi	r26, 0xB2	; 178
     1b6:	b2 07       	cpc	r27, r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>
     1ba:	80 d6       	rcall	.+3328   	; 0xebc <main>
     1bc:	0c 94 27 13 	jmp	0x264e	; 0x264e <_exit>

000001c0 <__bad_interrupt>:
     1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <spi_init>:
}
void MAX7219_disableChip(unsigned char chip){
	
	DISPLAY_DIR |= (1<<LOAD1)|(1<<LOAD2)|(1<<LOAD3)|(1<<LOAD4);
	
	MAX7219_writeData(MAX7219_MODE_POWER, OFF,chip);
     1c2:	b8 9a       	sbi	0x17, 0	; 23
     1c4:	c0 98       	cbi	0x18, 0	; 24
     1c6:	87 b3       	in	r24, 0x17	; 23
     1c8:	86 60       	ori	r24, 0x06	; 6
     1ca:	87 bb       	out	0x17, r24	; 23
     1cc:	8d b1       	in	r24, 0x0d	; 13
     1ce:	83 65       	ori	r24, 0x53	; 83
     1d0:	8d b9       	out	0x0d, r24	; 13
     1d2:	08 95       	ret

000001d4 <spiSendByte>:
     1d4:	8f b9       	out	0x0f, r24	; 15
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	8a 95       	dec	r24
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <spiSendByte+0x4>
     1dc:	77 9b       	sbis	0x0e, 7	; 14
     1de:	fe cf       	rjmp	.-4      	; 0x1dc <spiSendByte+0x8>
     1e0:	08 95       	ret

000001e2 <MAX7219_writeData>:
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	16 2f       	mov	r17, r22
     1ea:	95 b3       	in	r25, 0x15	; 21
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	e9 01       	movw	r28, r18
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <MAX7219_writeData+0x16>
     1f4:	cc 0f       	add	r28, r28
     1f6:	dd 1f       	adc	r29, r29
     1f8:	4a 95       	dec	r20
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <MAX7219_writeData+0x12>
     1fc:	2c 2f       	mov	r18, r28
     1fe:	20 95       	com	r18
     200:	92 23       	and	r25, r18
     202:	95 bb       	out	0x15, r25	; 21
     204:	95 e0       	ldi	r25, 0x05	; 5
     206:	9a 95       	dec	r25
     208:	f1 f7       	brne	.-4      	; 0x206 <MAX7219_writeData+0x24>
     20a:	e4 df       	rcall	.-56     	; 0x1d4 <spiSendByte>
     20c:	85 e0       	ldi	r24, 0x05	; 5
     20e:	8a 95       	dec	r24
     210:	f1 f7       	brne	.-4      	; 0x20e <MAX7219_writeData+0x2c>
     212:	81 2f       	mov	r24, r17
     214:	df df       	rcall	.-66     	; 0x1d4 <spiSendByte>
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	9a 95       	dec	r25
     21a:	f1 f7       	brne	.-4      	; 0x218 <MAX7219_writeData+0x36>
     21c:	85 b3       	in	r24, 0x15	; 21
     21e:	c8 2b       	or	r28, r24
     220:	c5 bb       	out	0x15, r28	; 21
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <MAX7219_writeData+0x42>
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	08 95       	ret

00000230 <MAX7219_clearDisplay>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	d8 2f       	mov	r29, r24
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	49 f4       	brne	.+18     	; 0x24c <MAX7219_clearDisplay+0x1c>
     23a:	43 e0       	ldi	r20, 0x03	; 3
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	d0 df       	rcall	.-96     	; 0x1e2 <MAX7219_writeData>
     242:	43 e0       	ldi	r20, 0x03	; 3
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	cc df       	rcall	.-104    	; 0x1e2 <MAX7219_writeData>
     24a:	07 c0       	rjmp	.+14     	; 0x25a <MAX7219_clearDisplay+0x2a>
     24c:	c8 e0       	ldi	r28, 0x08	; 8
     24e:	4d 2f       	mov	r20, r29
     250:	6f e0       	ldi	r22, 0x0F	; 15
     252:	8c 2f       	mov	r24, r28
     254:	c6 df       	rcall	.-116    	; 0x1e2 <MAX7219_writeData>
     256:	c1 50       	subi	r28, 0x01	; 1
     258:	d1 f7       	brne	.-12     	; 0x24e <MAX7219_clearDisplay+0x1e>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <MAX7219_displayNumber>:
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	7c 01       	movw	r14, r24
     274:	d6 2e       	mov	r13, r22
     276:	c4 2f       	mov	r28, r20
     278:	b2 2e       	mov	r11, r18
     27a:	42 30       	cpi	r20, 0x02	; 2
     27c:	19 f0       	breq	.+6      	; 0x284 <MAX7219_displayNumber+0x24>
     27e:	00 e0       	ldi	r16, 0x00	; 0
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	02 c0       	rjmp	.+4      	; 0x288 <MAX7219_displayNumber+0x28>
     284:	04 e0       	ldi	r16, 0x04	; 4
     286:	88 e0       	ldi	r24, 0x08	; 8
     288:	df ef       	ldi	r29, 0xFF	; 255
     28a:	d8 0f       	add	r29, r24
     28c:	4d 2d       	mov	r20, r13
     28e:	6f e0       	ldi	r22, 0x0F	; 15
     290:	a8 df       	rcall	.-176    	; 0x1e2 <MAX7219_writeData>
     292:	0d 17       	cp	r16, r29
     294:	10 f4       	brcc	.+4      	; 0x29a <MAX7219_displayNumber+0x3a>
     296:	8d 2f       	mov	r24, r29
     298:	f7 cf       	rjmp	.-18     	; 0x288 <MAX7219_displayNumber+0x28>
     29a:	c1 30       	cpi	r28, 0x01	; 1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <MAX7219_displayNumber+0x40>
     29e:	e2 c0       	rjmp	.+452    	; 0x464 <MAX7219_displayNumber+0x204>
     2a0:	c2 30       	cpi	r28, 0x02	; 2
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <MAX7219_displayNumber+0x46>
     2a4:	e6 c0       	rjmp	.+460    	; 0x472 <MAX7219_displayNumber+0x212>
     2a6:	d7 c0       	rjmp	.+430    	; 0x456 <MAX7219_displayNumber+0x1f6>
     2a8:	4d 2d       	mov	r20, r13
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	99 df       	rcall	.-206    	; 0x1e2 <MAX7219_writeData>
     2b0:	e5 c0       	rjmp	.+458    	; 0x47c <MAX7219_displayNumber+0x21c>
     2b2:	c2 30       	cpi	r28, 0x02	; 2
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <MAX7219_displayNumber+0x58>
     2b6:	e2 c0       	rjmp	.+452    	; 0x47c <MAX7219_displayNumber+0x21c>
     2b8:	4d 2d       	mov	r20, r13
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	91 df       	rcall	.-222    	; 0x1e2 <MAX7219_writeData>
     2c0:	dd c0       	rjmp	.+442    	; 0x47c <MAX7219_displayNumber+0x21c>
     2c2:	cc 24       	eor	r12, r12
     2c4:	ca 94       	dec	r12
     2c6:	cd 0e       	add	r12, r29
     2c8:	e7 01       	movw	r28, r14
     2ca:	10 e0       	ldi	r17, 0x00	; 0
     2cc:	0b 19       	sub	r16, r11
     2ce:	11 09       	sbc	r17, r1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <MAX7219_displayNumber+0x74>
     2d2:	ca 94       	dec	r12
     2d4:	51 e0       	ldi	r21, 0x01	; 1
     2d6:	5c 0d       	add	r21, r12
     2d8:	e5 2f       	mov	r30, r21
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	e0 17       	cp	r30, r16
     2de:	f1 07       	cpc	r31, r17
     2e0:	79 f5       	brne	.+94     	; 0x340 <MAX7219_displayNumber+0xe0>
     2e2:	bb 20       	and	r11, r11
     2e4:	69 f1       	breq	.+90     	; 0x340 <MAX7219_displayNumber+0xe0>
     2e6:	9e 01       	movw	r18, r28
     2e8:	ad ec       	ldi	r26, 0xCD	; 205
     2ea:	bc ec       	ldi	r27, 0xCC	; 204
     2ec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	9c 01       	movw	r18, r24
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	be 01       	movw	r22, r28
     314:	68 1b       	sub	r22, r24
     316:	79 0b       	sbc	r23, r25
     318:	60 68       	ori	r22, 0x80	; 128
     31a:	4d 2d       	mov	r20, r13
     31c:	85 2f       	mov	r24, r21
     31e:	61 df       	rcall	.-318    	; 0x1e2 <MAX7219_writeData>
     320:	9e 01       	movw	r18, r28
     322:	ad ec       	ldi	r26, 0xCD	; 205
     324:	bc ec       	ldi	r27, 0xCC	; 204
     326:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     32a:	ec 01       	movw	r28, r24
     32c:	d6 95       	lsr	r29
     32e:	c7 95       	ror	r28
     330:	d6 95       	lsr	r29
     332:	c7 95       	ror	r28
     334:	d6 95       	lsr	r29
     336:	c7 95       	ror	r28
     338:	20 97       	sbiw	r28, 0x00	; 0
     33a:	59 f6       	brne	.-106    	; 0x2d2 <MAX7219_displayNumber+0x72>
     33c:	cc 2d       	mov	r28, r12
     33e:	30 c0       	rjmp	.+96     	; 0x3a0 <MAX7219_displayNumber+0x140>
     340:	9e 01       	movw	r18, r28
     342:	ad ec       	ldi	r26, 0xCD	; 205
     344:	bc ec       	ldi	r27, 0xCC	; 204
     346:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     34a:	fc 01       	movw	r30, r24
     34c:	f6 95       	lsr	r31
     34e:	e7 95       	ror	r30
     350:	f6 95       	lsr	r31
     352:	e7 95       	ror	r30
     354:	f6 95       	lsr	r31
     356:	e7 95       	ror	r30
     358:	cf 01       	movw	r24, r30
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	be 01       	movw	r22, r28
     370:	6e 1b       	sub	r22, r30
     372:	7f 0b       	sbc	r23, r31
     374:	4d 2d       	mov	r20, r13
     376:	85 2f       	mov	r24, r21
     378:	34 df       	rcall	.-408    	; 0x1e2 <MAX7219_writeData>
     37a:	9e 01       	movw	r18, r28
     37c:	ad ec       	ldi	r26, 0xCD	; 205
     37e:	bc ec       	ldi	r27, 0xCC	; 204
     380:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     384:	ec 01       	movw	r28, r24
     386:	d6 95       	lsr	r29
     388:	c7 95       	ror	r28
     38a:	d6 95       	lsr	r29
     38c:	c7 95       	ror	r28
     38e:	d6 95       	lsr	r29
     390:	c7 95       	ror	r28
     392:	20 97       	sbiw	r28, 0x00	; 0
     394:	09 f0       	breq	.+2      	; 0x398 <MAX7219_displayNumber+0x138>
     396:	9d cf       	rjmp	.-198    	; 0x2d2 <MAX7219_displayNumber+0x72>
     398:	bb 20       	and	r11, r11
     39a:	09 f4       	brne	.+2      	; 0x39e <MAX7219_displayNumber+0x13e>
     39c:	6f c0       	rjmp	.+222    	; 0x47c <MAX7219_displayNumber+0x21c>
     39e:	cc 2d       	mov	r28, r12
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	b8 16       	cp	r11, r24
     3a4:	81 f0       	breq	.+32     	; 0x3c6 <MAX7219_displayNumber+0x166>
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	b8 16       	cp	r11, r24
     3aa:	39 f1       	breq	.+78     	; 0x3fa <MAX7219_displayNumber+0x19a>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	b8 12       	cpse	r11, r24
     3b0:	65 c0       	rjmp	.+202    	; 0x47c <MAX7219_displayNumber+0x21c>
     3b2:	8a e0       	ldi	r24, 0x0A	; 10
     3b4:	e8 16       	cp	r14, r24
     3b6:	f1 04       	cpc	r15, r1
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <MAX7219_displayNumber+0x15c>
     3ba:	60 c0       	rjmp	.+192    	; 0x47c <MAX7219_displayNumber+0x21c>
     3bc:	4d 2d       	mov	r20, r13
     3be:	60 e8       	ldi	r22, 0x80	; 128
     3c0:	8c 2f       	mov	r24, r28
     3c2:	0f df       	rcall	.-482    	; 0x1e2 <MAX7219_writeData>
     3c4:	5b c0       	rjmp	.+182    	; 0x47c <MAX7219_displayNumber+0x21c>
     3c6:	97 01       	movw	r18, r14
     3c8:	2a 50       	subi	r18, 0x0A	; 10
     3ca:	31 09       	sbc	r19, r1
     3cc:	2a 35       	cpi	r18, 0x5A	; 90
     3ce:	31 05       	cpc	r19, r1
     3d0:	28 f4       	brcc	.+10     	; 0x3dc <MAX7219_displayNumber+0x17c>
     3d2:	4d 2d       	mov	r20, r13
     3d4:	60 e8       	ldi	r22, 0x80	; 128
     3d6:	8c 2f       	mov	r24, r28
     3d8:	04 df       	rcall	.-504    	; 0x1e2 <MAX7219_writeData>
     3da:	50 c0       	rjmp	.+160    	; 0x47c <MAX7219_displayNumber+0x21c>
     3dc:	8a e0       	ldi	r24, 0x0A	; 10
     3de:	e8 16       	cp	r14, r24
     3e0:	f1 04       	cpc	r15, r1
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <MAX7219_displayNumber+0x186>
     3e4:	4b c0       	rjmp	.+150    	; 0x47c <MAX7219_displayNumber+0x21c>
     3e6:	4d 2d       	mov	r20, r13
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	8c 2f       	mov	r24, r28
     3ec:	fa de       	rcall	.-524    	; 0x1e2 <MAX7219_writeData>
     3ee:	4d 2d       	mov	r20, r13
     3f0:	60 e8       	ldi	r22, 0x80	; 128
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	8c 0f       	add	r24, r28
     3f6:	f5 de       	rcall	.-534    	; 0x1e2 <MAX7219_writeData>
     3f8:	41 c0       	rjmp	.+130    	; 0x47c <MAX7219_displayNumber+0x21c>
     3fa:	97 01       	movw	r18, r14
     3fc:	24 56       	subi	r18, 0x64	; 100
     3fe:	31 09       	sbc	r19, r1
     400:	24 38       	cpi	r18, 0x84	; 132
     402:	33 40       	sbci	r19, 0x03	; 3
     404:	20 f4       	brcc	.+8      	; 0x40e <MAX7219_displayNumber+0x1ae>
     406:	4d 2d       	mov	r20, r13
     408:	60 e8       	ldi	r22, 0x80	; 128
     40a:	8c 2f       	mov	r24, r28
     40c:	ea de       	rcall	.-556    	; 0x1e2 <MAX7219_writeData>
     40e:	97 01       	movw	r18, r14
     410:	2a 50       	subi	r18, 0x0A	; 10
     412:	31 09       	sbc	r19, r1
     414:	2a 35       	cpi	r18, 0x5A	; 90
     416:	31 05       	cpc	r19, r1
     418:	58 f4       	brcc	.+22     	; 0x430 <MAX7219_displayNumber+0x1d0>
     41a:	cc 24       	eor	r12, r12
     41c:	ca 94       	dec	r12
     41e:	cc 0e       	add	r12, r28
     420:	4d 2d       	mov	r20, r13
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	8c 2f       	mov	r24, r28
     426:	dd de       	rcall	.-582    	; 0x1e2 <MAX7219_writeData>
     428:	4d 2d       	mov	r20, r13
     42a:	60 e8       	ldi	r22, 0x80	; 128
     42c:	8c 2d       	mov	r24, r12
     42e:	d9 de       	rcall	.-590    	; 0x1e2 <MAX7219_writeData>
     430:	8a e0       	ldi	r24, 0x0A	; 10
     432:	e8 16       	cp	r14, r24
     434:	f1 04       	cpc	r15, r1
     436:	10 f5       	brcc	.+68     	; 0x47c <MAX7219_displayNumber+0x21c>
     438:	4d 2d       	mov	r20, r13
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8c 2d       	mov	r24, r12
     43e:	d1 de       	rcall	.-606    	; 0x1e2 <MAX7219_writeData>
     440:	4d 2d       	mov	r20, r13
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	8c 0d       	add	r24, r12
     448:	cc de       	rcall	.-616    	; 0x1e2 <MAX7219_writeData>
     44a:	4d 2d       	mov	r20, r13
     44c:	60 e8       	ldi	r22, 0x80	; 128
     44e:	8e ef       	ldi	r24, 0xFE	; 254
     450:	8c 0d       	add	r24, r12
     452:	c7 de       	rcall	.-626    	; 0x1e2 <MAX7219_writeData>
     454:	13 c0       	rjmp	.+38     	; 0x47c <MAX7219_displayNumber+0x21c>
     456:	e1 14       	cp	r14, r1
     458:	f1 04       	cpc	r15, r1
     45a:	09 f4       	brne	.+2      	; 0x45e <MAX7219_displayNumber+0x1fe>
     45c:	2d cf       	rjmp	.-422    	; 0x2b8 <MAX7219_displayNumber+0x58>
     45e:	08 e0       	ldi	r16, 0x08	; 8
     460:	d8 e0       	ldi	r29, 0x08	; 8
     462:	2f cf       	rjmp	.-418    	; 0x2c2 <MAX7219_displayNumber+0x62>
     464:	e1 14       	cp	r14, r1
     466:	f1 04       	cpc	r15, r1
     468:	09 f4       	brne	.+2      	; 0x46c <MAX7219_displayNumber+0x20c>
     46a:	1e cf       	rjmp	.-452    	; 0x2a8 <MAX7219_displayNumber+0x48>
     46c:	04 e0       	ldi	r16, 0x04	; 4
     46e:	d4 e0       	ldi	r29, 0x04	; 4
     470:	28 cf       	rjmp	.-432    	; 0x2c2 <MAX7219_displayNumber+0x62>
     472:	e1 14       	cp	r14, r1
     474:	f1 04       	cpc	r15, r1
     476:	09 f4       	brne	.+2      	; 0x47a <MAX7219_displayNumber+0x21a>
     478:	1c cf       	rjmp	.-456    	; 0x2b2 <MAX7219_displayNumber+0x52>
     47a:	23 cf       	rjmp	.-442    	; 0x2c2 <MAX7219_displayNumber+0x62>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	bf 90       	pop	r11
     48e:	08 95       	ret

00000490 <MAX7219_displayInit>:
     490:	cf 93       	push	r28
     492:	84 b3       	in	r24, 0x14	; 20
     494:	8f 60       	ori	r24, 0x0F	; 15
     496:	84 bb       	out	0x14, r24	; 20
     498:	c0 e0       	ldi	r28, 0x00	; 0
     49a:	8c 2f       	mov	r24, r28
     49c:	c9 de       	rcall	.-622    	; 0x230 <MAX7219_clearDisplay>
     49e:	4c 2f       	mov	r20, r28
     4a0:	6f ef       	ldi	r22, 0xFF	; 255
     4a2:	89 e0       	ldi	r24, 0x09	; 9
     4a4:	9e de       	rcall	.-708    	; 0x1e2 <MAX7219_writeData>
     4a6:	4c 2f       	mov	r20, r28
     4a8:	67 e0       	ldi	r22, 0x07	; 7
     4aa:	8b e0       	ldi	r24, 0x0B	; 11
     4ac:	9a de       	rcall	.-716    	; 0x1e2 <MAX7219_writeData>
     4ae:	4c 2f       	mov	r20, r28
     4b0:	68 e0       	ldi	r22, 0x08	; 8
     4b2:	8a e0       	ldi	r24, 0x0A	; 10
     4b4:	96 de       	rcall	.-724    	; 0x1e2 <MAX7219_writeData>
     4b6:	4c 2f       	mov	r20, r28
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	92 de       	rcall	.-732    	; 0x1e2 <MAX7219_writeData>
     4be:	4c 2f       	mov	r20, r28
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	8f e0       	ldi	r24, 0x0F	; 15
     4c4:	8e de       	rcall	.-740    	; 0x1e2 <MAX7219_writeData>
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	9f e8       	ldi	r25, 0x8F	; 143
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <MAX7219_displayInit+0x3a>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <MAX7219_displayInit+0x40>
     4d0:	00 00       	nop
     4d2:	cf 5f       	subi	r28, 0xFF	; 255
     4d4:	c3 30       	cpi	r28, 0x03	; 3
     4d6:	09 f7       	brne	.-62     	; 0x49a <MAX7219_displayInit+0xa>
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	aa de       	rcall	.-684    	; 0x230 <MAX7219_clearDisplay>
     4dc:	43 e0       	ldi	r20, 0x03	; 3
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	89 e0       	ldi	r24, 0x09	; 9
     4e2:	7f de       	rcall	.-770    	; 0x1e2 <MAX7219_writeData>
     4e4:	43 e0       	ldi	r20, 0x03	; 3
     4e6:	67 e0       	ldi	r22, 0x07	; 7
     4e8:	8b e0       	ldi	r24, 0x0B	; 11
     4ea:	7b de       	rcall	.-778    	; 0x1e2 <MAX7219_writeData>
     4ec:	43 e0       	ldi	r20, 0x03	; 3
     4ee:	68 e0       	ldi	r22, 0x08	; 8
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	77 de       	rcall	.-786    	; 0x1e2 <MAX7219_writeData>
     4f4:	43 e0       	ldi	r20, 0x03	; 3
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	73 de       	rcall	.-794    	; 0x1e2 <MAX7219_writeData>
     4fc:	43 e0       	ldi	r20, 0x03	; 3
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	8f e0       	ldi	r24, 0x0F	; 15
     502:	6f de       	rcall	.-802    	; 0x1e2 <MAX7219_writeData>
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	9f e8       	ldi	r25, 0x8F	; 143
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <MAX7219_displayInit+0x78>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <MAX7219_displayInit+0x7e>
     50e:	00 00       	nop
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <MAX7219_display7segment>:
	
}

void MAX7219_display7segment(uint16_t data,DISPLAY display){
	
	switch (display)
     514:	62 30       	cpi	r22, 0x02	; 2
     516:	b1 f0       	breq	.+44     	; 0x544 <MAX7219_display7segment+0x30>
     518:	28 f4       	brcc	.+10     	; 0x524 <MAX7219_display7segment+0x10>
     51a:	66 23       	and	r22, r22
     51c:	49 f0       	breq	.+18     	; 0x530 <MAX7219_display7segment+0x1c>
     51e:	61 30       	cpi	r22, 0x01	; 1
     520:	61 f0       	breq	.+24     	; 0x53a <MAX7219_display7segment+0x26>
     522:	08 95       	ret
     524:	64 30       	cpi	r22, 0x04	; 4
     526:	c1 f0       	breq	.+48     	; 0x558 <MAX7219_display7segment+0x44>
     528:	90 f0       	brcs	.+36     	; 0x54e <MAX7219_display7segment+0x3a>
     52a:	65 30       	cpi	r22, 0x05	; 5
     52c:	d1 f0       	breq	.+52     	; 0x562 <MAX7219_display7segment+0x4e>
     52e:	08 95       	ret
	{	
		
	case  RPM :			// chip 0, side left
		
		MAX7219_displayNumber(data,CHIP0,LEFT,NO_DPOINT);	
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	41 e0       	ldi	r20, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	94 ce       	rjmp	.-728    	; 0x260 <MAX7219_displayNumber>
		break;
     538:	08 95       	ret
		
	case  WATER_TEMP :	// chip 0, side right
		
		MAX7219_displayNumber(data,CHIP0,RIGHT,NO_DPOINT);
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	42 e0       	ldi	r20, 0x02	; 2
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	8f ce       	rjmp	.-738    	; 0x260 <MAX7219_displayNumber>
		break;
     542:	08 95       	ret
		
	case  LUBE_OIL_PRESSURE :
		
		MAX7219_displayNumber(data,CHIP1,LEFT,LUBE_OIL_PRESSURE_DPOINT);
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	8a ce       	rjmp	.-748    	; 0x260 <MAX7219_displayNumber>
		break;
     54c:	08 95       	ret
		
	case LUBE_OIL_TEMP :
	
	MAX7219_displayNumber(data,CHIP1,RIGHT,NO_DPOINT);
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	42 e0       	ldi	r20, 0x02	; 2
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	85 ce       	rjmp	.-758    	; 0x260 <MAX7219_displayNumber>
	break;
     556:	08 95       	ret
	
	case BATTERY_VGE :
	
	MAX7219_displayNumber(data,CHIP2,LEFT,BATTERY_VGE_DPOINT);
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	62 e0       	ldi	r22, 0x02	; 2
     55e:	80 ce       	rjmp	.-768    	; 0x260 <MAX7219_displayNumber>
	break;
     560:	08 95       	ret
	
	case RUN_TIME :
	
	MAX7219_displayNumber(data,CHIP2,RIGHT,NO_DPOINT);
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	42 e0       	ldi	r20, 0x02	; 2
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	7b ce       	rjmp	.-778    	; 0x260 <MAX7219_displayNumber>
     56a:	08 95       	ret

0000056c <MAX7219_displayLED>:
	}
}

void MAX7219_displayLED(uint16_t state, uint8_t digit){
	
	if(digit == MAX7219_DIGIT1){
     56c:	61 30       	cpi	r22, 0x01	; 1
     56e:	29 f4       	brne	.+10     	; 0x57a <MAX7219_displayLED+0xe>
		MAX7219_writeData(MAX7219_DIGIT1,state,CHIP3);
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	68 2f       	mov	r22, r24
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	35 ce       	rjmp	.-918    	; 0x1e2 <MAX7219_writeData>
     578:	08 95       	ret
	}
	if(digit == MAX7219_DIGIT2){
     57a:	62 30       	cpi	r22, 0x02	; 2
     57c:	51 f4       	brne	.+20     	; 0x592 <MAX7219_displayLED+0x26>
		MAX7219_writeData(MAX7219_DIGIT2,(state>>4),CHIP3);
     57e:	bc 01       	movw	r22, r24
     580:	72 95       	swap	r23
     582:	62 95       	swap	r22
     584:	6f 70       	andi	r22, 0x0F	; 15
     586:	67 27       	eor	r22, r23
     588:	7f 70       	andi	r23, 0x0F	; 15
     58a:	67 27       	eor	r22, r23
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	28 ce       	rjmp	.-944    	; 0x1e2 <MAX7219_writeData>
     592:	08 95       	ret

00000594 <MAX7219_displayError>:
	}
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){
     594:	cf 93       	push	r28

	uint8_t q = 0;
	switch(error_code){
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	88 30       	cpi	r24, 0x08	; 8
     59a:	91 05       	cpc	r25, r1
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <MAX7219_displayError+0xc>
     59e:	88 c0       	rjmp	.+272    	; 0x6b0 <MAX7219_displayError+0x11c>
     5a0:	fc 01       	movw	r30, r24
     5a2:	ea 5b       	subi	r30, 0xBA	; 186
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__tablejump2__>
     5aa:	c4 e0       	ldi	r28, 0x04	; 4
		
		case RPM_SENSOR_FAIL :
		
				q = MAX7219_DIGIT4;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP0);
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	6f e0       	ldi	r22, 0x0F	; 15
     5b0:	8c 2f       	mov	r24, r28
     5b2:	17 de       	rcall	.-978    	; 0x1e2 <MAX7219_writeData>
				} while (--q);
     5b4:	c1 50       	subi	r28, 0x01	; 1
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <MAX7219_displayError+0x18>
				MAX7219_writeData(MAX7219_DIGIT3,ERROR,CHIP0);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	6b e0       	ldi	r22, 0x0B	; 11
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	11 de       	rcall	.-990    	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT4,RPM_SENSOR_ERROR,CHIP0);
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	84 e0       	ldi	r24, 0x04	; 4
     5c6:	0d de       	rcall	.-998    	; 0x1e2 <MAX7219_writeData>
		break;
     5c8:	73 c0       	rjmp	.+230    	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     5ca:	c4 e0       	ldi	r28, 0x04	; 4
		
		case LOP_SENSOR_OFFSCALE_LOW :
		
				q = MAX7219_DIGIT4;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP1);
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	6f e0       	ldi	r22, 0x0F	; 15
     5d0:	8c 2f       	mov	r24, r28
     5d2:	07 de       	rcall	.-1010   	; 0x1e2 <MAX7219_writeData>
				} while (--q);
     5d4:	c1 50       	subi	r28, 0x01	; 1
     5d6:	d1 f7       	brne	.-12     	; 0x5cc <MAX7219_displayError+0x38>
				MAX7219_writeData(MAX7219_DIGIT3,ERROR,CHIP1);
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	6b e0       	ldi	r22, 0x0B	; 11
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	01 de       	rcall	.-1022   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT4,LOP_SENSOR_OSL_ERROR,CHIP1);
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	fd dd       	rcall	.-1030   	; 0x1e2 <MAX7219_writeData>
		break;
     5e8:	63 c0       	rjmp	.+198    	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     5ea:	c4 e0       	ldi	r28, 0x04	; 4
		
		case LOP_SENSOR_OFFSCALE_HIGH :
		
				q = MAX7219_DIGIT4;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP1);
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	6f e0       	ldi	r22, 0x0F	; 15
     5f0:	8c 2f       	mov	r24, r28
     5f2:	f7 dd       	rcall	.-1042   	; 0x1e2 <MAX7219_writeData>
				} while (--q);
     5f4:	c1 50       	subi	r28, 0x01	; 1
     5f6:	d1 f7       	brne	.-12     	; 0x5ec <MAX7219_displayError+0x58>
				MAX7219_writeData(MAX7219_DIGIT3,ERROR,CHIP1);
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	6b e0       	ldi	r22, 0x0B	; 11
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	f1 dd       	rcall	.-1054   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT4,LOP_SENSOR_OSH_ERROR,CHIP1);
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	63 e0       	ldi	r22, 0x03	; 3
     604:	84 e0       	ldi	r24, 0x04	; 4
     606:	ed dd       	rcall	.-1062   	; 0x1e2 <MAX7219_writeData>
		break;
     608:	53 c0       	rjmp	.+166    	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     60a:	c8 e0       	ldi	r28, 0x08	; 8
		
		case LOT_SENSOR_OFFSCALE_LOW :
		
				q = MAX7219_DIGIT8;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP1);
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	6f e0       	ldi	r22, 0x0F	; 15
     610:	8c 2f       	mov	r24, r28
     612:	e7 dd       	rcall	.-1074   	; 0x1e2 <MAX7219_writeData>
				} while (--q > MAX7219_DIGIT4);
     614:	c1 50       	subi	r28, 0x01	; 1
     616:	c4 30       	cpi	r28, 0x04	; 4
     618:	c9 f7       	brne	.-14     	; 0x60c <MAX7219_displayError+0x78>
				MAX7219_writeData(MAX7219_DIGIT7,ERROR,CHIP1);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	6b e0       	ldi	r22, 0x0B	; 11
     61e:	87 e0       	ldi	r24, 0x07	; 7
     620:	e0 dd       	rcall	.-1088   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT8,LOT_SENSOR_OSL_ERROR,CHIP1);
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	88 e0       	ldi	r24, 0x08	; 8
     628:	dc dd       	rcall	.-1096   	; 0x1e2 <MAX7219_writeData>
		break;
     62a:	42 c0       	rjmp	.+132    	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     62c:	c8 e0       	ldi	r28, 0x08	; 8
		
		case LOT_SENSOR_OFFSCALE_HIGH :
		
				q = MAX7219_DIGIT8;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP1);
     62e:	41 e0       	ldi	r20, 0x01	; 1
     630:	6f e0       	ldi	r22, 0x0F	; 15
     632:	8c 2f       	mov	r24, r28
     634:	d6 dd       	rcall	.-1108   	; 0x1e2 <MAX7219_writeData>
				} while (--q > MAX7219_DIGIT4);
     636:	c1 50       	subi	r28, 0x01	; 1
     638:	c4 30       	cpi	r28, 0x04	; 4
     63a:	c9 f7       	brne	.-14     	; 0x62e <MAX7219_displayError+0x9a>
				MAX7219_writeData(MAX7219_DIGIT7,ERROR,CHIP1);
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	6b e0       	ldi	r22, 0x0B	; 11
     640:	87 e0       	ldi	r24, 0x07	; 7
     642:	cf dd       	rcall	.-1122   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT8,LOT_SENSOR_OSH_ERROR,CHIP1);
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	65 e0       	ldi	r22, 0x05	; 5
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	cb dd       	rcall	.-1130   	; 0x1e2 <MAX7219_writeData>
		break;
     64c:	31 c0       	rjmp	.+98     	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     64e:	c8 e0       	ldi	r28, 0x08	; 8
		
		case WT_SENSOR_OFFSCALE_LOW :
		
				q = MAX7219_DIGIT8;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP0);
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	6f e0       	ldi	r22, 0x0F	; 15
     654:	8c 2f       	mov	r24, r28
     656:	c5 dd       	rcall	.-1142   	; 0x1e2 <MAX7219_writeData>
				} while (--q > MAX7219_DIGIT4);
     658:	c1 50       	subi	r28, 0x01	; 1
     65a:	c4 30       	cpi	r28, 0x04	; 4
     65c:	c9 f7       	brne	.-14     	; 0x650 <MAX7219_displayError+0xbc>
				MAX7219_writeData(MAX7219_DIGIT7,ERROR,CHIP0);
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	6b e0       	ldi	r22, 0x0B	; 11
     662:	87 e0       	ldi	r24, 0x07	; 7
     664:	be dd       	rcall	.-1156   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT8,WT_SENSOR_OSL_ERROR,CHIP0);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	66 e0       	ldi	r22, 0x06	; 6
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	ba dd       	rcall	.-1164   	; 0x1e2 <MAX7219_writeData>
		break;
     66e:	20 c0       	rjmp	.+64     	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     670:	c8 e0       	ldi	r28, 0x08	; 8
		
		case WT_SENSOR_OFFSCALE_HIGH :
		
				q = MAX7219_DIGIT8;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP0);
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	6f e0       	ldi	r22, 0x0F	; 15
     676:	8c 2f       	mov	r24, r28
     678:	b4 dd       	rcall	.-1176   	; 0x1e2 <MAX7219_writeData>
				} while (--q > MAX7219_DIGIT4);
     67a:	c1 50       	subi	r28, 0x01	; 1
     67c:	c4 30       	cpi	r28, 0x04	; 4
     67e:	c9 f7       	brne	.-14     	; 0x672 <MAX7219_displayError+0xde>
				MAX7219_writeData(MAX7219_DIGIT7,ERROR,CHIP0);
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	6b e0       	ldi	r22, 0x0B	; 11
     684:	87 e0       	ldi	r24, 0x07	; 7
     686:	ad dd       	rcall	.-1190   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT8,WT_SENSOR_OSH_ERROR,CHIP0);
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	67 e0       	ldi	r22, 0x07	; 7
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	a9 dd       	rcall	.-1198   	; 0x1e2 <MAX7219_writeData>
		break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <MAX7219_displayError+0x11c>
}

void MAX7219_displayError(SENSOR_ERROR_CODE error_code){

	uint8_t q = 0;
	switch(error_code){
     692:	c4 e0       	ldi	r28, 0x04	; 4
		
		case BV_SENSOR_FAIL :
		
				q = MAX7219_DIGIT4;
				do {
					MAX7219_writeData(q, MAX7219_CHAR_BLANK,CHIP2);
     694:	42 e0       	ldi	r20, 0x02	; 2
     696:	6f e0       	ldi	r22, 0x0F	; 15
     698:	8c 2f       	mov	r24, r28
     69a:	a3 dd       	rcall	.-1210   	; 0x1e2 <MAX7219_writeData>
				} while (--q);
     69c:	c1 50       	subi	r28, 0x01	; 1
     69e:	d1 f7       	brne	.-12     	; 0x694 <MAX7219_displayError+0x100>
				MAX7219_writeData(MAX7219_DIGIT3,ERROR,CHIP2);
     6a0:	42 e0       	ldi	r20, 0x02	; 2
     6a2:	6b e0       	ldi	r22, 0x0B	; 11
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	9d dd       	rcall	.-1222   	; 0x1e2 <MAX7219_writeData>
				MAX7219_writeData(MAX7219_DIGIT4,BV_SENSOR_ERROR,CHIP2);
     6a8:	42 e0       	ldi	r20, 0x02	; 2
     6aa:	68 e0       	ldi	r22, 0x08	; 8
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	99 dd       	rcall	.-1230   	; 0x1e2 <MAX7219_writeData>
		break;
		
	}
}
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <system_timer_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	8e bd       	out	0x2e, r24	; 46
     6ba:	1d bc       	out	0x2d, r1	; 45
     6bc:	1c bc       	out	0x2c, r1	; 44
     6be:	08 95       	ret

000006c0 <system_timer_enable>:
     6c0:	1d bc       	out	0x2d, r1	; 45
     6c2:	1c bc       	out	0x2c, r1	; 44
     6c4:	80 e2       	ldi	r24, 0x20	; 32
     6c6:	9c e1       	ldi	r25, 0x1C	; 28
     6c8:	9b bd       	out	0x2b, r25	; 43
     6ca:	8a bd       	out	0x2a, r24	; 42
     6cc:	87 b7       	in	r24, 0x37	; 55
     6ce:	80 61       	ori	r24, 0x10	; 16
     6d0:	87 bf       	out	0x37, r24	; 55
     6d2:	8e b5       	in	r24, 0x2e	; 46
     6d4:	85 60       	ori	r24, 0x05	; 5
     6d6:	8e bd       	out	0x2e, r24	; 46
     6d8:	08 95       	ret

000006da <rpm_timer_init>:
     6da:	16 98       	cbi	0x02, 6	; 2
     6dc:	1e 9a       	sbi	0x03, 6	; 3
     6de:	08 95       	ret

000006e0 <rpm_timer_enable>:
     6e0:	10 92 89 00 	sts	0x0089, r1
     6e4:	10 92 88 00 	sts	0x0088, r1
     6e8:	ea e8       	ldi	r30, 0x8A	; 138
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	86 60       	ori	r24, 0x06	; 6
     6f0:	80 83       	st	Z, r24
     6f2:	08 95       	ret

000006f4 <__vector_12>:
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	0b b6       	in	r0, 0x3b	; 59
     700:	0f 92       	push	r0
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
     71a:	10 92 8a 00 	sts	0x008A, r1
     71e:	80 91 88 00 	lds	r24, 0x0088
     722:	90 91 89 00 	lds	r25, 0x0089
     726:	90 93 1e 01 	sts	0x011E, r25
     72a:	80 93 1d 01 	sts	0x011D, r24
     72e:	60 91 1d 01 	lds	r22, 0x011D
     732:	70 91 1e 01 	lds	r23, 0x011E
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
     73e:	21 ec       	ldi	r18, 0xC1	; 193
     740:	3a ec       	ldi	r19, 0xCA	; 202
     742:	41 e6       	ldi	r20, 0x61	; 97
     744:	5f e3       	ldi	r21, 0x3F	; 63
     746:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     74a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixunssfsi>
     74e:	70 93 1e 01 	sts	0x011E, r23
     752:	60 93 1d 01 	sts	0x011D, r22
     756:	c4 df       	rcall	.-120    	; 0x6e0 <rpm_timer_enable>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 32 01 	sts	0x0132, r24
     75e:	80 91 2e 01 	lds	r24, 0x012E
     762:	88 23       	and	r24, r24
     764:	69 f0       	breq	.+26     	; 0x780 <__vector_12+0x8c>
     766:	80 91 2f 01 	lds	r24, 0x012F
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 2f 01 	sts	0x012F, r24
     770:	80 91 2f 01 	lds	r24, 0x012F
     774:	85 31       	cpi	r24, 0x15	; 21
     776:	20 f0       	brcs	.+8      	; 0x780 <__vector_12+0x8c>
     778:	10 92 2e 01 	sts	0x012E, r1
     77c:	10 92 2f 01 	sts	0x012F, r1
     780:	80 91 2c 01 	lds	r24, 0x012C
     784:	88 23       	and	r24, r24
     786:	69 f0       	breq	.+26     	; 0x7a2 <__vector_12+0xae>
     788:	80 91 2d 01 	lds	r24, 0x012D
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 2d 01 	sts	0x012D, r24
     792:	80 91 2d 01 	lds	r24, 0x012D
     796:	85 31       	cpi	r24, 0x15	; 21
     798:	20 f0       	brcs	.+8      	; 0x7a2 <__vector_12+0xae>
     79a:	10 92 2c 01 	sts	0x012C, r1
     79e:	10 92 2d 01 	sts	0x012D, r1
     7a2:	80 91 2b 01 	lds	r24, 0x012B
     7a6:	81 11       	cpse	r24, r1
     7a8:	0f c0       	rjmp	.+30     	; 0x7c8 <__vector_12+0xd4>
     7aa:	80 91 30 01 	lds	r24, 0x0130
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	98 0f       	add	r25, r24
     7b2:	90 93 30 01 	sts	0x0130, r25
     7b6:	85 31       	cpi	r24, 0x15	; 21
     7b8:	58 f0       	brcs	.+22     	; 0x7d0 <__vector_12+0xdc>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 31 01 	sts	0x0131, r24
     7c0:	82 e3       	ldi	r24, 0x32	; 50
     7c2:	80 93 30 01 	sts	0x0130, r24
     7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <__vector_12+0xdc>
     7c8:	10 92 31 01 	sts	0x0131, r1
     7cc:	10 92 30 01 	sts	0x0130, r1
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0b be       	out	0x3b, r0	; 59
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0
     7f2:	1f 90       	pop	r1
     7f4:	18 95       	reti

000007f6 <ADC_enable>:
     7f6:	37 9a       	sbi	0x06, 7	; 6
     7f8:	08 95       	ret

000007fa <ADC_init>:
     7fa:	3e 9a       	sbi	0x07, 6	; 7
     7fc:	86 b1       	in	r24, 0x06	; 6
     7fe:	87 60       	ori	r24, 0x07	; 7
     800:	86 b9       	out	0x06, r24	; 6
     802:	f9 cf       	rjmp	.-14     	; 0x7f6 <ADC_enable>
     804:	08 95       	ret

00000806 <ADC_read>:
     806:	97 b1       	in	r25, 0x07	; 7
     808:	98 7f       	andi	r25, 0xF8	; 248
     80a:	89 2b       	or	r24, r25
     80c:	87 b9       	out	0x07, r24	; 7
     80e:	36 9a       	sbi	0x06, 6	; 6
     810:	36 99       	sbic	0x06, 6	; 6
     812:	fe cf       	rjmp	.-4      	; 0x810 <ADC_read+0xa>
     814:	84 b1       	in	r24, 0x04	; 4
     816:	95 b1       	in	r25, 0x05	; 5
     818:	08 95       	ret

0000081a <test_display_main>:
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	88 eb       	ldi	r24, 0xB8	; 184
     81e:	92 e2       	ldi	r25, 0x22	; 34
     820:	79 de       	rcall	.-782    	; 0x514 <MAX7219_display7segment>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	88 eb       	ldi	r24, 0xB8	; 184
     826:	92 e2       	ldi	r25, 0x22	; 34
     828:	75 de       	rcall	.-790    	; 0x514 <MAX7219_display7segment>
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	88 eb       	ldi	r24, 0xB8	; 184
     82e:	92 e2       	ldi	r25, 0x22	; 34
     830:	71 de       	rcall	.-798    	; 0x514 <MAX7219_display7segment>
     832:	63 e0       	ldi	r22, 0x03	; 3
     834:	88 eb       	ldi	r24, 0xB8	; 184
     836:	92 e2       	ldi	r25, 0x22	; 34
     838:	6d de       	rcall	.-806    	; 0x514 <MAX7219_display7segment>
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	88 eb       	ldi	r24, 0xB8	; 184
     83e:	92 e2       	ldi	r25, 0x22	; 34
     840:	69 de       	rcall	.-814    	; 0x514 <MAX7219_display7segment>
     842:	65 e0       	ldi	r22, 0x05	; 5
     844:	88 eb       	ldi	r24, 0xB8	; 184
     846:	92 e2       	ldi	r25, 0x22	; 34
     848:	65 de       	rcall	.-822    	; 0x514 <MAX7219_display7segment>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	8d de       	rcall	.-742    	; 0x56c <MAX7219_displayLED>
     852:	62 e0       	ldi	r22, 0x02	; 2
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	89 de       	rcall	.-750    	; 0x56c <MAX7219_displayLED>
     85a:	2f ef       	ldi	r18, 0xFF	; 255
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9c e2       	ldi	r25, 0x2C	; 44
     860:	21 50       	subi	r18, 0x01	; 1
     862:	80 40       	sbci	r24, 0x00	; 0
     864:	90 40       	sbci	r25, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <test_display_main+0x46>
     868:	00 c0       	rjmp	.+0      	; 0x86a <test_display_main+0x50>
     86a:	00 00       	nop
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e0 dc       	rcall	.-1600   	; 0x230 <MAX7219_clearDisplay>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	de dc       	rcall	.-1604   	; 0x230 <MAX7219_clearDisplay>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	dc dc       	rcall	.-1608   	; 0x230 <MAX7219_clearDisplay>
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	da cc       	rjmp	.-1612   	; 0x230 <MAX7219_clearDisplay>
     87c:	08 95       	ret

0000087e <process_rpm>:
	}
}

 void process_rpm(){
	
	rpm_sensor.alarm = 0;
     87e:	10 92 80 01 	sts	0x0180, r1
	rpm_sensor.trip = 0;
     882:	10 92 83 01 	sts	0x0183, r1
	rpm_sensor.out_of_range = 0;
     886:	10 92 8a 01 	sts	0x018A, r1
	
	if( rpm > RPM_TRIP){
     88a:	80 91 1d 01 	lds	r24, 0x011D
     88e:	90 91 1e 01 	lds	r25, 0x011E
     892:	85 3c       	cpi	r24, 0xC5	; 197
     894:	99 40       	sbci	r25, 0x09	; 9
     896:	18 f0       	brcs	.+6      	; 0x89e <process_rpm+0x20>
		rpm_sensor.trip = 1;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 83 01 	sts	0x0183, r24
	}
	if (rpm > RPM_ALARM){
     89e:	80 91 1d 01 	lds	r24, 0x011D
     8a2:	90 91 1e 01 	lds	r25, 0x011E
     8a6:	8d 36       	cpi	r24, 0x6D	; 109
     8a8:	97 40       	sbci	r25, 0x07	; 7
     8aa:	18 f0       	brcs	.+6      	; 0x8b2 <process_rpm+0x34>
		rpm_sensor.alarm = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 80 01 	sts	0x0180, r24
	}
	
	if((rpm < RPM_TOL) && (!lop_sensor.trip) )
     8b2:	80 91 1d 01 	lds	r24, 0x011D
     8b6:	90 91 1e 01 	lds	r25, 0x011E
     8ba:	0a 97       	sbiw	r24, 0x0a	; 10
     8bc:	98 f4       	brcc	.+38     	; 0x8e4 <process_rpm+0x66>
     8be:	80 91 41 01 	lds	r24, 0x0141
     8c2:	81 11       	cpse	r24, r1
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <process_rpm+0x66>
	{
		rpm_sensor.out_of_range = 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 8a 01 	sts	0x018A, r24
		rpm_sensor_delay++;
     8cc:	80 91 27 01 	lds	r24, 0x0127
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
		if(rpm_sensor_delay > (RPM_SENSOR_FAIL_DELAY + 10))
     8d2:	8f 31       	cpi	r24, 0x1F	; 31
     8d4:	18 f4       	brcc	.+6      	; 0x8dc <process_rpm+0x5e>
	}
	
	if((rpm < RPM_TOL) && (!lop_sensor.trip) )
	{
		rpm_sensor.out_of_range = 1;
		rpm_sensor_delay++;
     8d6:	80 93 27 01 	sts	0x0127, r24
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <process_rpm+0x66>
		if(rpm_sensor_delay > (RPM_SENSOR_FAIL_DELAY + 10))
		{
			rpm_sensor_delay = RPM_SENSOR_FAIL_DELAY + 1;
     8dc:	85 e1       	ldi	r24, 0x15	; 21
     8de:	80 93 27 01 	sts	0x0127, r24
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <process_rpm+0x6e>
		}
		
	}
	
	if(rpm_sensor_delay > RPM_SENSOR_FAIL_DELAY)
     8e4:	80 91 27 01 	lds	r24, 0x0127
     8e8:	85 31       	cpi	r24, 0x15	; 21
     8ea:	30 f0       	brcs	.+12     	; 0x8f8 <process_rpm+0x7a>
	{
		rpm_sensor.trip = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 83 01 	sts	0x0183, r24
		MAX7219_displayError(RPM_SENSOR_FAIL);
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	4f de       	rcall	.-866    	; 0x594 <MAX7219_displayError>
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <process_rpm+0x86>
		
	}
	else{
		MAX7219_display7segment(rpm,RPM);
     8f8:	80 91 1d 01 	lds	r24, 0x011D
     8fc:	90 91 1e 01 	lds	r25, 0x011E
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	08 de       	rcall	.-1008   	; 0x514 <MAX7219_display7segment>
	}
	
	if(!rpm_sensor.out_of_range)
     904:	80 91 8a 01 	lds	r24, 0x018A
     908:	81 11       	cpse	r24, r1
     90a:	02 c0       	rjmp	.+4      	; 0x910 <process_rpm+0x92>
	{
		rpm_sensor_delay = 0;
     90c:	10 92 27 01 	sts	0x0127, r1
     910:	08 95       	ret

00000912 <process_lop>:
	}
}

void process_lop(){
	
	lop_sensor.alarm = 0;
     912:	10 92 3e 01 	sts	0x013E, r1
	lop_sensor.trip = 0;
     916:	10 92 41 01 	sts	0x0141, r1
	lop_sensor.out_of_range = 0;
     91a:	10 92 48 01 	sts	0x0148, r1
	
	lop_rawADC = ADC_read(LUBE_OIL_PRESSURE_ADC_CHANNEL);
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	72 df       	rcall	.-284    	; 0x806 <ADC_read>
     922:	90 93 1a 01 	sts	0x011A, r25
     926:	80 93 19 01 	sts	0x0119, r24
	
	
	if( lop_rawADC < (LOP_MIN_ADC - LOP_TOL_ADC)){
     92a:	88 34       	cpi	r24, 0x48	; 72
     92c:	91 05       	cpc	r25, r1
     92e:	30 f4       	brcc	.+12     	; 0x93c <process_lop+0x2a>
			
			lop_sensor.out_of_range = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 48 01 	sts	0x0148, r24
			lop_sensor.trip = 1;	
     936:	80 93 41 01 	sts	0x0141, r24
			MAX7219_displayError(LOP_SENSOR_OFFSCALE_LOW);
     93a:	2c de       	rcall	.-936    	; 0x594 <MAX7219_displayError>
	}
	if(lop_rawADC > LOP_MAX_ADC){
     93c:	80 91 19 01 	lds	r24, 0x0119
     940:	90 91 1a 01 	lds	r25, 0x011A
     944:	8b 39       	cpi	r24, 0x9B	; 155
     946:	93 40       	sbci	r25, 0x03	; 3
     948:	38 f0       	brcs	.+14     	; 0x958 <process_lop+0x46>
			lop_sensor.out_of_range = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 48 01 	sts	0x0148, r24
			lop_sensor.trip = 1;
     950:	80 93 41 01 	sts	0x0141, r24
			MAX7219_displayError(LOP_SENSOR_OFFSCALE_HIGH);
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	1e de       	rcall	.-964    	; 0x594 <MAX7219_displayError>
	}
	
	if( lop_rawADC < LOP_TRIP_ADC){
     958:	80 91 19 01 	lds	r24, 0x0119
     95c:	90 91 1a 01 	lds	r25, 0x011A
     960:	81 3e       	cpi	r24, 0xE1	; 225
     962:	91 05       	cpc	r25, r1
     964:	18 f4       	brcc	.+6      	; 0x96c <process_lop+0x5a>
				lop_sensor.trip = 1;
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	20 93 41 01 	sts	0x0141, r18
	}
	if( (lop_rawADC < LOP_ALARM_ADC) && (lop_rawADC >= LOP_TRIP_ADC)){
     96c:	9c 01       	movw	r18, r24
     96e:	21 5e       	subi	r18, 0xE1	; 225
     970:	31 09       	sbc	r19, r1
     972:	22 35       	cpi	r18, 0x52	; 82
     974:	31 05       	cpc	r19, r1
     976:	18 f4       	brcc	.+6      	; 0x97e <process_lop+0x6c>
			
				lop_sensor.alarm = 1;	
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	20 93 3e 01 	sts	0x013E, r18
	}
	
	
	if(!lop_sensor.out_of_range){
     97e:	20 91 48 01 	lds	r18, 0x0148
     982:	21 11       	cpse	r18, r1
     984:	1f c0       	rjmp	.+62     	; 0x9c4 <process_lop+0xb2>
     986:	bc 01       	movw	r22, r24
     988:	66 56       	subi	r22, 0x66	; 102
     98a:	71 09       	sbc	r23, r1
     98c:	77 23       	and	r23, r23
     98e:	14 f4       	brge	.+4      	; 0x994 <process_lop+0x82>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
		signed int temp_lop = 0;
		
		temp_lop = lop_rawADC - LOP_MIN_ADC;
		if(temp_lop <= 0) { temp_lop = 0; }
			
		lop = (float)(LOP_SLOPE_ADC*temp_lop);
     994:	88 27       	eor	r24, r24
     996:	77 fd       	sbrc	r23, 7
     998:	80 95       	com	r24
     99a:	98 2f       	mov	r25, r24
     99c:	f9 d7       	rcall	.+4082   	; 0x1990 <__floatsisf>
     99e:	23 e2       	ldi	r18, 0x23	; 35
     9a0:	3b ed       	ldi	r19, 0xDB	; 219
     9a2:	49 ef       	ldi	r20, 0xF9	; 249
     9a4:	5d e3       	ldi	r21, 0x3D	; 61
     9a6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     9aa:	60 93 0f 01 	sts	0x010F, r22
     9ae:	70 93 10 01 	sts	0x0110, r23
     9b2:	80 93 11 01 	sts	0x0111, r24
     9b6:	90 93 12 01 	sts	0x0112, r25
		MAX7219_display7segment(lop,LUBE_OIL_PRESSURE);
     9ba:	bc d7       	rcall	.+3960   	; 0x1934 <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	62 e0       	ldi	r22, 0x02	; 2
     9c2:	a8 cd       	rjmp	.-1200   	; 0x514 <MAX7219_display7segment>
     9c4:	08 95       	ret

000009c6 <process_lot>:
	}
	 
		
}

void process_lot(uint8_t init){
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	f8 2e       	mov	r15, r24
	
	lot_sensor.alarm = 0;
     9d0:	10 92 75 01 	sts	0x0175, r1
	lot_sensor.out_of_range = 0;
     9d4:	10 92 7f 01 	sts	0x017F, r1
	
	lot_rawADC = ADC_read(LUBE_OIL_TEMP_ADC_CHANNEL);
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	15 df       	rcall	.-470    	; 0x806 <ADC_read>
     9dc:	90 93 18 01 	sts	0x0118, r25
     9e0:	80 93 17 01 	sts	0x0117, r24
		if(init)
     9e4:	ff 20       	and	r15, r15
     9e6:	89 f0       	breq	.+34     	; 0xa0a <process_lot+0x44>
		{
			for(uint16_t p=SAMPLE;p>1;p--)
			{
				lot_rawADCarray[p] = lot_rawADC;  //fill the array with initial value
     9e8:	90 93 97 01 	sts	0x0197, r25
     9ec:	80 93 96 01 	sts	0x0196, r24
     9f0:	90 93 95 01 	sts	0x0195, r25
     9f4:	80 93 94 01 	sts	0x0194, r24
     9f8:	90 93 93 01 	sts	0x0193, r25
     9fc:	80 93 92 01 	sts	0x0192, r24
     a00:	90 93 91 01 	sts	0x0191, r25
     a04:	80 93 90 01 	sts	0x0190, r24
     a08:	1b c0       	rjmp	.+54     	; 0xa40 <process_lot+0x7a>
		}
		else
		{
			for(uint16_t p=SAMPLE;p>1;p--)
			{
				lot_rawADCarray[p] = lot_rawADCarray[p-1];
     a0a:	e4 e9       	ldi	r30, 0x94	; 148
     a0c:	f1 e0       	ldi	r31, 0x01	; 1
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	90 93 97 01 	sts	0x0197, r25
     a16:	80 93 96 01 	sts	0x0196, r24
     a1a:	a2 e9       	ldi	r26, 0x92	; 146
     a1c:	b1 e0       	ldi	r27, 0x01	; 1
     a1e:	8d 91       	ld	r24, X+
     a20:	9c 91       	ld	r25, X
     a22:	11 97       	sbiw	r26, 0x01	; 1
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
     a28:	e0 e9       	ldi	r30, 0x90	; 144
     a2a:	f1 e0       	ldi	r31, 0x01	; 1
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	8d 93       	st	X+, r24
     a32:	9c 93       	st	X, r25
     a34:	80 91 8e 01 	lds	r24, 0x018E
     a38:	90 91 8f 01 	lds	r25, 0x018F
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
			}
		}
		
		
		lot_rawADCarray[1] = lot_rawADC;
     a40:	80 91 17 01 	lds	r24, 0x0117
     a44:	90 91 18 01 	lds	r25, 0x0118
     a48:	90 93 8f 01 	sts	0x018F, r25
     a4c:	80 93 8e 01 	sts	0x018E, r24
     a50:	ee e8       	ldi	r30, 0x8E	; 142
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	48 e9       	ldi	r20, 0x98	; 152
     a56:	51 e0       	ldi	r21, 0x01	; 1
		uint16_t lot_rawADCtotal = 0;
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
		for(uint8_t q=1;q<=SAMPLE;q++)
		{
			lot_rawADCtotal += lot_rawADCarray[q];
     a5c:	81 91       	ld	r24, Z+
     a5e:	91 91       	ld	r25, Z+
     a60:	28 0f       	add	r18, r24
     a62:	39 1f       	adc	r19, r25
		}
		
		
		lot_rawADCarray[1] = lot_rawADC;
		uint16_t lot_rawADCtotal = 0;
		for(uint8_t q=1;q<=SAMPLE;q++)
     a64:	e4 17       	cp	r30, r20
     a66:	f5 07       	cpc	r31, r21
     a68:	c9 f7       	brne	.-14     	; 0xa5c <process_lot+0x96>
		{
			lot_rawADCtotal += lot_rawADCarray[q];
		}
		
		lot_rawADC = (lot_rawADCtotal/SAMPLE);
     a6a:	ad ec       	ldi	r26, 0xCD	; 205
     a6c:	bc ec       	ldi	r27, 0xCC	; 204
     a6e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     a72:	bc 01       	movw	r22, r24
     a74:	76 95       	lsr	r23
     a76:	67 95       	ror	r22
     a78:	76 95       	lsr	r23
     a7a:	67 95       	ror	r22
     a7c:	70 93 18 01 	sts	0x0118, r23
     a80:	60 93 17 01 	sts	0x0117, r22
	//if( lot_rawADC >= LOT_ALARM_ADC){
			//
			//lot_sensor.alarm = 1;
	//}
		
	if(!lot_sensor.out_of_range){		
     a84:	80 91 7f 01 	lds	r24, 0x017F
     a88:	81 11       	cpse	r24, r1
     a8a:	4b c0       	rjmp	.+150    	; 0xb22 <process_lot+0x15c>
			
			lot = (float)(lot_rawADC*ADC_REF)/ADC_MAX_VAL;
     a8c:	cb 01       	movw	r24, r22
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	68 0f       	add	r22, r24
     a98:	79 1f       	adc	r23, r25
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	76 d7       	rcall	.+3820   	; 0x198c <__floatunsisf>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e8       	ldi	r20, 0x80	; 128
     aa6:	5a e3       	ldi	r21, 0x3A	; 58
     aa8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
			lot = (lot*PT100_CURRENT_MA)/(PT100_CURRENT*PT100_GAIN);
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	4a e7       	ldi	r20, 0x7A	; 122
     ab2:	54 e4       	ldi	r21, 0x44	; 68
     ab4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	48 ea       	ldi	r20, 0xA8	; 168
     abe:	51 e4       	ldi	r21, 0x41	; 65
     ac0:	d1 d6       	rcall	.+3490   	; 0x1864 <__divsf3>
			lot = (lot-PT100_RES_AT_0_DEGREE)/PT100_ADC_SCALE;
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	48 ec       	ldi	r20, 0xC8	; 200
     ac8:	52 e4       	ldi	r21, 0x42	; 66
     aca:	63 d6       	rcall	.+3270   	; 0x1792 <__subsf3>
     acc:	28 eb       	ldi	r18, 0xB8	; 184
     ace:	3e e1       	ldi	r19, 0x1E	; 30
     ad0:	45 ec       	ldi	r20, 0xC5	; 197
     ad2:	5e e3       	ldi	r21, 0x3E	; 62
     ad4:	c7 d6       	rcall	.+3470   	; 0x1864 <__divsf3>
     ad6:	6b 01       	movw	r12, r22
     ad8:	7c 01       	movw	r14, r24
			
			if(lot <= 0) { lot = 0;}
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	a9 01       	movw	r20, r18
     ae0:	bd d6       	rcall	.+3450   	; 0x185c <__cmpsf2>
     ae2:	18 16       	cp	r1, r24
     ae4:	4c f4       	brge	.+18     	; 0xaf8 <process_lot+0x132>
		
	if(!lot_sensor.out_of_range){		
			
			lot = (float)(lot_rawADC*ADC_REF)/ADC_MAX_VAL;
			lot = (lot*PT100_CURRENT_MA)/(PT100_CURRENT*PT100_GAIN);
			lot = (lot-PT100_RES_AT_0_DEGREE)/PT100_ADC_SCALE;
     ae6:	c0 92 0b 01 	sts	0x010B, r12
     aea:	d0 92 0c 01 	sts	0x010C, r13
     aee:	e0 92 0d 01 	sts	0x010D, r14
     af2:	f0 92 0e 01 	sts	0x010E, r15
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <process_lot+0x142>
			
			if(lot <= 0) { lot = 0;}
     af8:	10 92 0b 01 	sts	0x010B, r1
     afc:	10 92 0c 01 	sts	0x010C, r1
     b00:	10 92 0d 01 	sts	0x010D, r1
     b04:	10 92 0e 01 	sts	0x010E, r1
			MAX7219_display7segment(lot,LUBE_OIL_TEMP);
     b08:	60 91 0b 01 	lds	r22, 0x010B
     b0c:	70 91 0c 01 	lds	r23, 0x010C
     b10:	80 91 0d 01 	lds	r24, 0x010D
     b14:	90 91 0e 01 	lds	r25, 0x010E
     b18:	0d d7       	rcall	.+3610   	; 0x1934 <__fixunssfsi>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	63 e0       	ldi	r22, 0x03	; 3
     b20:	f9 dc       	rcall	.-1550   	; 0x514 <MAX7219_display7segment>
	}
	
}
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	08 95       	ret

00000b2c <process_wt>:

void process_wt(uint8_t init){
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	f8 2e       	mov	r15, r24
	
	wt_sensor.alarm = 0;
     b36:	10 92 33 01 	sts	0x0133, r1
	wt_sensor.out_of_range = 0;
     b3a:	10 92 3d 01 	sts	0x013D, r1
	
	wt_rawADC = ADC_read(WATER_TEMP_ADC_CHANNEL);
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	62 de       	rcall	.-828    	; 0x806 <ADC_read>
     b42:	90 93 16 01 	sts	0x0116, r25
     b46:	80 93 15 01 	sts	0x0115, r24
	
	if(init)
     b4a:	ff 20       	and	r15, r15
     b4c:	89 f0       	breq	.+34     	; 0xb70 <process_wt+0x44>
	{
		for(uint16_t p=SAMPLE;p>1;p--)
		{
			wt_rawADCarray[p] = wt_rawADC;  //fill the array with initial value
     b4e:	90 93 54 01 	sts	0x0154, r25
     b52:	80 93 53 01 	sts	0x0153, r24
     b56:	90 93 52 01 	sts	0x0152, r25
     b5a:	80 93 51 01 	sts	0x0151, r24
     b5e:	90 93 50 01 	sts	0x0150, r25
     b62:	80 93 4f 01 	sts	0x014F, r24
     b66:	90 93 4e 01 	sts	0x014E, r25
     b6a:	80 93 4d 01 	sts	0x014D, r24
     b6e:	1b c0       	rjmp	.+54     	; 0xba6 <process_wt+0x7a>
	}
	else
	{
		for(uint16_t p=SAMPLE;p>1;p--)
		{
			wt_rawADCarray[p] = wt_rawADCarray[p-1];
     b70:	e1 e5       	ldi	r30, 0x51	; 81
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	90 93 54 01 	sts	0x0154, r25
     b7c:	80 93 53 01 	sts	0x0153, r24
     b80:	af e4       	ldi	r26, 0x4F	; 79
     b82:	b1 e0       	ldi	r27, 0x01	; 1
     b84:	8d 91       	ld	r24, X+
     b86:	9c 91       	ld	r25, X
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	80 83       	st	Z, r24
     b8e:	ed e4       	ldi	r30, 0x4D	; 77
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	8d 93       	st	X+, r24
     b98:	9c 93       	st	X, r25
     b9a:	80 91 4b 01 	lds	r24, 0x014B
     b9e:	90 91 4c 01 	lds	r25, 0x014C
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
		}
	}
	
	wt_rawADCarray[1] = wt_rawADC;
     ba6:	80 91 15 01 	lds	r24, 0x0115
     baa:	90 91 16 01 	lds	r25, 0x0116
     bae:	90 93 4c 01 	sts	0x014C, r25
     bb2:	80 93 4b 01 	sts	0x014B, r24
     bb6:	eb e4       	ldi	r30, 0x4B	; 75
     bb8:	f1 e0       	ldi	r31, 0x01	; 1
     bba:	45 e5       	ldi	r20, 0x55	; 85
     bbc:	51 e0       	ldi	r21, 0x01	; 1
	uint16_t wt_rawADCtotal = 0;
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t q=1;q<=SAMPLE;q++)
	{
		wt_rawADCtotal += wt_rawADCarray[q];
     bc2:	81 91       	ld	r24, Z+
     bc4:	91 91       	ld	r25, Z+
     bc6:	28 0f       	add	r18, r24
     bc8:	39 1f       	adc	r19, r25
		}
	}
	
	wt_rawADCarray[1] = wt_rawADC;
	uint16_t wt_rawADCtotal = 0;
	for(uint8_t q=1;q<=SAMPLE;q++)
     bca:	e4 17       	cp	r30, r20
     bcc:	f5 07       	cpc	r31, r21
     bce:	c9 f7       	brne	.-14     	; 0xbc2 <process_wt+0x96>
	{
		wt_rawADCtotal += wt_rawADCarray[q];
	}
	
	wt_rawADC = (wt_rawADCtotal/SAMPLE);
     bd0:	ad ec       	ldi	r26, 0xCD	; 205
     bd2:	bc ec       	ldi	r27, 0xCC	; 204
     bd4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     bd8:	bc 01       	movw	r22, r24
     bda:	76 95       	lsr	r23
     bdc:	67 95       	ror	r22
     bde:	76 95       	lsr	r23
     be0:	67 95       	ror	r22
     be2:	70 93 16 01 	sts	0x0116, r23
     be6:	60 93 15 01 	sts	0x0115, r22
	//if( wt_rawADC >= WT_ALARM_ADC){
			//
			//wt_sensor.alarm = 1;	
	//}
		
	if(!wt_sensor.out_of_range){		
     bea:	80 91 3d 01 	lds	r24, 0x013D
     bee:	81 11       	cpse	r24, r1
     bf0:	49 c0       	rjmp	.+146    	; 0xc84 <process_wt+0x158>
			
			wt = (float)(wt_rawADC*ADC_REF)/ADC_MAX_VAL;
     bf2:	cb 01       	movw	r24, r22
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	68 0f       	add	r22, r24
     bfe:	79 1f       	adc	r23, r25
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	c3 d6       	rcall	.+3462   	; 0x198c <__floatunsisf>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e8       	ldi	r20, 0x80	; 128
     c0c:	5a e3       	ldi	r21, 0x3A	; 58
     c0e:	70 d7       	rcall	.+3808   	; 0x1af0 <__mulsf3>
			wt = (wt*PT100_CURRENT_MA)/(PT100_CURRENT*PT100_GAIN);
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	4a e7       	ldi	r20, 0x7A	; 122
     c16:	54 e4       	ldi	r21, 0x44	; 68
     c18:	6b d7       	rcall	.+3798   	; 0x1af0 <__mulsf3>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	48 ea       	ldi	r20, 0xA8	; 168
     c20:	51 e4       	ldi	r21, 0x41	; 65
     c22:	20 d6       	rcall	.+3136   	; 0x1864 <__divsf3>
			wt = (wt-PT100_RES_AT_0_DEGREE)/PT100_ADC_SCALE;
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	48 ec       	ldi	r20, 0xC8	; 200
     c2a:	52 e4       	ldi	r21, 0x42	; 66
     c2c:	b2 d5       	rcall	.+2916   	; 0x1792 <__subsf3>
     c2e:	28 eb       	ldi	r18, 0xB8	; 184
     c30:	3e e1       	ldi	r19, 0x1E	; 30
     c32:	45 ec       	ldi	r20, 0xC5	; 197
     c34:	5e e3       	ldi	r21, 0x3E	; 62
     c36:	16 d6       	rcall	.+3116   	; 0x1864 <__divsf3>
     c38:	6b 01       	movw	r12, r22
     c3a:	7c 01       	movw	r14, r24
			
			if(wt <= 0){ wt = 0;}
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	a9 01       	movw	r20, r18
     c42:	0c d6       	rcall	.+3096   	; 0x185c <__cmpsf2>
     c44:	18 16       	cp	r1, r24
     c46:	4c f4       	brge	.+18     	; 0xc5a <process_wt+0x12e>
		
	if(!wt_sensor.out_of_range){		
			
			wt = (float)(wt_rawADC*ADC_REF)/ADC_MAX_VAL;
			wt = (wt*PT100_CURRENT_MA)/(PT100_CURRENT*PT100_GAIN);
			wt = (wt-PT100_RES_AT_0_DEGREE)/PT100_ADC_SCALE;
     c48:	c0 92 07 01 	sts	0x0107, r12
     c4c:	d0 92 08 01 	sts	0x0108, r13
     c50:	e0 92 09 01 	sts	0x0109, r14
     c54:	f0 92 0a 01 	sts	0x010A, r15
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <process_wt+0x13e>
			
			if(wt <= 0){ wt = 0;}
     c5a:	10 92 07 01 	sts	0x0107, r1
     c5e:	10 92 08 01 	sts	0x0108, r1
     c62:	10 92 09 01 	sts	0x0109, r1
     c66:	10 92 0a 01 	sts	0x010A, r1
			MAX7219_display7segment(wt,WATER_TEMP);
     c6a:	60 91 07 01 	lds	r22, 0x0107
     c6e:	70 91 08 01 	lds	r23, 0x0108
     c72:	80 91 09 01 	lds	r24, 0x0109
     c76:	90 91 0a 01 	lds	r25, 0x010A
     c7a:	5c d6       	rcall	.+3256   	; 0x1934 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	48 dc       	rcall	.-1904   	; 0x514 <MAX7219_display7segment>
	}
}
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	08 95       	ret

00000c8e <process_bv>:
	
void process_bv(uint8_t init){
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24
	
	bv_sensor.alarm = 0;
     c92:	10 92 9c 01 	sts	0x019C, r1
	bv_sensor.out_of_range = 0;
     c96:	10 92 a6 01 	sts	0x01A6, r1
	bv_rawADC = ADC_read(BATTERY_VGE_ADC_CHANNEL);
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	b4 dd       	rcall	.-1176   	; 0x806 <ADC_read>
     c9e:	90 93 14 01 	sts	0x0114, r25
     ca2:	80 93 13 01 	sts	0x0113, r24
	
	if(init)
     ca6:	cc 23       	and	r28, r28
     ca8:	89 f0       	breq	.+34     	; 0xccc <process_bv+0x3e>
	{
		for(uint16_t p=SAMPLE;p>1;p--)
		{
			bv_rawADCarray[p] = bv_rawADC;  //fill the array with initial value
     caa:	90 93 6f 01 	sts	0x016F, r25
     cae:	80 93 6e 01 	sts	0x016E, r24
     cb2:	90 93 6d 01 	sts	0x016D, r25
     cb6:	80 93 6c 01 	sts	0x016C, r24
     cba:	90 93 6b 01 	sts	0x016B, r25
     cbe:	80 93 6a 01 	sts	0x016A, r24
     cc2:	90 93 69 01 	sts	0x0169, r25
     cc6:	80 93 68 01 	sts	0x0168, r24
     cca:	1b c0       	rjmp	.+54     	; 0xd02 <process_bv+0x74>
	}
	else
	{
		for(uint16_t p=SAMPLE;p>1;p--)
		{
			bv_rawADCarray[p] = bv_rawADCarray[p-1];
     ccc:	ec e6       	ldi	r30, 0x6C	; 108
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	90 93 6f 01 	sts	0x016F, r25
     cd8:	80 93 6e 01 	sts	0x016E, r24
     cdc:	aa e6       	ldi	r26, 0x6A	; 106
     cde:	b1 e0       	ldi	r27, 0x01	; 1
     ce0:	8d 91       	ld	r24, X+
     ce2:	9c 91       	ld	r25, X
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
     cea:	e8 e6       	ldi	r30, 0x68	; 104
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	8d 93       	st	X+, r24
     cf4:	9c 93       	st	X, r25
     cf6:	80 91 66 01 	lds	r24, 0x0166
     cfa:	90 91 67 01 	lds	r25, 0x0167
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	80 83       	st	Z, r24
		}
	}
	bv_rawADCarray[1] = bv_rawADC;
     d02:	80 91 13 01 	lds	r24, 0x0113
     d06:	90 91 14 01 	lds	r25, 0x0114
     d0a:	90 93 67 01 	sts	0x0167, r25
     d0e:	80 93 66 01 	sts	0x0166, r24
     d12:	e6 e6       	ldi	r30, 0x66	; 102
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	40 e7       	ldi	r20, 0x70	; 112
     d18:	51 e0       	ldi	r21, 0x01	; 1
	uint16_t bv_rawADCtotal = 0;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t q=1;q<=SAMPLE;q++)
	{
		bv_rawADCtotal += bv_rawADCarray[q];
     d1e:	81 91       	ld	r24, Z+
     d20:	91 91       	ld	r25, Z+
     d22:	28 0f       	add	r18, r24
     d24:	39 1f       	adc	r19, r25
			bv_rawADCarray[p] = bv_rawADCarray[p-1];
		}
	}
	bv_rawADCarray[1] = bv_rawADC;
	uint16_t bv_rawADCtotal = 0;
	for(uint8_t q=1;q<=SAMPLE;q++)
     d26:	e4 17       	cp	r30, r20
     d28:	f5 07       	cpc	r31, r21
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <process_bv+0x90>
	{
		bv_rawADCtotal += bv_rawADCarray[q];
	}
	
	bv_rawADC = (bv_rawADCtotal/SAMPLE);
     d2c:	ad ec       	ldi	r26, 0xCD	; 205
     d2e:	bc ec       	ldi	r27, 0xCC	; 204
     d30:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__umulhisi3>
     d34:	bc 01       	movw	r22, r24
     d36:	76 95       	lsr	r23
     d38:	67 95       	ror	r22
     d3a:	76 95       	lsr	r23
     d3c:	67 95       	ror	r22
     d3e:	70 93 14 01 	sts	0x0114, r23
     d42:	60 93 13 01 	sts	0x0113, r22
	if( bv_rawADC <= BV_ALARM_ADC){
     d46:	65 36       	cpi	r22, 0x65	; 101
     d48:	71 05       	cpc	r23, r1
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <process_bv+0xc4>

		bv_sensor.alarm = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 9c 01 	sts	0x019C, r24
	}
	
	if(bv_rawADC > BV_SENSOR_FAIL_ADC){
     d52:	65 33       	cpi	r22, 0x35	; 53
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	78 07       	cpc	r23, r24
     d58:	40 f0       	brcs	.+16     	; 0xd6a <process_bv+0xdc>
		bv_sensor.out_of_range = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 a6 01 	sts	0x01A6, r24
		bv_sensor.alarm = 1;
     d60:	80 93 9c 01 	sts	0x019C, r24
		MAX7219_displayError(BV_SENSOR_FAIL);
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	16 dc       	rcall	.-2004   	; 0x594 <MAX7219_displayError>
     d68:	1a c0       	rjmp	.+52     	; 0xd9e <process_bv+0x110>

		//signed int temp_bat =0;
		//temp_bat = bv_rawADC - BV_MAX_ADC;
		//if(temp_bat<= 0) { temp_bat = 0;} 
			
		bv = (float)(BV_MAX_TO_DISPLAY + BV_SLOPE_ADC*bv_rawADC);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e d6       	rcall	.+3100   	; 0x198c <__floatunsisf>
     d70:	26 ef       	ldi	r18, 0xF6	; 246
     d72:	38 e2       	ldi	r19, 0x28	; 40
     d74:	4c e5       	ldi	r20, 0x5C	; 92
     d76:	5e e3       	ldi	r21, 0x3E	; 62
     d78:	bb d6       	rcall	.+3446   	; 0x1af0 <__mulsf3>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4e e1       	ldi	r20, 0x1E	; 30
     d80:	53 e4       	ldi	r21, 0x43	; 67
     d82:	08 d5       	rcall	.+2576   	; 0x1794 <__addsf3>
     d84:	60 93 03 01 	sts	0x0103, r22
     d88:	70 93 04 01 	sts	0x0104, r23
     d8c:	80 93 05 01 	sts	0x0105, r24
     d90:	90 93 06 01 	sts	0x0106, r25
		
		
		MAX7219_display7segment(bv,BATTERY_VGE);
     d94:	cf d5       	rcall	.+2974   	; 0x1934 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	64 e0       	ldi	r22, 0x04	; 4
     d9c:	bb db       	rcall	.-2186   	; 0x514 <MAX7219_display7segment>
	}
}
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <process_fuel_leak>:

void process_fuel_leak(){
	
	if( !(PINA & (1<<FUEL_LEAK_DI24V))){
     da2:	ce 99       	sbic	0x19, 6	; 25
     da4:	04 c0       	rjmp	.+8      	; 0xdae <process_fuel_leak+0xc>
		
		fuel_leak_sensor.alarm = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 a7 01 	sts	0x01A7, r24
     dac:	08 95       	ret
	}
	else
	{
		fuel_leak_sensor.alarm = 0;
     dae:	10 92 a7 01 	sts	0x01A7, r1
     db2:	08 95       	ret

00000db4 <process_charge_fail>:
	
}

void process_charge_fail(){
		
		if(!(PINA & (1<<CHARGE_FAIL_DI24V))){
     db4:	cf 99       	sbic	0x19, 7	; 25
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <process_charge_fail+0xc>
			charge_fail_sensor.alarm = 1;	
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 59 01 	sts	0x0159, r24
     dbe:	08 95       	ret
		}else{
			charge_fail_sensor.alarm = 0;
     dc0:	10 92 59 01 	sts	0x0159, r1
     dc4:	08 95       	ret

00000dc6 <eeprom_init>:
	
}

void eeprom_init(){
	
	for(uint8_t i = 0;i<256;i++){
     dc6:	c0 e0       	ldi	r28, 0x00	; 0
		
		eeprom_update_byte((uint8_t*)i,0); 
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	8c 2f       	mov	r24, r28
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 02 13 	call	0x2604	; 0x2604 <__eeupd_byte_m128a>
	
}

void eeprom_init(){
	
	for(uint8_t i = 0;i<256;i++){
     dd2:	cf 5f       	subi	r28, 0xFF	; 255
     dd4:	f9 cf       	rjmp	.-14     	; 0xdc8 <eeprom_init+0x2>

00000dd6 <process_runtime>:
		
		eeprom_update_byte((uint8_t*)i,0); 
	}
}
void process_runtime() {
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
	
	uint8_t minute_address;
	uint8_t minutes;
	
	if(count_runtime){
     ddc:	80 91 2a 01 	lds	r24, 0x012A
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <process_runtime+0x10>
     de4:	54 c0       	rjmp	.+168    	; 0xe8e <process_runtime+0xb8>
		
		if(counter_routine++ >= EEP_MIN_COUNT){		// 1 min has elapsed
     de6:	80 91 00 01 	lds	r24, 0x0100
     dea:	88 37       	cpi	r24, 0x78	; 120
     dec:	20 f4       	brcc	.+8      	; 0xdf6 <process_runtime+0x20>
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 00 01 	sts	0x0100, r24
     df4:	4c c0       	rjmp	.+152    	; 0xe8e <process_runtime+0xb8>
			
			counter_routine = 0;
     df6:	10 92 00 01 	sts	0x0100, r1
			
			cli();
     dfa:	f8 94       	cli
			minute_address = eeprom_read_byte((uint8_t*)EEP_MIN_ADDRESS);
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__eerd_byte_m128a>
			if(minute_address == 0x00 || minute_address == 0xFF){					// at 1st minute
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	98 0f       	add	r25, r24
     e08:	9e 3f       	cpi	r25, 0xFE	; 254
     e0a:	30 f0       	brcs	.+12     	; 0xe18 <process_runtime+0x42>
				minute_address = EEP_MIN_ADDRESS_OFFSET;
				eeprom_update_byte((uint8_t*)EEP_MIN_ADDRESS,minute_address);
     e0c:	6a e0       	ldi	r22, 0x0A	; 10
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 02 13 	call	0x2604	; 0x2604 <__eeupd_byte_m128a>
			counter_routine = 0;
			
			cli();
			minute_address = eeprom_read_byte((uint8_t*)EEP_MIN_ADDRESS);
			if(minute_address == 0x00 || minute_address == 0xFF){					// at 1st minute
				minute_address = EEP_MIN_ADDRESS_OFFSET;
     e16:	8a e0       	ldi	r24, 0x0A	; 10
				eeprom_update_byte((uint8_t*)EEP_MIN_ADDRESS,minute_address);
			}
			
			minutes = eeprom_read_byte((uint8_t*)minute_address);
     e18:	c8 2f       	mov	r28, r24
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	ce 01       	movw	r24, r28
     e1e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__eerd_byte_m128a>
			
			if(minutes >= MIN_MAX_VAL){  				// 1st time at new address
     e22:	8c 33       	cpi	r24, 0x3C	; 60
     e24:	18 f4       	brcc	.+6      	; 0xe2c <process_runtime+0x56>
				minutes = 0;
			}else{
				minutes++;
     e26:	11 e0       	ldi	r17, 0x01	; 1
     e28:	18 0f       	add	r17, r24
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <process_runtime+0x58>
			}
			
			minutes = eeprom_read_byte((uint8_t*)minute_address);
			
			if(minutes >= MIN_MAX_VAL){  				// 1st time at new address
				minutes = 0;
     e2c:	10 e0       	ldi	r17, 0x00	; 0
			}else{
				minutes++;
			}
			
			eeprom_update_byte((uint8_t*)minute_address,minutes);
     e2e:	61 2f       	mov	r22, r17
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 02 13 	call	0x2604	; 0x2604 <__eeupd_byte_m128a>
			
			sei();
     e36:	78 94       	sei
			if(minutes >= EEP_HOUR_COUNT){			// 1 hour has elapsed
     e38:	1c 33       	cpi	r17, 0x3C	; 60
     e3a:	48 f1       	brcs	.+82     	; 0xe8e <process_runtime+0xb8>
				
				minutes = 0;
				cli();
     e3c:	f8 94       	cli
				
				minute_address = eeprom_read_byte((uint8_t*)EEP_MIN_ADDRESS);
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__eerd_byte_m128a>
				minute_address++;
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	68 0f       	add	r22, r24
				if(minute_address >= EEP_MAX_ADDRESS){
     e4a:	6f 3f       	cpi	r22, 0xFF	; 255
     e4c:	09 f4       	brne	.+2      	; 0xe50 <process_runtime+0x7a>
					minute_address = EEP_MIN_ADDRESS_OFFSET;
     e4e:	6a e0       	ldi	r22, 0x0A	; 10
				}
				
				eeprom_update_byte((uint8_t*)EEP_MIN_ADDRESS,minute_address);
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 02 13 	call	0x2604	; 0x2604 <__eeupd_byte_m128a>
				
				run_time = eeprom_read_word((uint16_t*)EEP_HOUR_ADDRESS);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__eerd_word_m128a>
				if(run_time >= RUNTIME_MAX_VAL){         // Either 1st hour of engine or greater than 9999
     e60:	8f 30       	cpi	r24, 0x0F	; 15
     e62:	27 e2       	ldi	r18, 0x27	; 39
     e64:	92 07       	cpc	r25, r18
     e66:	28 f0       	brcs	.+10     	; 0xe72 <process_runtime+0x9c>
					run_time = 0;
     e68:	10 92 1c 01 	sts	0x011C, r1
     e6c:	10 92 1b 01 	sts	0x011B, r1
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <process_runtime+0xa6>
				}else{
					run_time++;
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	90 93 1c 01 	sts	0x011C, r25
     e78:	80 93 1b 01 	sts	0x011B, r24
				}
				
				eeprom_update_word((uint16_t*)EEP_HOUR_ADDRESS,run_time);
     e7c:	60 91 1b 01 	lds	r22, 0x011B
     e80:	70 91 1c 01 	lds	r23, 0x011C
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 13 13 	call	0x2626	; 0x2626 <__eeupd_word_m128a>
				

				
				sei();
     e8c:	78 94       	sei
			
		}
		
	}
	
	run_time = eeprom_read_word((uint16_t*)EEP_HOUR_ADDRESS);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__eerd_word_m128a>
     e96:	90 93 1c 01 	sts	0x011C, r25
     e9a:	80 93 1b 01 	sts	0x011B, r24
	if(run_time >= RUNTIME_MAX_VAL){         // Either 1st hour of engine or greater than 9999
     e9e:	8f 30       	cpi	r24, 0x0F	; 15
     ea0:	27 e2       	ldi	r18, 0x27	; 39
     ea2:	92 07       	cpc	r25, r18
     ea4:	28 f0       	brcs	.+10     	; 0xeb0 <process_runtime+0xda>
		run_time = 0;
     ea6:	10 92 1c 01 	sts	0x011C, r1
     eaa:	10 92 1b 01 	sts	0x011B, r1
		eeprom_init();
     eae:	8b df       	rcall	.-234    	; 0xdc6 <eeprom_init>
	}
	MAX7219_display7segment(run_time,RUN_TIME);
     eb0:	65 e0       	ldi	r22, 0x05	; 5
     eb2:	30 db       	rcall	.-2464   	; 0x514 <MAX7219_display7segment>
	
	
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	08 95       	ret

00000ebc <main>:
int main(void){
	
				
			uint8_t sensor_delay_counter=0;
			
			DDRA |= (1<<DEBUG_LED1)|(1<<DEBUG_LED2);
     ebc:	8a b3       	in	r24, 0x1a	; 26
     ebe:	8c 60       	ori	r24, 0x0C	; 12
     ec0:	8a bb       	out	0x1a, r24	; 26
			DEBUG_PORT |= (1<<DEBUG_LED1);
     ec2:	da 9a       	sbi	0x1b, 2	; 27
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	8f e7       	ldi	r24, 0x7F	; 127
     ec8:	96 e1       	ldi	r25, 0x16	; 22
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <main+0xe>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x18>
     ed4:	00 00       	nop
			_delay_ms(500);
			DEBUG_PORT &= ~(1<<DEBUG_LED1);
     ed6:	da 98       	cbi	0x1b, 2	; 27
     ed8:	ef ef       	ldi	r30, 0xFF	; 255
     eda:	ff e7       	ldi	r31, 0x7F	; 127
     edc:	26 e1       	ldi	r18, 0x16	; 22
     ede:	e1 50       	subi	r30, 0x01	; 1
     ee0:	f0 40       	sbci	r31, 0x00	; 0
     ee2:	20 40       	sbci	r18, 0x00	; 0
     ee4:	e1 f7       	brne	.-8      	; 0xede <main+0x22>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <main+0x2c>
     ee8:	00 00       	nop
			_delay_ms(500);

			DDRA |= ((1<<START_OUTPUT)|(1<<STOP_OUTPUT)|(1<<SPARE_OUTPUT));
     eea:	8a b3       	in	r24, 0x1a	; 26
     eec:	83 61       	ori	r24, 0x13	; 19
     eee:	8a bb       	out	0x1a, r24	; 26
			DDRG |= (1<<BUZZER_OUTPUT);
     ef0:	e4 e6       	ldi	r30, 0x64	; 100
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 61       	ori	r24, 0x10	; 16
     ef8:	80 83       	st	Z, r24
			DDRD |= (1<<LOCKOUT_RELAY_OUTPUT);
     efa:	8f 9a       	sbi	0x11, 7	; 17

			DDRA &= ~((1<<FUEL_LEAK_DI24V)|(1<<CHARGE_FAIL_DI24V)); // digital inputs
     efc:	8a b3       	in	r24, 0x1a	; 26
     efe:	8f 73       	andi	r24, 0x3F	; 63
     f00:	8a bb       	out	0x1a, r24	; 26
			DDRD &= ~((1<<START_INPUT)|(1<<STOP_INPUT));
     f02:	81 b3       	in	r24, 0x11	; 17
     f04:	8c 7f       	andi	r24, 0xFC	; 252
     f06:	81 bb       	out	0x11, r24	; 17
			DDRE &= ~(1<<READY_TO_START_INPUT);
     f08:	14 98       	cbi	0x02, 4	; 2

			spi_init();
     f0a:	5b d9       	rcall	.-3402   	; 0x1c2 <spi_init>
			MAX7219_displayInit();
     f0c:	c1 da       	rcall	.-2686   	; 0x490 <MAX7219_displayInit>
			ADC_init();
     f0e:	75 dc       	rcall	.-1814   	; 0x7fa <ADC_init>
			rpm_timer_init();
     f10:	e4 db       	rcall	.-2104   	; 0x6da <rpm_timer_init>
			system_timer_init();
     f12:	d0 db       	rcall	.-2144   	; 0x6b4 <system_timer_init>
			

			test_display_main();
     f14:	82 dc       	rcall	.-1788   	; 0x81a <test_display_main>
			
			rpm_timer_enable();
     f16:	e4 db       	rcall	.-2104   	; 0x6e0 <rpm_timer_enable>
			system_timer_enable();
     f18:	d3 db       	rcall	.-2138   	; 0x6c0 <system_timer_enable>


			sei();
     f1a:	78 94       	sei
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	9f e7       	ldi	r25, 0x7F	; 127
     f20:	e6 e1       	ldi	r30, 0x16	; 22
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	90 40       	sbci	r25, 0x00	; 0
     f26:	e0 40       	sbci	r30, 0x00	; 0
     f28:	e1 f7       	brne	.-8      	; 0xf22 <main+0x66>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <main+0x70>
     f2c:	00 00       	nop
			_delay_ms(500);
			
			process_lop();
     f2e:	f1 dc       	rcall	.-1566   	; 0x912 <process_lop>
			process_lot(1);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	49 dd       	rcall	.-1390   	; 0x9c6 <process_lot>
			process_wt(1);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	fa dd       	rcall	.-1036   	; 0xb2c <process_wt>
			process_rpm();
     f38:	a2 dc       	rcall	.-1724   	; 0x87e <process_rpm>
			process_bv(1);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	a8 de       	rcall	.-688    	; 0xc8e <process_bv>
			process_fuel_leak();
     f3e:	31 df       	rcall	.-414    	; 0xda2 <process_fuel_leak>
			process_charge_fail();
     f40:	39 df       	rcall	.-398    	; 0xdb4 <process_charge_fail>
			process_runtime();
     f42:	49 df       	rcall	.-366    	; 0xdd6 <process_runtime>


int main(void){
	
				
			uint8_t sensor_delay_counter=0;
     f44:	21 2c       	mov	r2, r1
							STOP = 1;
						}else{
							STOP = 0;
						}
						
						if(SW_LOCAL_IN&(1<<SW_LOCAL_MUTE)){ //local mute button pressed
     f46:	0f 2e       	mov	r0, r31
     f48:	f3 e6       	ldi	r31, 0x63	; 99
     f4a:	af 2e       	mov	r10, r31
     f4c:	b1 2c       	mov	r11, r1
     f4e:	f0 2d       	mov	r31, r0
							RESET = 0;
						}
				
						
				
						if (rpm < RPM_LOCKOUT_ENABLE){rpm100 = 1;}else{rpm100 = 0;}
     f50:	33 24       	eor	r3, r3
     f52:	33 94       	inc	r3
						if (rpm > RPM_LOCKOUT_DISABLE){rpm500 = 1;}else{rpm500 = 0;}
				
						if(lop_sensor_enable_delay){	
							if(rpm500 || !lop_sensor.trip) {
								lop_sensor.enable = 1;
     f54:	07 e4       	ldi	r16, 0x47	; 71
     f56:	11 e0       	ldi	r17, 0x01	; 1
				
						if (rpm < RPM_LOCKOUT_ENABLE){rpm100 = 1;}else{rpm100 = 0;}
						if (rpm > RPM_LOCKOUT_DISABLE){rpm500 = 1;}else{rpm500 = 0;}
				
						if(lop_sensor_enable_delay){	
							if(rpm500 || !lop_sensor.trip) {
     f58:	0f 2e       	mov	r0, r31
     f5a:	f1 e4       	ldi	r31, 0x41	; 65
     f5c:	8f 2e       	mov	r8, r31
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	9f 2e       	mov	r9, r31
     f62:	f0 2d       	mov	r31, r0
							lop_sensor.enable = 0;
						}
				
			
	
					lop_sensor.alarmC1 = (lop_sensor.alarm && lop_sensor.enable) || (lop_sensor.alarmC1 &&  !RESET);	
     f64:	0f 2e       	mov	r0, r31
     f66:	ff e3       	ldi	r31, 0x3F	; 63
     f68:	ef 2e       	mov	r14, r31
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	ff 2e       	mov	r15, r31
     f6e:	f0 2d       	mov	r31, r0
					
					if((lop_sensor.alarmC1) || (lop_sensor.tripC1)){
     f70:	c2 e4       	ldi	r28, 0x42	; 66
     f72:	d1 e0       	ldi	r29, 0x01	; 1
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}else{ 
						LED_state &= ~(LOP_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					lop_sensor.alarmC2 = (lop_sensor.alarmC1) && (MUTE || (lop_sensor.alarmC2));
     f74:	0f 2e       	mov	r0, r31
     f76:	f0 e4       	ldi	r31, 0x40	; 64
     f78:	4f 2e       	mov	r4, r31
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	5f 2e       	mov	r5, r31
     f7e:	f0 2d       	mov	r31, r0
					lop_sensor.buzzer1 = (lop_sensor.alarmC1) && !(lop_sensor.alarmC2);
     f80:	0f 2e       	mov	r0, r31
     f82:	f5 e4       	ldi	r31, 0x45	; 69
     f84:	cf 2e       	mov	r12, r31
     f86:	f1 e0       	ldi	r31, 0x01	; 1
     f88:	df 2e       	mov	r13, r31
     f8a:	f0 2d       	mov	r31, r0
			
					lop_sensor.tripC1 = (lop_sensor.trip && (lop_sensor.enable||lop_sensor.out_of_range)) || (lop_sensor.tripC1 && !RESET);
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
					lop_sensor.buzzer2 = ((lop_sensor.tripC1) && !(lop_sensor.tripC2));
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f6 e4       	ldi	r31, 0x46	; 70
     f90:	6f 2e       	mov	r6, r31
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	7f 2e       	mov	r7, r31
     f96:	f0 2d       	mov	r31, r0
			process_charge_fail();
			process_runtime();

		while(1){
			
					if(update_status){ // update sensor readings, enabled thorough ISR, 500 ms system timer
     f98:	80 91 32 01 	lds	r24, 0x0132
     f9c:	88 23       	and	r24, r24
     f9e:	b9 f0       	breq	.+46     	; 0xfce <main+0x112>
				
						update_status = 0;
     fa0:	10 92 32 01 	sts	0x0132, r1
				
						process_lop();
     fa4:	b6 dc       	rcall	.-1684   	; 0x912 <process_lop>
						process_rpm();
     fa6:	6b dc       	rcall	.-1834   	; 0x87e <process_rpm>
						process_runtime();
     fa8:	16 df       	rcall	.-468    	; 0xdd6 <process_runtime>
						process_charge_fail();
     faa:	04 df       	rcall	.-504    	; 0xdb4 <process_charge_fail>
						process_fuel_leak();
     fac:	fa de       	rcall	.-524    	; 0xda2 <process_fuel_leak>
						
						if(sensor_delay_counter >= SENSOR_DELAY)
     fae:	f5 e0       	ldi	r31, 0x05	; 5
     fb0:	f2 15       	cp	r31, r2
     fb2:	40 f4       	brcc	.+16     	; 0xfc4 <main+0x108>
						{
							process_lot(0);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	07 dd       	rcall	.-1522   	; 0x9c6 <process_lot>
							process_wt(0);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	b8 dd       	rcall	.-1168   	; 0xb2c <process_wt>
							process_bv(0);
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	67 de       	rcall	.-818    	; 0xc8e <process_bv>
							
							sensor_delay_counter = 0;
     fc0:	21 2c       	mov	r2, r1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <main+0x10a>
						}
						else
						{
							sensor_delay_counter++;
     fc4:	23 94       	inc	r2
						}
						DEBUG_PORT ^= (1<<DEBUG_LED1);
     fc6:	9b b3       	in	r25, 0x1b	; 27
     fc8:	84 e0       	ldi	r24, 0x04	; 4
     fca:	89 27       	eor	r24, r25
     fcc:	8b bb       	out	0x1b, r24	; 27
					}
			
			
				
						if(!(PIND &(1<<START_INPUT))){ 
     fce:	80 99       	sbic	0x10, 0	; 16
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <main+0x11e>
							START = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 26 01 	sts	0x0126, r24
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <main+0x122>
						}else{
							START = 0;
     fda:	10 92 26 01 	sts	0x0126, r1
						}
				
						if(PINE &(1<<READY_TO_START_INPUT)){
     fde:	0c 9b       	sbis	0x01, 4	; 1
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <main+0x12e>
							STOP = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 25 01 	sts	0x0125, r24
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <main+0x132>
						}else{
							STOP = 0;
     fea:	10 92 25 01 	sts	0x0125, r1
						}
						
						if(SW_LOCAL_IN&(1<<SW_LOCAL_MUTE)){ //local mute button pressed
     fee:	f5 01       	movw	r30, r10
     ff0:	80 81       	ld	r24, Z
     ff2:	83 ff       	sbrs	r24, 3
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <main+0x142>
							MUTE = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 24 01 	sts	0x0124, r24
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <main+0x146>
						}else{
					
							MUTE = 0;
     ffe:	10 92 24 01 	sts	0x0124, r1
						}
				
						if(SW_LOCAL_IN&(1<<SW_LOCAL_RESET)){ //local mute button pressed
    1002:	f5 01       	movw	r30, r10
    1004:	80 81       	ld	r24, Z
    1006:	82 ff       	sbrs	r24, 2
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <main+0x156>
							RESET = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 23 01 	sts	0x0123, r24
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <main+0x15a>
						}else{
					
							RESET = 0;
    1012:	10 92 23 01 	sts	0x0123, r1
						}
				
						
				
						if (rpm < RPM_LOCKOUT_ENABLE){rpm100 = 1;}else{rpm100 = 0;}
    1016:	80 91 1d 01 	lds	r24, 0x011D
    101a:	90 91 1e 01 	lds	r25, 0x011E
    101e:	84 36       	cpi	r24, 0x64	; 100
    1020:	91 05       	cpc	r25, r1
    1022:	28 f4       	brcc	.+10     	; 0x102e <main+0x172>
    1024:	30 92 21 01 	sts	0x0121, r3
    1028:	10 92 22 01 	sts	0x0122, r1
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <main+0x17a>
    102e:	10 92 22 01 	sts	0x0122, r1
    1032:	10 92 21 01 	sts	0x0121, r1
						if (rpm > RPM_LOCKOUT_DISABLE){rpm500 = 1;}else{rpm500 = 0;}
    1036:	80 91 1d 01 	lds	r24, 0x011D
    103a:	90 91 1e 01 	lds	r25, 0x011E
    103e:	85 3f       	cpi	r24, 0xF5	; 245
    1040:	91 40       	sbci	r25, 0x01	; 1
    1042:	28 f0       	brcs	.+10     	; 0x104e <main+0x192>
    1044:	30 92 1f 01 	sts	0x011F, r3
    1048:	10 92 20 01 	sts	0x0120, r1
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <main+0x19a>
    104e:	10 92 20 01 	sts	0x0120, r1
    1052:	10 92 1f 01 	sts	0x011F, r1
				
						if(lop_sensor_enable_delay){	
    1056:	80 91 31 01 	lds	r24, 0x0131
    105a:	88 23       	and	r24, r24
    105c:	69 f0       	breq	.+26     	; 0x1078 <main+0x1bc>
							if(rpm500 || !lop_sensor.trip) {
    105e:	80 91 1f 01 	lds	r24, 0x011F
    1062:	90 91 20 01 	lds	r25, 0x0120
    1066:	89 2b       	or	r24, r25
    1068:	21 f4       	brne	.+8      	; 0x1072 <main+0x1b6>
    106a:	f4 01       	movw	r30, r8
    106c:	80 81       	ld	r24, Z
    106e:	81 11       	cpse	r24, r1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <main+0x1bc>
								lop_sensor.enable = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	f8 01       	movw	r30, r16
    1076:	80 83       	st	Z, r24
							}
						}
						if(stop_timer_bit){
    1078:	80 91 2c 01 	lds	r24, 0x012C
    107c:	88 23       	and	r24, r24
    107e:	11 f0       	breq	.+4      	; 0x1084 <main+0x1c8>
							lop_sensor.enable = 0;
    1080:	f8 01       	movw	r30, r16
    1082:	10 82       	st	Z, r1
						}
				
			
	
					lop_sensor.alarmC1 = (lop_sensor.alarm && lop_sensor.enable) || (lop_sensor.alarmC1 &&  !RESET);	
    1084:	ee e3       	ldi	r30, 0x3E	; 62
    1086:	f1 e0       	ldi	r31, 0x01	; 1
    1088:	80 81       	ld	r24, Z
    108a:	88 23       	and	r24, r24
    108c:	21 f0       	breq	.+8      	; 0x1096 <main+0x1da>
    108e:	f8 01       	movw	r30, r16
    1090:	80 81       	ld	r24, Z
    1092:	81 11       	cpse	r24, r1
    1094:	52 c2       	rjmp	.+1188   	; 0x153a <__stack+0x43b>
    1096:	f7 01       	movw	r30, r14
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	09 f4       	brne	.+2      	; 0x10a0 <main+0x1e4>
    109e:	47 c2       	rjmp	.+1166   	; 0x152e <__stack+0x42f>
    10a0:	80 91 23 01 	lds	r24, 0x0123
    10a4:	88 23       	and	r24, r24
    10a6:	09 f4       	brne	.+2      	; 0x10aa <main+0x1ee>
    10a8:	48 c2       	rjmp	.+1168   	; 0x153a <__stack+0x43b>
    10aa:	41 c2       	rjmp	.+1154   	; 0x152e <__stack+0x42f>
					
					if((lop_sensor.alarmC1) || (lop_sensor.tripC1)){
						LED_state |= LOP_LOW_LED;
    10ac:	80 91 01 01 	lds	r24, 0x0101
    10b0:	90 91 02 01 	lds	r25, 0x0102
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	90 93 02 01 	sts	0x0102, r25
    10ba:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	55 da       	rcall	.-2902   	; 0x56c <MAX7219_displayLED>
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <main+0x21e>
					}else{ 
						LED_state &= ~(LOP_LOW_LED);
    10c4:	80 91 01 01 	lds	r24, 0x0101
    10c8:	90 91 02 01 	lds	r25, 0x0102
    10cc:	8f 7b       	andi	r24, 0xBF	; 191
    10ce:	90 93 02 01 	sts	0x0102, r25
    10d2:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	49 da       	rcall	.-2926   	; 0x56c <MAX7219_displayLED>
					}
					lop_sensor.alarmC2 = (lop_sensor.alarmC1) && (MUTE || (lop_sensor.alarmC2));
    10da:	f7 01       	movw	r30, r14
    10dc:	80 81       	ld	r24, Z
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <main+0x228>
    10e2:	16 c3       	rjmp	.+1580   	; 0x1710 <__stack+0x611>
    10e4:	80 91 24 01 	lds	r24, 0x0124
    10e8:	81 11       	cpse	r24, r1
    10ea:	2b c2       	rjmp	.+1110   	; 0x1542 <__stack+0x443>
    10ec:	f2 01       	movw	r30, r4
    10ee:	80 81       	ld	r24, Z
    10f0:	81 11       	cpse	r24, r1
    10f2:	27 c2       	rjmp	.+1102   	; 0x1542 <__stack+0x443>
    10f4:	10 c3       	rjmp	.+1568   	; 0x1716 <__stack+0x617>
					lop_sensor.buzzer1 = (lop_sensor.alarmC1) && !(lop_sensor.alarmC2);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	f6 01       	movw	r30, r12
    10fa:	80 83       	st	Z, r24
			
					lop_sensor.tripC1 = (lop_sensor.trip && (lop_sensor.enable||lop_sensor.out_of_range)) || (lop_sensor.tripC1 && !RESET);
    10fc:	f4 01       	movw	r30, r8
    10fe:	80 81       	ld	r24, Z
    1100:	88 23       	and	r24, r24
    1102:	49 f0       	breq	.+18     	; 0x1116 <__stack+0x17>
    1104:	f8 01       	movw	r30, r16
    1106:	80 81       	ld	r24, Z
    1108:	81 11       	cpse	r24, r1
    110a:	1f c2       	rjmp	.+1086   	; 0x154a <__stack+0x44b>
    110c:	e8 e4       	ldi	r30, 0x48	; 72
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	80 81       	ld	r24, Z
    1112:	81 11       	cpse	r24, r1
    1114:	1a c2       	rjmp	.+1076   	; 0x154a <__stack+0x44b>
    1116:	88 81       	ld	r24, Y
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <__stack+0x1f>
    111c:	1d c2       	rjmp	.+1082   	; 0x1558 <__stack+0x459>
    111e:	80 91 23 01 	lds	r24, 0x0123
    1122:	88 23       	and	r24, r24
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x29>
    1126:	11 c2       	rjmp	.+1058   	; 0x154a <__stack+0x44b>
    1128:	17 c2       	rjmp	.+1070   	; 0x1558 <__stack+0x459>
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
    112a:	e3 e4       	ldi	r30, 0x43	; 67
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	80 81       	ld	r24, Z
    1130:	81 11       	cpse	r24, r1
    1132:	17 c2       	rjmp	.+1070   	; 0x1562 <__stack+0x463>
    1134:	f4 c2       	rjmp	.+1512   	; 0x171e <__stack+0x61f>
					lop_sensor.buzzer2 = ((lop_sensor.tripC1) && !(lop_sensor.tripC2));
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	f3 01       	movw	r30, r6
    113a:	80 83       	st	Z, r24
			

					wt_sensor.alarmC1 = (wt_sensor.alarm) || (wt_sensor.alarmC1 && !RESET);
    113c:	e3 e3       	ldi	r30, 0x33	; 51
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	80 81       	ld	r24, Z
    1142:	81 11       	cpse	r24, r1
    1144:	13 c2       	rjmp	.+1062   	; 0x156c <__stack+0x46d>
    1146:	80 91 34 01 	lds	r24, 0x0134
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <__stack+0x51>
    114e:	1e c2       	rjmp	.+1084   	; 0x158c <__stack+0x48d>
    1150:	80 91 23 01 	lds	r24, 0x0123
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <__stack+0x5b>
    1158:	09 c2       	rjmp	.+1042   	; 0x156c <__stack+0x46d>
    115a:	18 c2       	rjmp	.+1072   	; 0x158c <__stack+0x48d>
					}else{
						LED_state &= ~(WATER_TEMP_HIGH_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
					}
					wt_sensor.alarmC2 = wt_sensor.alarmC1 && (MUTE || wt_sensor.alarmC2);
    115c:	80 91 34 01 	lds	r24, 0x0134
    1160:	88 23       	and	r24, r24
    1162:	09 f4       	brne	.+2      	; 0x1166 <__stack+0x67>
    1164:	e1 c2       	rjmp	.+1474   	; 0x1728 <__stack+0x629>
    1166:	80 91 24 01 	lds	r24, 0x0124
    116a:	81 11       	cpse	r24, r1
    116c:	1e c2       	rjmp	.+1084   	; 0x15aa <__stack+0x4ab>
    116e:	80 91 35 01 	lds	r24, 0x0135
    1172:	81 11       	cpse	r24, r1
    1174:	1a c2       	rjmp	.+1076   	; 0x15aa <__stack+0x4ab>
    1176:	db c2       	rjmp	.+1462   	; 0x172e <__stack+0x62f>
					wt_sensor.buzzer = wt_sensor.alarmC1 && !wt_sensor.alarmC2;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	80 93 39 01 	sts	0x0139, r24
			
			

					lot_sensor.alarmC1 = (lot_sensor.alarm) || (lot_sensor.alarmC1 && !RESET);
    117e:	80 91 75 01 	lds	r24, 0x0175
    1182:	81 11       	cpse	r24, r1
    1184:	16 c2       	rjmp	.+1068   	; 0x15b2 <__stack+0x4b3>
    1186:	80 91 76 01 	lds	r24, 0x0176
    118a:	88 23       	and	r24, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <__stack+0x91>
    118e:	21 c2       	rjmp	.+1090   	; 0x15d2 <__stack+0x4d3>
    1190:	80 91 23 01 	lds	r24, 0x0123
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <__stack+0x9b>
    1198:	0c c2       	rjmp	.+1048   	; 0x15b2 <__stack+0x4b3>
    119a:	1b c2       	rjmp	.+1078   	; 0x15d2 <__stack+0x4d3>
						LED_state &= ~(LOT_HIGH_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
					}
			
					lot_sensor.alarmC2 = lot_sensor.alarmC1 && (MUTE || lot_sensor.alarmC2);
    119c:	80 91 76 01 	lds	r24, 0x0176
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	c8 c2       	rjmp	.+1424   	; 0x1736 <__stack+0x637>
    11a6:	80 91 24 01 	lds	r24, 0x0124
    11aa:	81 11       	cpse	r24, r1
    11ac:	21 c2       	rjmp	.+1090   	; 0x15f0 <__stack+0x4f1>
    11ae:	80 91 77 01 	lds	r24, 0x0177
    11b2:	81 11       	cpse	r24, r1
    11b4:	1d c2       	rjmp	.+1082   	; 0x15f0 <__stack+0x4f1>
    11b6:	c2 c2       	rjmp	.+1412   	; 0x173c <__stack+0x63d>
					lot_sensor.buzzer = lot_sensor.alarmC1 && !lot_sensor.alarmC2;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	80 93 7b 01 	sts	0x017B, r24
			
			

					bv_sensor.alarmC1 = (bv_sensor.alarm) || (bv_sensor.alarmC1 && !RESET);
    11be:	80 91 9c 01 	lds	r24, 0x019C
    11c2:	81 11       	cpse	r24, r1
    11c4:	19 c2       	rjmp	.+1074   	; 0x15f8 <__stack+0x4f9>
    11c6:	80 91 9d 01 	lds	r24, 0x019D
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <__stack+0xd1>
    11ce:	24 c2       	rjmp	.+1096   	; 0x1618 <__stack+0x519>
    11d0:	80 91 23 01 	lds	r24, 0x0123
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <__stack+0xdb>
    11d8:	0f c2       	rjmp	.+1054   	; 0x15f8 <__stack+0x4f9>
    11da:	1e c2       	rjmp	.+1084   	; 0x1618 <__stack+0x519>
						}else{
						
						LED_state &= ~(BAT_VGE_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					bv_sensor.alarmC2 = bv_sensor.alarmC1 && (MUTE || bv_sensor.alarmC2);
    11dc:	80 91 9d 01 	lds	r24, 0x019D
    11e0:	88 23       	and	r24, r24
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <__stack+0xe7>
    11e4:	af c2       	rjmp	.+1374   	; 0x1744 <__stack+0x645>
    11e6:	80 91 24 01 	lds	r24, 0x0124
    11ea:	81 11       	cpse	r24, r1
    11ec:	24 c2       	rjmp	.+1096   	; 0x1636 <__stack+0x537>
    11ee:	80 91 9e 01 	lds	r24, 0x019E
    11f2:	81 11       	cpse	r24, r1
    11f4:	20 c2       	rjmp	.+1088   	; 0x1636 <__stack+0x537>
    11f6:	a9 c2       	rjmp	.+1362   	; 0x174a <__stack+0x64b>
					bv_sensor.buzzer = bv_sensor.alarmC1 && !bv_sensor.alarmC2;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	80 93 a2 01 	sts	0x01A2, r24
			
			
			
			
					fuel_leak_sensor.alarmC1 = (fuel_leak_sensor.alarm) || (fuel_leak_sensor.alarmC1 && !RESET);
    11fe:	80 91 a7 01 	lds	r24, 0x01A7
    1202:	81 11       	cpse	r24, r1
    1204:	1c c2       	rjmp	.+1080   	; 0x163e <__stack+0x53f>
    1206:	80 91 a8 01 	lds	r24, 0x01A8
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <__stack+0x111>
    120e:	27 c2       	rjmp	.+1102   	; 0x165e <__stack+0x55f>
    1210:	80 91 23 01 	lds	r24, 0x0123
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <__stack+0x11b>
    1218:	12 c2       	rjmp	.+1060   	; 0x163e <__stack+0x53f>
    121a:	21 c2       	rjmp	.+1090   	; 0x165e <__stack+0x55f>
						}else{
						LED_state &= ~(FUEL_LEAK_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
						
					}
					fuel_leak_sensor.alarmC2 = fuel_leak_sensor.alarmC1	&& (MUTE || fuel_leak_sensor.alarmC2);
    121c:	80 91 a8 01 	lds	r24, 0x01A8
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <__stack+0x127>
    1224:	96 c2       	rjmp	.+1324   	; 0x1752 <__stack+0x653>
    1226:	80 91 24 01 	lds	r24, 0x0124
    122a:	81 11       	cpse	r24, r1
    122c:	27 c2       	rjmp	.+1102   	; 0x167c <__stack+0x57d>
    122e:	80 91 a9 01 	lds	r24, 0x01A9
    1232:	81 11       	cpse	r24, r1
    1234:	23 c2       	rjmp	.+1094   	; 0x167c <__stack+0x57d>
    1236:	90 c2       	rjmp	.+1312   	; 0x1758 <__stack+0x659>
					fuel_leak_sensor.buzzer = fuel_leak_sensor.alarmC1 && !(fuel_leak_sensor.alarmC2);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	80 93 ad 01 	sts	0x01AD, r24
			
			
			
					charge_fail_sensor.alarmC1 = (charge_fail_sensor.alarm) || (charge_fail_sensor.alarmC1 && !RESET);
    123e:	80 91 59 01 	lds	r24, 0x0159
    1242:	81 11       	cpse	r24, r1
    1244:	1f c2       	rjmp	.+1086   	; 0x1684 <__stack+0x585>
    1246:	80 91 5a 01 	lds	r24, 0x015A
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <__stack+0x151>
    124e:	2a c2       	rjmp	.+1108   	; 0x16a4 <__stack+0x5a5>
    1250:	80 91 23 01 	lds	r24, 0x0123
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <__stack+0x15b>
    1258:	15 c2       	rjmp	.+1066   	; 0x1684 <__stack+0x585>
    125a:	24 c2       	rjmp	.+1096   	; 0x16a4 <__stack+0x5a5>
					}else{
					
						LED_state &= ~(CHARGE_FAIL_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
					}
					charge_fail_sensor.alarmC2 = charge_fail_sensor.alarmC1	&& (MUTE || charge_fail_sensor.alarmC2);
    125c:	80 91 5a 01 	lds	r24, 0x015A
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <__stack+0x167>
    1264:	87 c2       	rjmp	.+1294   	; 0x1774 <__stack+0x675>
    1266:	80 91 24 01 	lds	r24, 0x0124
    126a:	81 11       	cpse	r24, r1
    126c:	2a c2       	rjmp	.+1108   	; 0x16c2 <__stack+0x5c3>
    126e:	80 91 5b 01 	lds	r24, 0x015B
    1272:	81 11       	cpse	r24, r1
    1274:	26 c2       	rjmp	.+1100   	; 0x16c2 <__stack+0x5c3>
    1276:	74 c2       	rjmp	.+1256   	; 0x1760 <__stack+0x661>
					charge_fail_sensor.buzzer = charge_fail_sensor.alarmC1 && !(charge_fail_sensor.alarmC2) && (rpm500);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	01 c0       	rjmp	.+2      	; 0x127e <__stack+0x17f>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 5f 01 	sts	0x015F, r24
			
			
			
					rpm_sensor.enable = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 89 01 	sts	0x0189, r24
					rpm_sensor.alarmC1 = (rpm_sensor.alarm) || (rpm_sensor.alarmC1 && !RESET);
    1288:	80 91 80 01 	lds	r24, 0x0180
    128c:	81 11       	cpse	r24, r1
    128e:	25 c2       	rjmp	.+1098   	; 0x16da <__stack+0x5db>
    1290:	80 91 81 01 	lds	r24, 0x0181
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <__stack+0x19b>
    1298:	18 c2       	rjmp	.+1072   	; 0x16ca <__stack+0x5cb>
    129a:	80 91 23 01 	lds	r24, 0x0123
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__stack+0x1a5>
    12a2:	1b c2       	rjmp	.+1078   	; 0x16da <__stack+0x5db>
    12a4:	12 c2       	rjmp	.+1060   	; 0x16ca <__stack+0x5cb>
					
					if(rpm_sensor.tripC1 || rpm_sensor.alarmC1){
				
						LED_state |= (OVERSPEED_LED);
    12a6:	80 91 01 01 	lds	r24, 0x0101
    12aa:	90 91 02 01 	lds	r25, 0x0102
    12ae:	80 68       	ori	r24, 0x80	; 128
    12b0:	90 93 02 01 	sts	0x0102, r25
    12b4:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	58 d9       	rcall	.-3408   	; 0x56c <MAX7219_displayLED>
    12bc:	0b c0       	rjmp	.+22     	; 0x12d4 <__stack+0x1d5>
					}else{
						LED_state &= ~(OVERSPEED_LED);
    12be:	80 91 01 01 	lds	r24, 0x0101
    12c2:	90 91 02 01 	lds	r25, 0x0102
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	90 93 02 01 	sts	0x0102, r25
    12cc:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	4c d9       	rcall	.-3432   	; 0x56c <MAX7219_displayLED>
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
    12d4:	80 91 81 01 	lds	r24, 0x0181
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de <__stack+0x1df>
    12dc:	4e c2       	rjmp	.+1180   	; 0x177a <__stack+0x67b>
    12de:	80 91 24 01 	lds	r24, 0x0124
    12e2:	81 11       	cpse	r24, r1
    12e4:	fe c1       	rjmp	.+1020   	; 0x16e2 <__stack+0x5e3>
    12e6:	80 91 82 01 	lds	r24, 0x0182
    12ea:	81 11       	cpse	r24, r1
    12ec:	fa c1       	rjmp	.+1012   	; 0x16e2 <__stack+0x5e3>
    12ee:	48 c2       	rjmp	.+1168   	; 0x1780 <__stack+0x681>
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	80 93 87 01 	sts	0x0187, r24
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    12f6:	80 91 83 01 	lds	r24, 0x0183
    12fa:	88 23       	and	r24, r24
    12fc:	21 f0       	breq	.+8      	; 0x1306 <__stack+0x207>
    12fe:	80 91 89 01 	lds	r24, 0x0189
    1302:	81 11       	cpse	r24, r1
    1304:	f2 c1       	rjmp	.+996    	; 0x16ea <__stack+0x5eb>
    1306:	80 91 84 01 	lds	r24, 0x0184
    130a:	88 23       	and	r24, r24
    130c:	09 f4       	brne	.+2      	; 0x1310 <__stack+0x211>
    130e:	f5 c1       	rjmp	.+1002   	; 0x16fa <__stack+0x5fb>
    1310:	80 91 23 01 	lds	r24, 0x0123
    1314:	88 23       	and	r24, r24
    1316:	09 f4       	brne	.+2      	; 0x131a <__stack+0x21b>
    1318:	e8 c1       	rjmp	.+976    	; 0x16ea <__stack+0x5eb>
    131a:	80 91 21 01 	lds	r24, 0x0121
    131e:	90 91 22 01 	lds	r25, 0x0122
    1322:	89 2b       	or	r24, r25
    1324:	09 f4       	brne	.+2      	; 0x1328 <__stack+0x229>
    1326:	e1 c1       	rjmp	.+962    	; 0x16ea <__stack+0x5eb>
    1328:	e8 c1       	rjmp	.+976    	; 0x16fa <__stack+0x5fb>
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
    132a:	80 91 85 01 	lds	r24, 0x0185
    132e:	81 11       	cpse	r24, r1
    1330:	ea c1       	rjmp	.+980    	; 0x1706 <__stack+0x607>
    1332:	2a c2       	rjmp	.+1108   	; 0x1788 <__stack+0x689>
					rpm_sensor.buzzer2 = rpm_sensor.tripC1 && !rpm_sensor.tripC2;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	80 93 88 01 	sts	0x0188, r24
			
			
			
					common_trip = lop_sensor.tripC1 || rpm_sensor.tripC1;
    133a:	88 81       	ld	r24, Y
    133c:	81 11       	cpse	r24, r1
    133e:	05 c0       	rjmp	.+10     	; 0x134a <__stack+0x24b>
    1340:	83 2d       	mov	r24, r3
    1342:	91 11       	cpse	r25, r1
    1344:	03 c0       	rjmp	.+6      	; 0x134c <__stack+0x24d>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	01 c0       	rjmp	.+2      	; 0x134c <__stack+0x24d>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	28 2f       	mov	r18, r24
    134e:	80 93 29 01 	sts	0x0129, r24

					lockout = (!rpm500 && (lop_sensor.trip)  && lockout) || (rpm100 && lop_sensor_5 && !common_trip && !stop_timer_bit);
    1352:	80 91 1f 01 	lds	r24, 0x011F
    1356:	90 91 20 01 	lds	r25, 0x0120
    135a:	89 2b       	or	r24, r25
    135c:	41 f4       	brne	.+16     	; 0x136e <__stack+0x26f>
    135e:	f4 01       	movw	r30, r8
    1360:	80 81       	ld	r24, Z
    1362:	88 23       	and	r24, r24
    1364:	21 f0       	breq	.+8      	; 0x136e <__stack+0x26f>
    1366:	80 91 2b 01 	lds	r24, 0x012B
    136a:	81 11       	cpse	r24, r1
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <__stack+0x295>
    136e:	80 91 21 01 	lds	r24, 0x0121
    1372:	90 91 22 01 	lds	r25, 0x0122
    1376:	89 2b       	or	r24, r25
    1378:	79 f0       	breq	.+30     	; 0x1398 <__stack+0x299>
    137a:	80 91 28 01 	lds	r24, 0x0128
    137e:	88 23       	and	r24, r24
    1380:	69 f0       	breq	.+26     	; 0x139c <__stack+0x29d>
    1382:	21 11       	cpse	r18, r1
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <__stack+0x2a1>
    1386:	90 91 2c 01 	lds	r25, 0x012C
    138a:	83 2d       	mov	r24, r3
    138c:	99 23       	and	r25, r25
    138e:	49 f0       	breq	.+18     	; 0x13a2 <__stack+0x2a3>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <__stack+0x2a3>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <__stack+0x2a3>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <__stack+0x2a3>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <__stack+0x2a3>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	80 93 2b 01 	sts	0x012B, r24
			
			
					start_timer_bit = (START || start_timer_bit) && (lockout);
    13a6:	80 91 26 01 	lds	r24, 0x0126
    13aa:	81 11       	cpse	r24, r1
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <__stack+0x2b7>
    13ae:	80 91 2e 01 	lds	r24, 0x012E
    13b2:	88 23       	and	r24, r24
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <__stack+0x2c5>
    13b6:	90 91 2b 01 	lds	r25, 0x012B
    13ba:	83 2d       	mov	r24, r3
    13bc:	91 11       	cpse	r25, r1
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <__stack+0x2c7>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <__stack+0x2c7>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	80 93 2e 01 	sts	0x012E, r24
		 
					if(lop_sensor.enable){
    13ca:	f8 01       	movw	r30, r16
    13cc:	80 81       	ld	r24, Z
    13ce:	88 23       	and	r24, r24
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <__stack+0x2f1>
				
						LED_state |= (START_LED);
    13d2:	80 91 01 01 	lds	r24, 0x0101
    13d6:	90 91 02 01 	lds	r25, 0x0102
    13da:	84 60       	ori	r24, 0x04	; 4
    13dc:	90 93 02 01 	sts	0x0102, r25
    13e0:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	c2 d8       	rcall	.-3708   	; 0x56c <MAX7219_displayLED>
						count_runtime = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 93 2a 01 	sts	0x012A, r24
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <__stack+0x30b>
					}else{
						LED_state &= ~(START_LED);
    13f0:	80 91 01 01 	lds	r24, 0x0101
    13f4:	90 91 02 01 	lds	r25, 0x0102
    13f8:	8b 7f       	andi	r24, 0xFB	; 251
    13fa:	90 93 02 01 	sts	0x0102, r25
    13fe:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	b3 d8       	rcall	.-3738   	; 0x56c <MAX7219_displayLED>
						count_runtime = 0;
    1406:	10 92 2a 01 	sts	0x012A, r1
					}
			
					stop_timer_bit = (STOP || stop_timer_bit || common_trip);
    140a:	80 91 25 01 	lds	r24, 0x0125
    140e:	81 11       	cpse	r24, r1
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <__stack+0x329>
    1412:	80 91 2c 01 	lds	r24, 0x012C
    1416:	81 11       	cpse	r24, r1
    1418:	09 c0       	rjmp	.+18     	; 0x142c <__stack+0x32d>
    141a:	83 2d       	mov	r24, r3
    141c:	90 91 29 01 	lds	r25, 0x0129
    1420:	91 11       	cpse	r25, r1
    1422:	05 c0       	rjmp	.+10     	; 0x142e <__stack+0x32f>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	03 c0       	rjmp	.+6      	; 0x142e <__stack+0x32f>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	01 c0       	rjmp	.+2      	; 0x142e <__stack+0x32f>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 93 2c 01 	sts	0x012C, r24
			
					if(lockout){
    1432:	80 91 2b 01 	lds	r24, 0x012B
    1436:	88 23       	and	r24, r24
    1438:	69 f0       	breq	.+26     	; 0x1454 <__stack+0x355>
				
						PORTD |= (1<<LOCKOUT_RELAY_OUTPUT);
    143a:	97 9a       	sbi	0x12, 7	; 18
						LED_state |= (LOCKOUT_LED);
    143c:	80 91 01 01 	lds	r24, 0x0101
    1440:	90 91 02 01 	lds	r25, 0x0102
    1444:	81 60       	ori	r24, 0x01	; 1
    1446:	90 93 02 01 	sts	0x0102, r25
    144a:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	8d d8       	rcall	.-3814   	; 0x56c <MAX7219_displayLED>
    1452:	0c c0       	rjmp	.+24     	; 0x146c <__stack+0x36d>
						
					}else{
						
						PORTD &= ~(1<<LOCKOUT_RELAY_OUTPUT);
    1454:	97 98       	cbi	0x12, 7	; 18
						LED_state &= ~(LOCKOUT_LED);
    1456:	80 91 01 01 	lds	r24, 0x0101
    145a:	90 91 02 01 	lds	r25, 0x0102
    145e:	8e 7f       	andi	r24, 0xFE	; 254
    1460:	90 93 02 01 	sts	0x0102, r25
    1464:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	80 d8       	rcall	.-3840   	; 0x56c <MAX7219_displayLED>
					}

			
					if(start_timer_bit){
    146c:	80 91 2e 01 	lds	r24, 0x012E
    1470:	88 23       	and	r24, r24
    1472:	11 f0       	breq	.+4      	; 0x1478 <__stack+0x379>
						PORTA |= (1<<START_OUTPUT);
    1474:	d8 9a       	sbi	0x1b, 0	; 27
    1476:	01 c0       	rjmp	.+2      	; 0x147a <__stack+0x37b>
				
					}else{
				
						PORTA &= ~(1<<START_OUTPUT);
    1478:	d8 98       	cbi	0x1b, 0	; 27
				
					}
		
		
					if(stop_timer_bit){
    147a:	80 91 2c 01 	lds	r24, 0x012C
    147e:	88 23       	and	r24, r24
    1480:	69 f0       	breq	.+26     	; 0x149c <__stack+0x39d>
						PORTA |= (1<<STOP_OUTPUT);
    1482:	d9 9a       	sbi	0x1b, 1	; 27
						LED_state |= (STOP_LED);
    1484:	80 91 01 01 	lds	r24, 0x0101
    1488:	90 91 02 01 	lds	r25, 0x0102
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	90 93 02 01 	sts	0x0102, r25
    1492:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	69 d8       	rcall	.-3886   	; 0x56c <MAX7219_displayLED>
    149a:	0c c0       	rjmp	.+24     	; 0x14b4 <__stack+0x3b5>
					}else{
						PORTA &= ~(1<<STOP_OUTPUT);
    149c:	d9 98       	cbi	0x1b, 1	; 27
						LED_state &= ~(STOP_LED);
    149e:	80 91 01 01 	lds	r24, 0x0101
    14a2:	90 91 02 01 	lds	r25, 0x0102
    14a6:	8d 7f       	andi	r24, 0xFD	; 253
    14a8:	90 93 02 01 	sts	0x0102, r25
    14ac:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	5c d8       	rcall	.-3912   	; 0x56c <MAX7219_displayLED>
					}
		
 
			

					if (lop_rawADC < LOP_STARTER_ENGAGE){
    14b4:	80 91 19 01 	lds	r24, 0x0119
    14b8:	90 91 1a 01 	lds	r25, 0x011A
    14bc:	8c 38       	cpi	r24, 0x8C	; 140
    14be:	91 05       	cpc	r25, r1
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <__stack+0x3cb>
	
						lop_sensor_5= 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	80 93 28 01 	sts	0x0128, r24
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <__stack+0x3cf>
					}
					else{
	
						lop_sensor_5=0;
    14ca:	10 92 28 01 	sts	0x0128, r1
					}
			
			
					if(lop_sensor.buzzer1 || lop_sensor.buzzer2 || wt_sensor.buzzer || lot_sensor.buzzer || bv_sensor.buzzer || fuel_leak_sensor.buzzer || rpm_sensor.buzzer1 || rpm_sensor.buzzer2|| charge_fail_sensor.buzzer){
    14ce:	f6 01       	movw	r30, r12
    14d0:	80 81       	ld	r24, Z
    14d2:	81 11       	cpse	r24, r1
    14d4:	20 c0       	rjmp	.+64     	; 0x1516 <__stack+0x417>
    14d6:	f3 01       	movw	r30, r6
    14d8:	80 81       	ld	r24, Z
    14da:	81 11       	cpse	r24, r1
    14dc:	1c c0       	rjmp	.+56     	; 0x1516 <__stack+0x417>
    14de:	80 91 39 01 	lds	r24, 0x0139
    14e2:	81 11       	cpse	r24, r1
    14e4:	18 c0       	rjmp	.+48     	; 0x1516 <__stack+0x417>
    14e6:	80 91 7b 01 	lds	r24, 0x017B
    14ea:	81 11       	cpse	r24, r1
    14ec:	14 c0       	rjmp	.+40     	; 0x1516 <__stack+0x417>
    14ee:	80 91 a2 01 	lds	r24, 0x01A2
    14f2:	81 11       	cpse	r24, r1
    14f4:	10 c0       	rjmp	.+32     	; 0x1516 <__stack+0x417>
    14f6:	80 91 ad 01 	lds	r24, 0x01AD
    14fa:	81 11       	cpse	r24, r1
    14fc:	0c c0       	rjmp	.+24     	; 0x1516 <__stack+0x417>
    14fe:	80 91 87 01 	lds	r24, 0x0187
    1502:	81 11       	cpse	r24, r1
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <__stack+0x417>
    1506:	80 91 88 01 	lds	r24, 0x0188
    150a:	81 11       	cpse	r24, r1
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <__stack+0x417>
    150e:	80 91 5f 01 	lds	r24, 0x015F
    1512:	88 23       	and	r24, r24
    1514:	31 f0       	breq	.+12     	; 0x1522 <__stack+0x423>
				
						BUZZER_PORT |= (1<<BUZZER_OUTPUT);
    1516:	e5 e6       	ldi	r30, 0x65	; 101
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 61       	ori	r24, 0x10	; 16
    151e:	80 83       	st	Z, r24
    1520:	3b cd       	rjmp	.-1418   	; 0xf98 <main+0xdc>
				
					}else{
				
						BUZZER_PORT &= ~(1<<BUZZER_OUTPUT);
    1522:	e5 e6       	ldi	r30, 0x65	; 101
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7e       	andi	r24, 0xEF	; 239
    152a:	80 83       	st	Z, r24
    152c:	35 cd       	rjmp	.-1430   	; 0xf98 <main+0xdc>
							lop_sensor.enable = 0;
						}
				
			
	
					lop_sensor.alarmC1 = (lop_sensor.alarm && lop_sensor.enable) || (lop_sensor.alarmC1 &&  !RESET);	
    152e:	f7 01       	movw	r30, r14
    1530:	10 82       	st	Z, r1
					
					if((lop_sensor.alarmC1) || (lop_sensor.tripC1)){
    1532:	88 81       	ld	r24, Y
    1534:	81 11       	cpse	r24, r1
    1536:	ba cd       	rjmp	.-1164   	; 0x10ac <main+0x1f0>
    1538:	c5 cd       	rjmp	.-1142   	; 0x10c4 <main+0x208>
							lop_sensor.enable = 0;
						}
				
			
	
					lop_sensor.alarmC1 = (lop_sensor.alarm && lop_sensor.enable) || (lop_sensor.alarmC1 &&  !RESET);	
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	f7 01       	movw	r30, r14
    153e:	80 83       	st	Z, r24
    1540:	b5 cd       	rjmp	.-1174   	; 0x10ac <main+0x1f0>
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}else{ 
						LED_state &= ~(LOP_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					lop_sensor.alarmC2 = (lop_sensor.alarmC1) && (MUTE || (lop_sensor.alarmC2));
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	f2 01       	movw	r30, r4
    1546:	80 83       	st	Z, r24
    1548:	d6 cd       	rjmp	.-1108   	; 0x10f6 <main+0x23a>
					lop_sensor.buzzer1 = (lop_sensor.alarmC1) && !(lop_sensor.alarmC2);
			
					lop_sensor.tripC1 = (lop_sensor.trip && (lop_sensor.enable||lop_sensor.out_of_range)) || (lop_sensor.tripC1 && !RESET);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	88 83       	st	Y, r24
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
    154e:	80 91 24 01 	lds	r24, 0x0124
    1552:	81 11       	cpse	r24, r1
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <__stack+0x463>
    1556:	e9 cd       	rjmp	.-1070   	; 0x112a <__stack+0x2b>
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					lop_sensor.alarmC2 = (lop_sensor.alarmC1) && (MUTE || (lop_sensor.alarmC2));
					lop_sensor.buzzer1 = (lop_sensor.alarmC1) && !(lop_sensor.alarmC2);
			
					lop_sensor.tripC1 = (lop_sensor.trip && (lop_sensor.enable||lop_sensor.out_of_range)) || (lop_sensor.tripC1 && !RESET);
    1558:	18 82       	st	Y, r1
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
    155a:	e3 e4       	ldi	r30, 0x43	; 67
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	10 82       	st	Z, r1
    1560:	ea cd       	rjmp	.-1068   	; 0x1136 <__stack+0x37>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	e3 e4       	ldi	r30, 0x43	; 67
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	80 83       	st	Z, r24
    156a:	e5 cd       	rjmp	.-1078   	; 0x1136 <__stack+0x37>
					lop_sensor.buzzer2 = ((lop_sensor.tripC1) && !(lop_sensor.tripC2));
			

					wt_sensor.alarmC1 = (wt_sensor.alarm) || (wt_sensor.alarmC1 && !RESET);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 34 01 	sts	0x0134, r24
					if( wt_sensor.alarmC1){
						LED_state |= WATER_TEMP_HIGH_LED;
    1572:	80 91 01 01 	lds	r24, 0x0101
    1576:	90 91 02 01 	lds	r25, 0x0102
    157a:	80 61       	ori	r24, 0x10	; 16
    157c:	90 93 02 01 	sts	0x0102, r25
    1580:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    158a:	e8 cd       	rjmp	.-1072   	; 0x115c <__stack+0x5d>
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
					lop_sensor.buzzer2 = ((lop_sensor.tripC1) && !(lop_sensor.tripC2));
			

					wt_sensor.alarmC1 = (wt_sensor.alarm) || (wt_sensor.alarmC1 && !RESET);
    158c:	10 92 34 01 	sts	0x0134, r1
					if( wt_sensor.alarmC1){
						LED_state |= WATER_TEMP_HIGH_LED;
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
					}else{
						LED_state &= ~(WATER_TEMP_HIGH_LED);
    1590:	80 91 01 01 	lds	r24, 0x0101
    1594:	90 91 02 01 	lds	r25, 0x0102
    1598:	8f 7e       	andi	r24, 0xEF	; 239
    159a:	90 93 02 01 	sts	0x0102, r25
    159e:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    15a8:	d9 cd       	rjmp	.-1102   	; 0x115c <__stack+0x5d>
						
					}
					wt_sensor.alarmC2 = wt_sensor.alarmC1 && (MUTE || wt_sensor.alarmC2);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 35 01 	sts	0x0135, r24
    15b0:	e3 cd       	rjmp	.-1082   	; 0x1178 <__stack+0x79>
					wt_sensor.buzzer = wt_sensor.alarmC1 && !wt_sensor.alarmC2;
			
			

					lot_sensor.alarmC1 = (lot_sensor.alarm) || (lot_sensor.alarmC1 && !RESET);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 76 01 	sts	0x0176, r24
					if(lot_sensor.alarmC1){
				
						LED_state |= LOT_HIGH_LED;
    15b8:	80 91 01 01 	lds	r24, 0x0101
    15bc:	90 91 02 01 	lds	r25, 0x0102
    15c0:	80 62       	ori	r24, 0x20	; 32
    15c2:	90 93 02 01 	sts	0x0102, r25
    15c6:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    15d0:	e5 cd       	rjmp	.-1078   	; 0x119c <__stack+0x9d>
					wt_sensor.alarmC2 = wt_sensor.alarmC1 && (MUTE || wt_sensor.alarmC2);
					wt_sensor.buzzer = wt_sensor.alarmC1 && !wt_sensor.alarmC2;
			
			

					lot_sensor.alarmC1 = (lot_sensor.alarm) || (lot_sensor.alarmC1 && !RESET);
    15d2:	10 92 76 01 	sts	0x0176, r1
				
						LED_state |= LOT_HIGH_LED;
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
						}else{
						LED_state &= ~(LOT_HIGH_LED);
    15d6:	80 91 01 01 	lds	r24, 0x0101
    15da:	90 91 02 01 	lds	r25, 0x0102
    15de:	8f 7d       	andi	r24, 0xDF	; 223
    15e0:	90 93 02 01 	sts	0x0102, r25
    15e4:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    15ee:	d6 cd       	rjmp	.-1108   	; 0x119c <__stack+0x9d>
						
					}
			
					lot_sensor.alarmC2 = lot_sensor.alarmC1 && (MUTE || lot_sensor.alarmC2);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 77 01 	sts	0x0177, r24
    15f6:	e0 cd       	rjmp	.-1088   	; 0x11b8 <__stack+0xb9>
					lot_sensor.buzzer = lot_sensor.alarmC1 && !lot_sensor.alarmC2;
			
			

					bv_sensor.alarmC1 = (bv_sensor.alarm) || (bv_sensor.alarmC1 && !RESET);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 9d 01 	sts	0x019D, r24
					if(bv_sensor.alarmC1){
				
						
						LED_state |= (BAT_VGE_LOW_LED);
    15fe:	80 91 01 01 	lds	r24, 0x0101
    1602:	90 91 02 01 	lds	r25, 0x0102
    1606:	88 60       	ori	r24, 0x08	; 8
    1608:	90 93 02 01 	sts	0x0102, r25
    160c:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    1616:	e2 cd       	rjmp	.-1084   	; 0x11dc <__stack+0xdd>
					lot_sensor.alarmC2 = lot_sensor.alarmC1 && (MUTE || lot_sensor.alarmC2);
					lot_sensor.buzzer = lot_sensor.alarmC1 && !lot_sensor.alarmC2;
			
			

					bv_sensor.alarmC1 = (bv_sensor.alarm) || (bv_sensor.alarmC1 && !RESET);
    1618:	10 92 9d 01 	sts	0x019D, r1
						
						LED_state |= (BAT_VGE_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						}else{
						
						LED_state &= ~(BAT_VGE_LOW_LED);
    161c:	80 91 01 01 	lds	r24, 0x0101
    1620:	90 91 02 01 	lds	r25, 0x0102
    1624:	87 7f       	andi	r24, 0xF7	; 247
    1626:	90 93 02 01 	sts	0x0102, r25
    162a:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    1634:	d3 cd       	rjmp	.-1114   	; 0x11dc <__stack+0xdd>
					}
					bv_sensor.alarmC2 = bv_sensor.alarmC1 && (MUTE || bv_sensor.alarmC2);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 9e 01 	sts	0x019E, r24
    163c:	dd cd       	rjmp	.-1094   	; 0x11f8 <__stack+0xf9>
					bv_sensor.buzzer = bv_sensor.alarmC1 && !bv_sensor.alarmC2;
			
			
			
			
					fuel_leak_sensor.alarmC1 = (fuel_leak_sensor.alarm) || (fuel_leak_sensor.alarmC1 && !RESET);
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	80 93 a8 01 	sts	0x01A8, r24
					if(fuel_leak_sensor.alarmC1){
				
						LED_state |= (FUEL_LEAK_LED);
    1644:	80 91 01 01 	lds	r24, 0x0101
    1648:	90 91 02 01 	lds	r25, 0x0102
    164c:	91 60       	ori	r25, 0x01	; 1
    164e:	90 93 02 01 	sts	0x0102, r25
    1652:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
    1656:	62 e0       	ldi	r22, 0x02	; 2
    1658:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    165c:	df cd       	rjmp	.-1090   	; 0x121c <__stack+0x11d>
					bv_sensor.buzzer = bv_sensor.alarmC1 && !bv_sensor.alarmC2;
			
			
			
			
					fuel_leak_sensor.alarmC1 = (fuel_leak_sensor.alarm) || (fuel_leak_sensor.alarmC1 && !RESET);
    165e:	10 92 a8 01 	sts	0x01A8, r1
				
						LED_state |= (FUEL_LEAK_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
						
						}else{
						LED_state &= ~(FUEL_LEAK_LED);
    1662:	80 91 01 01 	lds	r24, 0x0101
    1666:	90 91 02 01 	lds	r25, 0x0102
    166a:	9e 7f       	andi	r25, 0xFE	; 254
    166c:	90 93 02 01 	sts	0x0102, r25
    1670:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    167a:	d0 cd       	rjmp	.-1120   	; 0x121c <__stack+0x11d>
						
					}
					fuel_leak_sensor.alarmC2 = fuel_leak_sensor.alarmC1	&& (MUTE || fuel_leak_sensor.alarmC2);
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 a9 01 	sts	0x01A9, r24
    1682:	da cd       	rjmp	.-1100   	; 0x1238 <__stack+0x139>
					fuel_leak_sensor.buzzer = fuel_leak_sensor.alarmC1 && !(fuel_leak_sensor.alarmC2);
			
			
			
					charge_fail_sensor.alarmC1 = (charge_fail_sensor.alarm) || (charge_fail_sensor.alarmC1 && !RESET);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 5a 01 	sts	0x015A, r24
					if(charge_fail_sensor.alarmC1){
				
						LED_state |= (CHARGE_FAIL_LED);
    168a:	80 91 01 01 	lds	r24, 0x0101
    168e:	90 91 02 01 	lds	r25, 0x0102
    1692:	92 60       	ori	r25, 0x02	; 2
    1694:	90 93 02 01 	sts	0x0102, r25
    1698:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    16a2:	dc cd       	rjmp	.-1096   	; 0x125c <__stack+0x15d>
					fuel_leak_sensor.alarmC2 = fuel_leak_sensor.alarmC1	&& (MUTE || fuel_leak_sensor.alarmC2);
					fuel_leak_sensor.buzzer = fuel_leak_sensor.alarmC1 && !(fuel_leak_sensor.alarmC2);
			
			
			
					charge_fail_sensor.alarmC1 = (charge_fail_sensor.alarm) || (charge_fail_sensor.alarmC1 && !RESET);
    16a4:	10 92 5a 01 	sts	0x015A, r1
						LED_state |= (CHARGE_FAIL_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
				
					}else{
					
						LED_state &= ~(CHARGE_FAIL_LED);
    16a8:	80 91 01 01 	lds	r24, 0x0101
    16ac:	90 91 02 01 	lds	r25, 0x0102
    16b0:	9d 7f       	andi	r25, 0xFD	; 253
    16b2:	90 93 02 01 	sts	0x0102, r25
    16b6:	80 93 01 01 	sts	0x0101, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	0e 94 b6 02 	call	0x56c	; 0x56c <MAX7219_displayLED>
    16c0:	cd cd       	rjmp	.-1126   	; 0x125c <__stack+0x15d>
					}
					charge_fail_sensor.alarmC2 = charge_fail_sensor.alarmC1	&& (MUTE || charge_fail_sensor.alarmC2);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 5b 01 	sts	0x015B, r24
    16c8:	d7 cd       	rjmp	.-1106   	; 0x1278 <__stack+0x179>
					charge_fail_sensor.buzzer = charge_fail_sensor.alarmC1 && !(charge_fail_sensor.alarmC2) && (rpm500);
			
			
			
					rpm_sensor.enable = 1;
					rpm_sensor.alarmC1 = (rpm_sensor.alarm) || (rpm_sensor.alarmC1 && !RESET);
    16ca:	10 92 81 01 	sts	0x0181, r1
					
					if(rpm_sensor.tripC1 || rpm_sensor.alarmC1){
    16ce:	80 91 84 01 	lds	r24, 0x0184
    16d2:	88 23       	and	r24, r24
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <__stack+0x5d9>
    16d6:	f3 cd       	rjmp	.-1050   	; 0x12be <__stack+0x1bf>
    16d8:	e6 cd       	rjmp	.-1076   	; 0x12a6 <__stack+0x1a7>
					charge_fail_sensor.buzzer = charge_fail_sensor.alarmC1 && !(charge_fail_sensor.alarmC2) && (rpm500);
			
			
			
					rpm_sensor.enable = 1;
					rpm_sensor.alarmC1 = (rpm_sensor.alarm) || (rpm_sensor.alarmC1 && !RESET);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 81 01 	sts	0x0181, r24
    16e0:	e2 cd       	rjmp	.-1084   	; 0x12a6 <__stack+0x1a7>
					}else{
						LED_state &= ~(OVERSPEED_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 82 01 	sts	0x0182, r24
    16e8:	03 ce       	rjmp	.-1018   	; 0x12f0 <__stack+0x1f1>
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 84 01 	sts	0x0184, r24
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
    16f0:	80 91 24 01 	lds	r24, 0x0124
    16f4:	81 11       	cpse	r24, r1
    16f6:	07 c0       	rjmp	.+14     	; 0x1706 <__stack+0x607>
    16f8:	18 ce       	rjmp	.-976    	; 0x132a <__stack+0x22b>
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    16fa:	10 92 84 01 	sts	0x0184, r1
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
    16fe:	10 92 85 01 	sts	0x0185, r1
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	17 ce       	rjmp	.-978    	; 0x1334 <__stack+0x235>
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 85 01 	sts	0x0185, r24
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	12 ce       	rjmp	.-988    	; 0x1334 <__stack+0x235>
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}else{ 
						LED_state &= ~(LOP_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					lop_sensor.alarmC2 = (lop_sensor.alarmC1) && (MUTE || (lop_sensor.alarmC2));
    1710:	f2 01       	movw	r30, r4
    1712:	10 82       	st	Z, r1
    1714:	f0 cc       	rjmp	.-1568   	; 0x10f6 <main+0x23a>
    1716:	f2 01       	movw	r30, r4
    1718:	10 82       	st	Z, r1
					lop_sensor.buzzer1 = (lop_sensor.alarmC1) && !(lop_sensor.alarmC2);
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	ed cc       	rjmp	.-1574   	; 0x10f8 <main+0x23c>
			
					lop_sensor.tripC1 = (lop_sensor.trip && (lop_sensor.enable||lop_sensor.out_of_range)) || (lop_sensor.tripC1 && !RESET);
					
					lop_sensor.tripC2 = (lop_sensor.tripC1) && ((MUTE) || (lop_sensor.tripC2));
    171e:	e3 e4       	ldi	r30, 0x43	; 67
    1720:	f1 e0       	ldi	r31, 0x01	; 1
    1722:	10 82       	st	Z, r1
					lop_sensor.buzzer2 = ((lop_sensor.tripC1) && !(lop_sensor.tripC2));
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 cd       	rjmp	.-1520   	; 0x1138 <__stack+0x39>
					}else{
						LED_state &= ~(WATER_TEMP_HIGH_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
					}
					wt_sensor.alarmC2 = wt_sensor.alarmC1 && (MUTE || wt_sensor.alarmC2);
    1728:	10 92 35 01 	sts	0x0135, r1
    172c:	25 cd       	rjmp	.-1462   	; 0x1178 <__stack+0x79>
    172e:	10 92 35 01 	sts	0x0135, r1
					wt_sensor.buzzer = wt_sensor.alarmC1 && !wt_sensor.alarmC2;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	22 cd       	rjmp	.-1468   	; 0x117a <__stack+0x7b>
						LED_state &= ~(LOT_HIGH_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
						
					}
			
					lot_sensor.alarmC2 = lot_sensor.alarmC1 && (MUTE || lot_sensor.alarmC2);
    1736:	10 92 77 01 	sts	0x0177, r1
    173a:	3e cd       	rjmp	.-1412   	; 0x11b8 <__stack+0xb9>
    173c:	10 92 77 01 	sts	0x0177, r1
					lot_sensor.buzzer = lot_sensor.alarmC1 && !lot_sensor.alarmC2;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	3b cd       	rjmp	.-1418   	; 0x11ba <__stack+0xbb>
						}else{
						
						LED_state &= ~(BAT_VGE_LOW_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
					}
					bv_sensor.alarmC2 = bv_sensor.alarmC1 && (MUTE || bv_sensor.alarmC2);
    1744:	10 92 9e 01 	sts	0x019E, r1
    1748:	57 cd       	rjmp	.-1362   	; 0x11f8 <__stack+0xf9>
    174a:	10 92 9e 01 	sts	0x019E, r1
					bv_sensor.buzzer = bv_sensor.alarmC1 && !bv_sensor.alarmC2;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	54 cd       	rjmp	.-1368   	; 0x11fa <__stack+0xfb>
						}else{
						LED_state &= ~(FUEL_LEAK_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
						
					}
					fuel_leak_sensor.alarmC2 = fuel_leak_sensor.alarmC1	&& (MUTE || fuel_leak_sensor.alarmC2);
    1752:	10 92 a9 01 	sts	0x01A9, r1
    1756:	70 cd       	rjmp	.-1312   	; 0x1238 <__stack+0x139>
    1758:	10 92 a9 01 	sts	0x01A9, r1
					fuel_leak_sensor.buzzer = fuel_leak_sensor.alarmC1 && !(fuel_leak_sensor.alarmC2);
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	6d cd       	rjmp	.-1318   	; 0x123a <__stack+0x13b>
					}else{
					
						LED_state &= ~(CHARGE_FAIL_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
					}
					charge_fail_sensor.alarmC2 = charge_fail_sensor.alarmC1	&& (MUTE || charge_fail_sensor.alarmC2);
    1760:	10 92 5b 01 	sts	0x015B, r1
					charge_fail_sensor.buzzer = charge_fail_sensor.alarmC1 && !(charge_fail_sensor.alarmC2) && (rpm500);
    1764:	80 91 1f 01 	lds	r24, 0x011F
    1768:	90 91 20 01 	lds	r25, 0x0120
    176c:	89 2b       	or	r24, r25
    176e:	09 f0       	breq	.+2      	; 0x1772 <__stack+0x673>
    1770:	85 cd       	rjmp	.-1270   	; 0x127c <__stack+0x17d>
    1772:	82 cd       	rjmp	.-1276   	; 0x1278 <__stack+0x179>
					}else{
					
						LED_state &= ~(CHARGE_FAIL_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT2);
					}
					charge_fail_sensor.alarmC2 = charge_fail_sensor.alarmC1	&& (MUTE || charge_fail_sensor.alarmC2);
    1774:	10 92 5b 01 	sts	0x015B, r1
    1778:	7f cd       	rjmp	.-1282   	; 0x1278 <__stack+0x179>
					}else{
						LED_state &= ~(OVERSPEED_LED);
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
    177a:	10 92 82 01 	sts	0x0182, r1
    177e:	b8 cd       	rjmp	.-1168   	; 0x12f0 <__stack+0x1f1>
    1780:	10 92 82 01 	sts	0x0182, r1
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	b5 cd       	rjmp	.-1174   	; 0x12f2 <__stack+0x1f3>
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
    1788:	10 92 85 01 	sts	0x0185, r1
						MAX7219_displayLED(LED_state,MAX7219_DIGIT1);
				
					}
					rpm_sensor.alarmC2 = rpm_sensor.alarmC1 && (MUTE || rpm_sensor.alarmC2);
					rpm_sensor.buzzer1 = rpm_sensor.alarmC1 && !rpm_sensor.alarmC2;
					rpm_sensor.tripC1 = (rpm_sensor.trip && rpm_sensor.enable) || (rpm_sensor.tripC1 && (!RESET || !rpm100));
    178c:	91 e0       	ldi	r25, 0x01	; 1
					
					
					rpm_sensor.tripC2 = rpm_sensor.tripC1 && (MUTE || rpm_sensor.tripC2);
					rpm_sensor.buzzer2 = rpm_sensor.tripC1 && !rpm_sensor.tripC2;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	d2 cd       	rjmp	.-1116   	; 0x1336 <__stack+0x237>

00001792 <__subsf3>:
    1792:	50 58       	subi	r21, 0x80	; 128

00001794 <__addsf3>:
    1794:	bb 27       	eor	r27, r27
    1796:	aa 27       	eor	r26, r26
    1798:	0e d0       	rcall	.+28     	; 0x17b6 <__addsf3x>
    179a:	70 c1       	rjmp	.+736    	; 0x1a7c <__fp_round>
    179c:	61 d1       	rcall	.+706    	; 0x1a60 <__fp_pscA>
    179e:	30 f0       	brcs	.+12     	; 0x17ac <__addsf3+0x18>
    17a0:	66 d1       	rcall	.+716    	; 0x1a6e <__fp_pscB>
    17a2:	20 f0       	brcs	.+8      	; 0x17ac <__addsf3+0x18>
    17a4:	31 f4       	brne	.+12     	; 0x17b2 <__addsf3+0x1e>
    17a6:	9f 3f       	cpi	r25, 0xFF	; 255
    17a8:	11 f4       	brne	.+4      	; 0x17ae <__addsf3+0x1a>
    17aa:	1e f4       	brtc	.+6      	; 0x17b2 <__addsf3+0x1e>
    17ac:	56 c1       	rjmp	.+684    	; 0x1a5a <__fp_nan>
    17ae:	0e f4       	brtc	.+2      	; 0x17b2 <__addsf3+0x1e>
    17b0:	e0 95       	com	r30
    17b2:	e7 fb       	bst	r30, 7
    17b4:	4c c1       	rjmp	.+664    	; 0x1a4e <__fp_inf>

000017b6 <__addsf3x>:
    17b6:	e9 2f       	mov	r30, r25
    17b8:	72 d1       	rcall	.+740    	; 0x1a9e <__fp_split3>
    17ba:	80 f3       	brcs	.-32     	; 0x179c <__addsf3+0x8>
    17bc:	ba 17       	cp	r27, r26
    17be:	62 07       	cpc	r22, r18
    17c0:	73 07       	cpc	r23, r19
    17c2:	84 07       	cpc	r24, r20
    17c4:	95 07       	cpc	r25, r21
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <__addsf3x+0x18>
    17c8:	71 f4       	brne	.+28     	; 0x17e6 <__addsf3x+0x30>
    17ca:	9e f5       	brtc	.+102    	; 0x1832 <__addsf3x+0x7c>
    17cc:	8a c1       	rjmp	.+788    	; 0x1ae2 <__fp_zero>
    17ce:	0e f4       	brtc	.+2      	; 0x17d2 <__addsf3x+0x1c>
    17d0:	e0 95       	com	r30
    17d2:	0b 2e       	mov	r0, r27
    17d4:	ba 2f       	mov	r27, r26
    17d6:	a0 2d       	mov	r26, r0
    17d8:	0b 01       	movw	r0, r22
    17da:	b9 01       	movw	r22, r18
    17dc:	90 01       	movw	r18, r0
    17de:	0c 01       	movw	r0, r24
    17e0:	ca 01       	movw	r24, r20
    17e2:	a0 01       	movw	r20, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	ff 27       	eor	r31, r31
    17e8:	59 1b       	sub	r21, r25
    17ea:	99 f0       	breq	.+38     	; 0x1812 <__addsf3x+0x5c>
    17ec:	59 3f       	cpi	r21, 0xF9	; 249
    17ee:	50 f4       	brcc	.+20     	; 0x1804 <__addsf3x+0x4e>
    17f0:	50 3e       	cpi	r21, 0xE0	; 224
    17f2:	68 f1       	brcs	.+90     	; 0x184e <__addsf3x+0x98>
    17f4:	1a 16       	cp	r1, r26
    17f6:	f0 40       	sbci	r31, 0x00	; 0
    17f8:	a2 2f       	mov	r26, r18
    17fa:	23 2f       	mov	r18, r19
    17fc:	34 2f       	mov	r19, r20
    17fe:	44 27       	eor	r20, r20
    1800:	58 5f       	subi	r21, 0xF8	; 248
    1802:	f3 cf       	rjmp	.-26     	; 0x17ea <__addsf3x+0x34>
    1804:	46 95       	lsr	r20
    1806:	37 95       	ror	r19
    1808:	27 95       	ror	r18
    180a:	a7 95       	ror	r26
    180c:	f0 40       	sbci	r31, 0x00	; 0
    180e:	53 95       	inc	r21
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__addsf3x+0x4e>
    1812:	7e f4       	brtc	.+30     	; 0x1832 <__addsf3x+0x7c>
    1814:	1f 16       	cp	r1, r31
    1816:	ba 0b       	sbc	r27, r26
    1818:	62 0b       	sbc	r22, r18
    181a:	73 0b       	sbc	r23, r19
    181c:	84 0b       	sbc	r24, r20
    181e:	ba f0       	brmi	.+46     	; 0x184e <__addsf3x+0x98>
    1820:	91 50       	subi	r25, 0x01	; 1
    1822:	a1 f0       	breq	.+40     	; 0x184c <__addsf3x+0x96>
    1824:	ff 0f       	add	r31, r31
    1826:	bb 1f       	adc	r27, r27
    1828:	66 1f       	adc	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	c2 f7       	brpl	.-16     	; 0x1820 <__addsf3x+0x6a>
    1830:	0e c0       	rjmp	.+28     	; 0x184e <__addsf3x+0x98>
    1832:	ba 0f       	add	r27, r26
    1834:	62 1f       	adc	r22, r18
    1836:	73 1f       	adc	r23, r19
    1838:	84 1f       	adc	r24, r20
    183a:	48 f4       	brcc	.+18     	; 0x184e <__addsf3x+0x98>
    183c:	87 95       	ror	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	b7 95       	ror	r27
    1844:	f7 95       	ror	r31
    1846:	9e 3f       	cpi	r25, 0xFE	; 254
    1848:	08 f0       	brcs	.+2      	; 0x184c <__addsf3x+0x96>
    184a:	b3 cf       	rjmp	.-154    	; 0x17b2 <__addsf3+0x1e>
    184c:	93 95       	inc	r25
    184e:	88 0f       	add	r24, r24
    1850:	08 f0       	brcs	.+2      	; 0x1854 <__addsf3x+0x9e>
    1852:	99 27       	eor	r25, r25
    1854:	ee 0f       	add	r30, r30
    1856:	97 95       	ror	r25
    1858:	87 95       	ror	r24
    185a:	08 95       	ret

0000185c <__cmpsf2>:
    185c:	d4 d0       	rcall	.+424    	; 0x1a06 <__fp_cmp>
    185e:	08 f4       	brcc	.+2      	; 0x1862 <__cmpsf2+0x6>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	08 95       	ret

00001864 <__divsf3>:
    1864:	0c d0       	rcall	.+24     	; 0x187e <__divsf3x>
    1866:	0a c1       	rjmp	.+532    	; 0x1a7c <__fp_round>
    1868:	02 d1       	rcall	.+516    	; 0x1a6e <__fp_pscB>
    186a:	40 f0       	brcs	.+16     	; 0x187c <__divsf3+0x18>
    186c:	f9 d0       	rcall	.+498    	; 0x1a60 <__fp_pscA>
    186e:	30 f0       	brcs	.+12     	; 0x187c <__divsf3+0x18>
    1870:	21 f4       	brne	.+8      	; 0x187a <__divsf3+0x16>
    1872:	5f 3f       	cpi	r21, 0xFF	; 255
    1874:	19 f0       	breq	.+6      	; 0x187c <__divsf3+0x18>
    1876:	eb c0       	rjmp	.+470    	; 0x1a4e <__fp_inf>
    1878:	51 11       	cpse	r21, r1
    187a:	34 c1       	rjmp	.+616    	; 0x1ae4 <__fp_szero>
    187c:	ee c0       	rjmp	.+476    	; 0x1a5a <__fp_nan>

0000187e <__divsf3x>:
    187e:	0f d1       	rcall	.+542    	; 0x1a9e <__fp_split3>
    1880:	98 f3       	brcs	.-26     	; 0x1868 <__divsf3+0x4>

00001882 <__divsf3_pse>:
    1882:	99 23       	and	r25, r25
    1884:	c9 f3       	breq	.-14     	; 0x1878 <__divsf3+0x14>
    1886:	55 23       	and	r21, r21
    1888:	b1 f3       	breq	.-20     	; 0x1876 <__divsf3+0x12>
    188a:	95 1b       	sub	r25, r21
    188c:	55 0b       	sbc	r21, r21
    188e:	bb 27       	eor	r27, r27
    1890:	aa 27       	eor	r26, r26
    1892:	62 17       	cp	r22, r18
    1894:	73 07       	cpc	r23, r19
    1896:	84 07       	cpc	r24, r20
    1898:	38 f0       	brcs	.+14     	; 0x18a8 <__divsf3_pse+0x26>
    189a:	9f 5f       	subi	r25, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	44 1f       	adc	r20, r20
    18a4:	aa 1f       	adc	r26, r26
    18a6:	a9 f3       	breq	.-22     	; 0x1892 <__divsf3_pse+0x10>
    18a8:	33 d0       	rcall	.+102    	; 0x1910 <__divsf3_pse+0x8e>
    18aa:	0e 2e       	mov	r0, r30
    18ac:	3a f0       	brmi	.+14     	; 0x18bc <__divsf3_pse+0x3a>
    18ae:	e0 e8       	ldi	r30, 0x80	; 128
    18b0:	30 d0       	rcall	.+96     	; 0x1912 <__divsf3_pse+0x90>
    18b2:	91 50       	subi	r25, 0x01	; 1
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	e6 95       	lsr	r30
    18b8:	00 1c       	adc	r0, r0
    18ba:	ca f7       	brpl	.-14     	; 0x18ae <__divsf3_pse+0x2c>
    18bc:	29 d0       	rcall	.+82     	; 0x1910 <__divsf3_pse+0x8e>
    18be:	fe 2f       	mov	r31, r30
    18c0:	27 d0       	rcall	.+78     	; 0x1910 <__divsf3_pse+0x8e>
    18c2:	66 0f       	add	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	bb 1f       	adc	r27, r27
    18ca:	26 17       	cp	r18, r22
    18cc:	37 07       	cpc	r19, r23
    18ce:	48 07       	cpc	r20, r24
    18d0:	ab 07       	cpc	r26, r27
    18d2:	b0 e8       	ldi	r27, 0x80	; 128
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <__divsf3_pse+0x56>
    18d6:	bb 0b       	sbc	r27, r27
    18d8:	80 2d       	mov	r24, r0
    18da:	bf 01       	movw	r22, r30
    18dc:	ff 27       	eor	r31, r31
    18de:	93 58       	subi	r25, 0x83	; 131
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	2a f0       	brmi	.+10     	; 0x18ee <__divsf3_pse+0x6c>
    18e4:	9e 3f       	cpi	r25, 0xFE	; 254
    18e6:	51 05       	cpc	r21, r1
    18e8:	68 f0       	brcs	.+26     	; 0x1904 <__divsf3_pse+0x82>
    18ea:	b1 c0       	rjmp	.+354    	; 0x1a4e <__fp_inf>
    18ec:	fb c0       	rjmp	.+502    	; 0x1ae4 <__fp_szero>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	ec f3       	brlt	.-6      	; 0x18ec <__divsf3_pse+0x6a>
    18f2:	98 3e       	cpi	r25, 0xE8	; 232
    18f4:	dc f3       	brlt	.-10     	; 0x18ec <__divsf3_pse+0x6a>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f7 95       	ror	r31
    1900:	9f 5f       	subi	r25, 0xFF	; 255
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__divsf3_pse+0x74>
    1904:	88 0f       	add	r24, r24
    1906:	91 1d       	adc	r25, r1
    1908:	96 95       	lsr	r25
    190a:	87 95       	ror	r24
    190c:	97 f9       	bld	r25, 7
    190e:	08 95       	ret
    1910:	e1 e0       	ldi	r30, 0x01	; 1
    1912:	66 0f       	add	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	bb 1f       	adc	r27, r27
    191a:	62 17       	cp	r22, r18
    191c:	73 07       	cpc	r23, r19
    191e:	84 07       	cpc	r24, r20
    1920:	ba 07       	cpc	r27, r26
    1922:	20 f0       	brcs	.+8      	; 0x192c <__divsf3_pse+0xaa>
    1924:	62 1b       	sub	r22, r18
    1926:	73 0b       	sbc	r23, r19
    1928:	84 0b       	sbc	r24, r20
    192a:	ba 0b       	sbc	r27, r26
    192c:	ee 1f       	adc	r30, r30
    192e:	88 f7       	brcc	.-30     	; 0x1912 <__divsf3_pse+0x90>
    1930:	e0 95       	com	r30
    1932:	08 95       	ret

00001934 <__fixunssfsi>:
    1934:	bc d0       	rcall	.+376    	; 0x1aae <__fp_splitA>
    1936:	88 f0       	brcs	.+34     	; 0x195a <__fixunssfsi+0x26>
    1938:	9f 57       	subi	r25, 0x7F	; 127
    193a:	90 f0       	brcs	.+36     	; 0x1960 <__fixunssfsi+0x2c>
    193c:	b9 2f       	mov	r27, r25
    193e:	99 27       	eor	r25, r25
    1940:	b7 51       	subi	r27, 0x17	; 23
    1942:	a0 f0       	brcs	.+40     	; 0x196c <__fixunssfsi+0x38>
    1944:	d1 f0       	breq	.+52     	; 0x197a <__fixunssfsi+0x46>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	1a f0       	brmi	.+6      	; 0x1956 <__fixunssfsi+0x22>
    1950:	ba 95       	dec	r27
    1952:	c9 f7       	brne	.-14     	; 0x1946 <__fixunssfsi+0x12>
    1954:	12 c0       	rjmp	.+36     	; 0x197a <__fixunssfsi+0x46>
    1956:	b1 30       	cpi	r27, 0x01	; 1
    1958:	81 f0       	breq	.+32     	; 0x197a <__fixunssfsi+0x46>
    195a:	c3 d0       	rcall	.+390    	; 0x1ae2 <__fp_zero>
    195c:	b1 e0       	ldi	r27, 0x01	; 1
    195e:	08 95       	ret
    1960:	c0 c0       	rjmp	.+384    	; 0x1ae2 <__fp_zero>
    1962:	67 2f       	mov	r22, r23
    1964:	78 2f       	mov	r23, r24
    1966:	88 27       	eor	r24, r24
    1968:	b8 5f       	subi	r27, 0xF8	; 248
    196a:	39 f0       	breq	.+14     	; 0x197a <__fixunssfsi+0x46>
    196c:	b9 3f       	cpi	r27, 0xF9	; 249
    196e:	cc f3       	brlt	.-14     	; 0x1962 <__fixunssfsi+0x2e>
    1970:	86 95       	lsr	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b3 95       	inc	r27
    1978:	d9 f7       	brne	.-10     	; 0x1970 <__fixunssfsi+0x3c>
    197a:	3e f4       	brtc	.+14     	; 0x198a <__fixunssfsi+0x56>
    197c:	90 95       	com	r25
    197e:	80 95       	com	r24
    1980:	70 95       	com	r23
    1982:	61 95       	neg	r22
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	08 95       	ret

0000198c <__floatunsisf>:
    198c:	e8 94       	clt
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <__floatsisf+0x12>

00001990 <__floatsisf>:
    1990:	97 fb       	bst	r25, 7
    1992:	3e f4       	brtc	.+14     	; 0x19a2 <__floatsisf+0x12>
    1994:	90 95       	com	r25
    1996:	80 95       	com	r24
    1998:	70 95       	com	r23
    199a:	61 95       	neg	r22
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	99 23       	and	r25, r25
    19a4:	a9 f0       	breq	.+42     	; 0x19d0 <__floatsisf+0x40>
    19a6:	f9 2f       	mov	r31, r25
    19a8:	96 e9       	ldi	r25, 0x96	; 150
    19aa:	bb 27       	eor	r27, r27
    19ac:	93 95       	inc	r25
    19ae:	f6 95       	lsr	r31
    19b0:	87 95       	ror	r24
    19b2:	77 95       	ror	r23
    19b4:	67 95       	ror	r22
    19b6:	b7 95       	ror	r27
    19b8:	f1 11       	cpse	r31, r1
    19ba:	f8 cf       	rjmp	.-16     	; 0x19ac <__floatsisf+0x1c>
    19bc:	fa f4       	brpl	.+62     	; 0x19fc <__floatsisf+0x6c>
    19be:	bb 0f       	add	r27, r27
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__floatsisf+0x36>
    19c2:	60 ff       	sbrs	r22, 0
    19c4:	1b c0       	rjmp	.+54     	; 0x19fc <__floatsisf+0x6c>
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <__floatsisf+0x6c>
    19d0:	88 23       	and	r24, r24
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <__floatsisf+0x48>
    19d4:	96 e9       	ldi	r25, 0x96	; 150
    19d6:	11 c0       	rjmp	.+34     	; 0x19fa <__floatsisf+0x6a>
    19d8:	77 23       	and	r23, r23
    19da:	21 f0       	breq	.+8      	; 0x19e4 <__floatsisf+0x54>
    19dc:	9e e8       	ldi	r25, 0x8E	; 142
    19de:	87 2f       	mov	r24, r23
    19e0:	76 2f       	mov	r23, r22
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <__floatsisf+0x5e>
    19e4:	66 23       	and	r22, r22
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <__floatsisf+0x74>
    19e8:	96 e8       	ldi	r25, 0x86	; 134
    19ea:	86 2f       	mov	r24, r22
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	2a f0       	brmi	.+10     	; 0x19fc <__floatsisf+0x6c>
    19f2:	9a 95       	dec	r25
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	da f7       	brpl	.-10     	; 0x19f2 <__floatsisf+0x62>
    19fc:	88 0f       	add	r24, r24
    19fe:	96 95       	lsr	r25
    1a00:	87 95       	ror	r24
    1a02:	97 f9       	bld	r25, 7
    1a04:	08 95       	ret

00001a06 <__fp_cmp>:
    1a06:	99 0f       	add	r25, r25
    1a08:	00 08       	sbc	r0, r0
    1a0a:	55 0f       	add	r21, r21
    1a0c:	aa 0b       	sbc	r26, r26
    1a0e:	e0 e8       	ldi	r30, 0x80	; 128
    1a10:	fe ef       	ldi	r31, 0xFE	; 254
    1a12:	16 16       	cp	r1, r22
    1a14:	17 06       	cpc	r1, r23
    1a16:	e8 07       	cpc	r30, r24
    1a18:	f9 07       	cpc	r31, r25
    1a1a:	c0 f0       	brcs	.+48     	; 0x1a4c <__fp_cmp+0x46>
    1a1c:	12 16       	cp	r1, r18
    1a1e:	13 06       	cpc	r1, r19
    1a20:	e4 07       	cpc	r30, r20
    1a22:	f5 07       	cpc	r31, r21
    1a24:	98 f0       	brcs	.+38     	; 0x1a4c <__fp_cmp+0x46>
    1a26:	62 1b       	sub	r22, r18
    1a28:	73 0b       	sbc	r23, r19
    1a2a:	84 0b       	sbc	r24, r20
    1a2c:	95 0b       	sbc	r25, r21
    1a2e:	39 f4       	brne	.+14     	; 0x1a3e <__fp_cmp+0x38>
    1a30:	0a 26       	eor	r0, r26
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <__fp_cmp+0x46>
    1a34:	23 2b       	or	r18, r19
    1a36:	24 2b       	or	r18, r20
    1a38:	25 2b       	or	r18, r21
    1a3a:	21 f4       	brne	.+8      	; 0x1a44 <__fp_cmp+0x3e>
    1a3c:	08 95       	ret
    1a3e:	0a 26       	eor	r0, r26
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <__fp_cmp+0x3e>
    1a42:	a1 40       	sbci	r26, 0x01	; 1
    1a44:	a6 95       	lsr	r26
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	81 1d       	adc	r24, r1
    1a4a:	81 1d       	adc	r24, r1
    1a4c:	08 95       	ret

00001a4e <__fp_inf>:
    1a4e:	97 f9       	bld	r25, 7
    1a50:	9f 67       	ori	r25, 0x7F	; 127
    1a52:	80 e8       	ldi	r24, 0x80	; 128
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	08 95       	ret

00001a5a <__fp_nan>:
    1a5a:	9f ef       	ldi	r25, 0xFF	; 255
    1a5c:	80 ec       	ldi	r24, 0xC0	; 192
    1a5e:	08 95       	ret

00001a60 <__fp_pscA>:
    1a60:	00 24       	eor	r0, r0
    1a62:	0a 94       	dec	r0
    1a64:	16 16       	cp	r1, r22
    1a66:	17 06       	cpc	r1, r23
    1a68:	18 06       	cpc	r1, r24
    1a6a:	09 06       	cpc	r0, r25
    1a6c:	08 95       	ret

00001a6e <__fp_pscB>:
    1a6e:	00 24       	eor	r0, r0
    1a70:	0a 94       	dec	r0
    1a72:	12 16       	cp	r1, r18
    1a74:	13 06       	cpc	r1, r19
    1a76:	14 06       	cpc	r1, r20
    1a78:	05 06       	cpc	r0, r21
    1a7a:	08 95       	ret

00001a7c <__fp_round>:
    1a7c:	09 2e       	mov	r0, r25
    1a7e:	03 94       	inc	r0
    1a80:	00 0c       	add	r0, r0
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <__fp_round+0xc>
    1a84:	88 23       	and	r24, r24
    1a86:	52 f0       	brmi	.+20     	; 0x1a9c <__fp_round+0x20>
    1a88:	bb 0f       	add	r27, r27
    1a8a:	40 f4       	brcc	.+16     	; 0x1a9c <__fp_round+0x20>
    1a8c:	bf 2b       	or	r27, r31
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <__fp_round+0x18>
    1a90:	60 ff       	sbrs	r22, 0
    1a92:	04 c0       	rjmp	.+8      	; 0x1a9c <__fp_round+0x20>
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	08 95       	ret

00001a9e <__fp_split3>:
    1a9e:	57 fd       	sbrc	r21, 7
    1aa0:	90 58       	subi	r25, 0x80	; 128
    1aa2:	44 0f       	add	r20, r20
    1aa4:	55 1f       	adc	r21, r21
    1aa6:	59 f0       	breq	.+22     	; 0x1abe <__fp_splitA+0x10>
    1aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <__fp_splitA+0x1a>
    1aac:	47 95       	ror	r20

00001aae <__fp_splitA>:
    1aae:	88 0f       	add	r24, r24
    1ab0:	97 fb       	bst	r25, 7
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <__fp_splitA+0x20>
    1ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab8:	79 f0       	breq	.+30     	; 0x1ad8 <__fp_splitA+0x2a>
    1aba:	87 95       	ror	r24
    1abc:	08 95       	ret
    1abe:	12 16       	cp	r1, r18
    1ac0:	13 06       	cpc	r1, r19
    1ac2:	14 06       	cpc	r1, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	f2 cf       	rjmp	.-28     	; 0x1aac <__fp_split3+0xe>
    1ac8:	46 95       	lsr	r20
    1aca:	f1 df       	rcall	.-30     	; 0x1aae <__fp_splitA>
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <__fp_splitA+0x30>
    1ace:	16 16       	cp	r1, r22
    1ad0:	17 06       	cpc	r1, r23
    1ad2:	18 06       	cpc	r1, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	f1 cf       	rjmp	.-30     	; 0x1aba <__fp_splitA+0xc>
    1ad8:	86 95       	lsr	r24
    1ada:	71 05       	cpc	r23, r1
    1adc:	61 05       	cpc	r22, r1
    1ade:	08 94       	sec
    1ae0:	08 95       	ret

00001ae2 <__fp_zero>:
    1ae2:	e8 94       	clt

00001ae4 <__fp_szero>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	66 27       	eor	r22, r22
    1ae8:	77 27       	eor	r23, r23
    1aea:	cb 01       	movw	r24, r22
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret

00001af0 <__mulsf3>:
    1af0:	0b d0       	rcall	.+22     	; 0x1b08 <__mulsf3x>
    1af2:	c4 cf       	rjmp	.-120    	; 0x1a7c <__fp_round>
    1af4:	b5 df       	rcall	.-150    	; 0x1a60 <__fp_pscA>
    1af6:	28 f0       	brcs	.+10     	; 0x1b02 <__mulsf3+0x12>
    1af8:	ba df       	rcall	.-140    	; 0x1a6e <__fp_pscB>
    1afa:	18 f0       	brcs	.+6      	; 0x1b02 <__mulsf3+0x12>
    1afc:	95 23       	and	r25, r21
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <__mulsf3+0x12>
    1b00:	a6 cf       	rjmp	.-180    	; 0x1a4e <__fp_inf>
    1b02:	ab cf       	rjmp	.-170    	; 0x1a5a <__fp_nan>
    1b04:	11 24       	eor	r1, r1
    1b06:	ee cf       	rjmp	.-36     	; 0x1ae4 <__fp_szero>

00001b08 <__mulsf3x>:
    1b08:	ca df       	rcall	.-108    	; 0x1a9e <__fp_split3>
    1b0a:	a0 f3       	brcs	.-24     	; 0x1af4 <__mulsf3+0x4>

00001b0c <__mulsf3_pse>:
    1b0c:	95 9f       	mul	r25, r21
    1b0e:	d1 f3       	breq	.-12     	; 0x1b04 <__mulsf3+0x14>
    1b10:	95 0f       	add	r25, r21
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	55 1f       	adc	r21, r21
    1b16:	62 9f       	mul	r22, r18
    1b18:	f0 01       	movw	r30, r0
    1b1a:	72 9f       	mul	r23, r18
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	f0 0d       	add	r31, r0
    1b20:	b1 1d       	adc	r27, r1
    1b22:	63 9f       	mul	r22, r19
    1b24:	aa 27       	eor	r26, r26
    1b26:	f0 0d       	add	r31, r0
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	64 9f       	mul	r22, r20
    1b2e:	66 27       	eor	r22, r22
    1b30:	b0 0d       	add	r27, r0
    1b32:	a1 1d       	adc	r26, r1
    1b34:	66 1f       	adc	r22, r22
    1b36:	82 9f       	mul	r24, r18
    1b38:	22 27       	eor	r18, r18
    1b3a:	b0 0d       	add	r27, r0
    1b3c:	a1 1d       	adc	r26, r1
    1b3e:	62 1f       	adc	r22, r18
    1b40:	73 9f       	mul	r23, r19
    1b42:	b0 0d       	add	r27, r0
    1b44:	a1 1d       	adc	r26, r1
    1b46:	62 1f       	adc	r22, r18
    1b48:	83 9f       	mul	r24, r19
    1b4a:	a0 0d       	add	r26, r0
    1b4c:	61 1d       	adc	r22, r1
    1b4e:	22 1f       	adc	r18, r18
    1b50:	74 9f       	mul	r23, r20
    1b52:	33 27       	eor	r19, r19
    1b54:	a0 0d       	add	r26, r0
    1b56:	61 1d       	adc	r22, r1
    1b58:	23 1f       	adc	r18, r19
    1b5a:	84 9f       	mul	r24, r20
    1b5c:	60 0d       	add	r22, r0
    1b5e:	21 1d       	adc	r18, r1
    1b60:	82 2f       	mov	r24, r18
    1b62:	76 2f       	mov	r23, r22
    1b64:	6a 2f       	mov	r22, r26
    1b66:	11 24       	eor	r1, r1
    1b68:	9f 57       	subi	r25, 0x7F	; 127
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	8a f0       	brmi	.+34     	; 0x1b90 <__mulsf3_pse+0x84>
    1b6e:	e1 f0       	breq	.+56     	; 0x1ba8 <__mulsf3_pse+0x9c>
    1b70:	88 23       	and	r24, r24
    1b72:	4a f0       	brmi	.+18     	; 0x1b86 <__mulsf3_pse+0x7a>
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	66 1f       	adc	r22, r22
    1b7c:	77 1f       	adc	r23, r23
    1b7e:	88 1f       	adc	r24, r24
    1b80:	91 50       	subi	r25, 0x01	; 1
    1b82:	50 40       	sbci	r21, 0x00	; 0
    1b84:	a9 f7       	brne	.-22     	; 0x1b70 <__mulsf3_pse+0x64>
    1b86:	9e 3f       	cpi	r25, 0xFE	; 254
    1b88:	51 05       	cpc	r21, r1
    1b8a:	70 f0       	brcs	.+28     	; 0x1ba8 <__mulsf3_pse+0x9c>
    1b8c:	60 cf       	rjmp	.-320    	; 0x1a4e <__fp_inf>
    1b8e:	aa cf       	rjmp	.-172    	; 0x1ae4 <__fp_szero>
    1b90:	5f 3f       	cpi	r21, 0xFF	; 255
    1b92:	ec f3       	brlt	.-6      	; 0x1b8e <__mulsf3_pse+0x82>
    1b94:	98 3e       	cpi	r25, 0xE8	; 232
    1b96:	dc f3       	brlt	.-10     	; 0x1b8e <__mulsf3_pse+0x82>
    1b98:	86 95       	lsr	r24
    1b9a:	77 95       	ror	r23
    1b9c:	67 95       	ror	r22
    1b9e:	b7 95       	ror	r27
    1ba0:	f7 95       	ror	r31
    1ba2:	e7 95       	ror	r30
    1ba4:	9f 5f       	subi	r25, 0xFF	; 255
    1ba6:	c1 f7       	brne	.-16     	; 0x1b98 <__mulsf3_pse+0x8c>
    1ba8:	fe 2b       	or	r31, r30
    1baa:	88 0f       	add	r24, r24
    1bac:	91 1d       	adc	r25, r1
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	97 f9       	bld	r25, 7
    1bb4:	08 95       	ret

00001bb6 <vfprintf>:
    1bb6:	2f 92       	push	r2
    1bb8:	3f 92       	push	r3
    1bba:	4f 92       	push	r4
    1bbc:	5f 92       	push	r5
    1bbe:	6f 92       	push	r6
    1bc0:	7f 92       	push	r7
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	63 97       	sbiw	r28, 0x13	; 19
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	7c 01       	movw	r14, r24
    1bec:	1b 01       	movw	r2, r22
    1bee:	6a 01       	movw	r12, r20
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	17 82       	std	Z+7, r1	; 0x07
    1bf4:	16 82       	std	Z+6, r1	; 0x06
    1bf6:	83 81       	ldd	r24, Z+3	; 0x03
    1bf8:	81 ff       	sbrs	r24, 1
    1bfa:	49 c3       	rjmp	.+1682   	; 0x228e <vfprintf+0x6d8>
    1bfc:	be 01       	movw	r22, r28
    1bfe:	6f 5f       	subi	r22, 0xFF	; 255
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	4b 01       	movw	r8, r22
    1c04:	f7 01       	movw	r30, r14
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	f1 01       	movw	r30, r2
    1c0a:	93 fd       	sbrc	r25, 3
    1c0c:	85 91       	lpm	r24, Z+
    1c0e:	93 ff       	sbrs	r25, 3
    1c10:	81 91       	ld	r24, Z+
    1c12:	1f 01       	movw	r2, r30
    1c14:	88 23       	and	r24, r24
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <vfprintf+0x64>
    1c18:	36 c3       	rjmp	.+1644   	; 0x2286 <vfprintf+0x6d0>
    1c1a:	85 32       	cpi	r24, 0x25	; 37
    1c1c:	39 f4       	brne	.+14     	; 0x1c2c <vfprintf+0x76>
    1c1e:	93 fd       	sbrc	r25, 3
    1c20:	85 91       	lpm	r24, Z+
    1c22:	93 ff       	sbrs	r25, 3
    1c24:	81 91       	ld	r24, Z+
    1c26:	1f 01       	movw	r2, r30
    1c28:	85 32       	cpi	r24, 0x25	; 37
    1c2a:	31 f4       	brne	.+12     	; 0x1c38 <vfprintf+0x82>
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	4c d4       	rcall	.+2200   	; 0x24ca <fputc>
    1c32:	56 01       	movw	r10, r12
    1c34:	65 01       	movw	r12, r10
    1c36:	e6 cf       	rjmp	.-52     	; 0x1c04 <vfprintf+0x4e>
    1c38:	10 e0       	ldi	r17, 0x00	; 0
    1c3a:	51 2c       	mov	r5, r1
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	20 32       	cpi	r18, 0x20	; 32
    1c40:	a0 f4       	brcc	.+40     	; 0x1c6a <vfprintf+0xb4>
    1c42:	8b 32       	cpi	r24, 0x2B	; 43
    1c44:	69 f0       	breq	.+26     	; 0x1c60 <vfprintf+0xaa>
    1c46:	30 f4       	brcc	.+12     	; 0x1c54 <vfprintf+0x9e>
    1c48:	80 32       	cpi	r24, 0x20	; 32
    1c4a:	59 f0       	breq	.+22     	; 0x1c62 <vfprintf+0xac>
    1c4c:	83 32       	cpi	r24, 0x23	; 35
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <vfprintf+0xb4>
    1c50:	20 61       	ori	r18, 0x10	; 16
    1c52:	2c c0       	rjmp	.+88     	; 0x1cac <vfprintf+0xf6>
    1c54:	8d 32       	cpi	r24, 0x2D	; 45
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <vfprintf+0xb0>
    1c58:	80 33       	cpi	r24, 0x30	; 48
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <vfprintf+0xb4>
    1c5c:	21 60       	ori	r18, 0x01	; 1
    1c5e:	26 c0       	rjmp	.+76     	; 0x1cac <vfprintf+0xf6>
    1c60:	22 60       	ori	r18, 0x02	; 2
    1c62:	24 60       	ori	r18, 0x04	; 4
    1c64:	23 c0       	rjmp	.+70     	; 0x1cac <vfprintf+0xf6>
    1c66:	28 60       	ori	r18, 0x08	; 8
    1c68:	21 c0       	rjmp	.+66     	; 0x1cac <vfprintf+0xf6>
    1c6a:	27 fd       	sbrc	r18, 7
    1c6c:	27 c0       	rjmp	.+78     	; 0x1cbc <vfprintf+0x106>
    1c6e:	30 ed       	ldi	r19, 0xD0	; 208
    1c70:	38 0f       	add	r19, r24
    1c72:	3a 30       	cpi	r19, 0x0A	; 10
    1c74:	78 f4       	brcc	.+30     	; 0x1c94 <vfprintf+0xde>
    1c76:	26 ff       	sbrs	r18, 6
    1c78:	06 c0       	rjmp	.+12     	; 0x1c86 <vfprintf+0xd0>
    1c7a:	fa e0       	ldi	r31, 0x0A	; 10
    1c7c:	1f 9f       	mul	r17, r31
    1c7e:	30 0d       	add	r19, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	13 2f       	mov	r17, r19
    1c84:	13 c0       	rjmp	.+38     	; 0x1cac <vfprintf+0xf6>
    1c86:	6a e0       	ldi	r22, 0x0A	; 10
    1c88:	56 9e       	mul	r5, r22
    1c8a:	30 0d       	add	r19, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	53 2e       	mov	r5, r19
    1c90:	20 62       	ori	r18, 0x20	; 32
    1c92:	0c c0       	rjmp	.+24     	; 0x1cac <vfprintf+0xf6>
    1c94:	8e 32       	cpi	r24, 0x2E	; 46
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <vfprintf+0xea>
    1c98:	26 fd       	sbrc	r18, 6
    1c9a:	f5 c2       	rjmp	.+1514   	; 0x2286 <vfprintf+0x6d0>
    1c9c:	20 64       	ori	r18, 0x40	; 64
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0xf6>
    1ca0:	8c 36       	cpi	r24, 0x6C	; 108
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <vfprintf+0xf2>
    1ca4:	20 68       	ori	r18, 0x80	; 128
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0xf6>
    1ca8:	88 36       	cpi	r24, 0x68	; 104
    1caa:	41 f4       	brne	.+16     	; 0x1cbc <vfprintf+0x106>
    1cac:	f1 01       	movw	r30, r2
    1cae:	93 fd       	sbrc	r25, 3
    1cb0:	85 91       	lpm	r24, Z+
    1cb2:	93 ff       	sbrs	r25, 3
    1cb4:	81 91       	ld	r24, Z+
    1cb6:	1f 01       	movw	r2, r30
    1cb8:	81 11       	cpse	r24, r1
    1cba:	c1 cf       	rjmp	.-126    	; 0x1c3e <vfprintf+0x88>
    1cbc:	9b eb       	ldi	r25, 0xBB	; 187
    1cbe:	98 0f       	add	r25, r24
    1cc0:	93 30       	cpi	r25, 0x03	; 3
    1cc2:	18 f4       	brcc	.+6      	; 0x1cca <vfprintf+0x114>
    1cc4:	20 61       	ori	r18, 0x10	; 16
    1cc6:	80 5e       	subi	r24, 0xE0	; 224
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <vfprintf+0x120>
    1cca:	9b e9       	ldi	r25, 0x9B	; 155
    1ccc:	98 0f       	add	r25, r24
    1cce:	93 30       	cpi	r25, 0x03	; 3
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <vfprintf+0x11e>
    1cd2:	9a c1       	rjmp	.+820    	; 0x2008 <vfprintf+0x452>
    1cd4:	2f 7e       	andi	r18, 0xEF	; 239
    1cd6:	26 ff       	sbrs	r18, 6
    1cd8:	16 e0       	ldi	r17, 0x06	; 6
    1cda:	2f 73       	andi	r18, 0x3F	; 63
    1cdc:	72 2e       	mov	r7, r18
    1cde:	85 36       	cpi	r24, 0x65	; 101
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <vfprintf+0x134>
    1ce2:	f2 2f       	mov	r31, r18
    1ce4:	f0 64       	ori	r31, 0x40	; 64
    1ce6:	7f 2e       	mov	r7, r31
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x144>
    1cea:	86 36       	cpi	r24, 0x66	; 102
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <vfprintf+0x140>
    1cee:	62 2f       	mov	r22, r18
    1cf0:	60 68       	ori	r22, 0x80	; 128
    1cf2:	76 2e       	mov	r7, r22
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vfprintf+0x144>
    1cf6:	11 11       	cpse	r17, r1
    1cf8:	11 50       	subi	r17, 0x01	; 1
    1cfa:	77 fe       	sbrs	r7, 7
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <vfprintf+0x156>
    1cfe:	1c 33       	cpi	r17, 0x3C	; 60
    1d00:	48 f4       	brcc	.+18     	; 0x1d14 <vfprintf+0x15e>
    1d02:	44 24       	eor	r4, r4
    1d04:	43 94       	inc	r4
    1d06:	41 0e       	add	r4, r17
    1d08:	27 e0       	ldi	r18, 0x07	; 7
    1d0a:	0b c0       	rjmp	.+22     	; 0x1d22 <vfprintf+0x16c>
    1d0c:	18 30       	cpi	r17, 0x08	; 8
    1d0e:	30 f4       	brcc	.+12     	; 0x1d1c <vfprintf+0x166>
    1d10:	21 2f       	mov	r18, r17
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfprintf+0x16a>
    1d14:	27 e0       	ldi	r18, 0x07	; 7
    1d16:	4c e3       	ldi	r20, 0x3C	; 60
    1d18:	44 2e       	mov	r4, r20
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <vfprintf+0x16c>
    1d1c:	27 e0       	ldi	r18, 0x07	; 7
    1d1e:	17 e0       	ldi	r17, 0x07	; 7
    1d20:	41 2c       	mov	r4, r1
    1d22:	56 01       	movw	r10, r12
    1d24:	74 e0       	ldi	r23, 0x04	; 4
    1d26:	a7 0e       	add	r10, r23
    1d28:	b1 1c       	adc	r11, r1
    1d2a:	f6 01       	movw	r30, r12
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	04 2d       	mov	r16, r4
    1d36:	a4 01       	movw	r20, r8
    1d38:	da d2       	rcall	.+1460   	; 0x22ee <__ftoa_engine>
    1d3a:	6c 01       	movw	r12, r24
    1d3c:	09 81       	ldd	r16, Y+1	; 0x01
    1d3e:	00 ff       	sbrs	r16, 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x190>
    1d42:	03 ff       	sbrs	r16, 3
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <vfprintf+0x19c>
    1d46:	71 fc       	sbrc	r7, 1
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <vfprintf+0x1a2>
    1d4a:	72 fc       	sbrc	r7, 2
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <vfprintf+0x1a8>
    1d4e:	61 2c       	mov	r6, r1
    1d50:	08 c0       	rjmp	.+16     	; 0x1d62 <vfprintf+0x1ac>
    1d52:	3d e2       	ldi	r19, 0x2D	; 45
    1d54:	63 2e       	mov	r6, r19
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <vfprintf+0x1ac>
    1d58:	2b e2       	ldi	r18, 0x2B	; 43
    1d5a:	62 2e       	mov	r6, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <vfprintf+0x1ac>
    1d5e:	90 e2       	ldi	r25, 0x20	; 32
    1d60:	69 2e       	mov	r6, r25
    1d62:	80 2f       	mov	r24, r16
    1d64:	8c 70       	andi	r24, 0x0C	; 12
    1d66:	81 f1       	breq	.+96     	; 0x1dc8 <vfprintf+0x212>
    1d68:	66 20       	and	r6, r6
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <vfprintf+0x1ba>
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <vfprintf+0x1bc>
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	85 15       	cp	r24, r5
    1d74:	10 f0       	brcs	.+4      	; 0x1d7a <vfprintf+0x1c4>
    1d76:	51 2c       	mov	r5, r1
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <vfprintf+0x1d8>
    1d7a:	58 1a       	sub	r5, r24
    1d7c:	73 fc       	sbrc	r7, 3
    1d7e:	07 c0       	rjmp	.+14     	; 0x1d8e <vfprintf+0x1d8>
    1d80:	b7 01       	movw	r22, r14
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a1 d3       	rcall	.+1858   	; 0x24ca <fputc>
    1d88:	5a 94       	dec	r5
    1d8a:	d1 f7       	brne	.-12     	; 0x1d80 <vfprintf+0x1ca>
    1d8c:	f4 cf       	rjmp	.-24     	; 0x1d76 <vfprintf+0x1c0>
    1d8e:	66 20       	and	r6, r6
    1d90:	21 f0       	breq	.+8      	; 0x1d9a <vfprintf+0x1e4>
    1d92:	b7 01       	movw	r22, r14
    1d94:	86 2d       	mov	r24, r6
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	98 d3       	rcall	.+1840   	; 0x24ca <fputc>
    1d9a:	03 fd       	sbrc	r16, 3
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <vfprintf+0x1ee>
    1d9e:	00 ea       	ldi	r16, 0xA0	; 160
    1da0:	10 e0       	ldi	r17, 0x00	; 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x1f2>
    1da4:	0c e9       	ldi	r16, 0x9C	; 156
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	f7 2d       	mov	r31, r7
    1daa:	f0 71       	andi	r31, 0x10	; 16
    1dac:	7f 2e       	mov	r7, r31
    1dae:	f8 01       	movw	r30, r16
    1db0:	84 91       	lpm	r24, Z
    1db2:	88 23       	and	r24, r24
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <vfprintf+0x202>
    1db6:	5e c2       	rjmp	.+1212   	; 0x2274 <vfprintf+0x6be>
    1db8:	71 10       	cpse	r7, r1
    1dba:	80 52       	subi	r24, 0x20	; 32
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	84 d3       	rcall	.+1800   	; 0x24ca <fputc>
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	f3 cf       	rjmp	.-26     	; 0x1dae <vfprintf+0x1f8>
    1dc8:	77 fe       	sbrs	r7, 7
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <vfprintf+0x234>
    1dcc:	4c 0c       	add	r4, r12
    1dce:	04 ff       	sbrs	r16, 4
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <vfprintf+0x224>
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	81 33       	cpi	r24, 0x31	; 49
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <vfprintf+0x224>
    1dd8:	4a 94       	dec	r4
    1dda:	14 14       	cp	r1, r4
    1ddc:	74 f5       	brge	.+92     	; 0x1e3a <vfprintf+0x284>
    1dde:	f8 e0       	ldi	r31, 0x08	; 8
    1de0:	f4 15       	cp	r31, r4
    1de2:	78 f5       	brcc	.+94     	; 0x1e42 <vfprintf+0x28c>
    1de4:	88 e0       	ldi	r24, 0x08	; 8
    1de6:	48 2e       	mov	r4, r24
    1de8:	2c c0       	rjmp	.+88     	; 0x1e42 <vfprintf+0x28c>
    1dea:	76 fc       	sbrc	r7, 6
    1dec:	2a c0       	rjmp	.+84     	; 0x1e42 <vfprintf+0x28c>
    1dee:	81 2f       	mov	r24, r17
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	8c 15       	cp	r24, r12
    1df4:	9d 05       	cpc	r25, r13
    1df6:	9c f0       	brlt	.+38     	; 0x1e1e <vfprintf+0x268>
    1df8:	6c ef       	ldi	r22, 0xFC	; 252
    1dfa:	c6 16       	cp	r12, r22
    1dfc:	6f ef       	ldi	r22, 0xFF	; 255
    1dfe:	d6 06       	cpc	r13, r22
    1e00:	74 f0       	brlt	.+28     	; 0x1e1e <vfprintf+0x268>
    1e02:	77 2d       	mov	r23, r7
    1e04:	70 68       	ori	r23, 0x80	; 128
    1e06:	77 2e       	mov	r7, r23
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <vfprintf+0x268>
    1e0a:	e2 e0       	ldi	r30, 0x02	; 2
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	ec 0f       	add	r30, r28
    1e10:	fd 1f       	adc	r31, r29
    1e12:	e1 0f       	add	r30, r17
    1e14:	f1 1d       	adc	r31, r1
    1e16:	80 81       	ld	r24, Z
    1e18:	80 33       	cpi	r24, 0x30	; 48
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <vfprintf+0x26c>
    1e1c:	11 50       	subi	r17, 0x01	; 1
    1e1e:	11 11       	cpse	r17, r1
    1e20:	f4 cf       	rjmp	.-24     	; 0x1e0a <vfprintf+0x254>
    1e22:	77 fe       	sbrs	r7, 7
    1e24:	0e c0       	rjmp	.+28     	; 0x1e42 <vfprintf+0x28c>
    1e26:	44 24       	eor	r4, r4
    1e28:	43 94       	inc	r4
    1e2a:	41 0e       	add	r4, r17
    1e2c:	81 2f       	mov	r24, r17
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	c8 16       	cp	r12, r24
    1e32:	d9 06       	cpc	r13, r25
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <vfprintf+0x28a>
    1e36:	1c 19       	sub	r17, r12
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <vfprintf+0x28c>
    1e3a:	44 24       	eor	r4, r4
    1e3c:	43 94       	inc	r4
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <vfprintf+0x28c>
    1e40:	10 e0       	ldi	r17, 0x00	; 0
    1e42:	77 fe       	sbrs	r7, 7
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <vfprintf+0x29e>
    1e46:	1c 14       	cp	r1, r12
    1e48:	1d 04       	cpc	r1, r13
    1e4a:	3c f4       	brge	.+14     	; 0x1e5a <vfprintf+0x2a4>
    1e4c:	96 01       	movw	r18, r12
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <vfprintf+0x2a8>
    1e54:	25 e0       	ldi	r18, 0x05	; 5
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <vfprintf+0x2a8>
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	66 20       	and	r6, r6
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <vfprintf+0x2b0>
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	11 23       	and	r17, r17
    1e68:	31 f0       	breq	.+12     	; 0x1e76 <vfprintf+0x2c0>
    1e6a:	41 2f       	mov	r20, r17
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	4f 5f       	subi	r20, 0xFF	; 255
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	24 0f       	add	r18, r20
    1e74:	35 1f       	adc	r19, r21
    1e76:	45 2d       	mov	r20, r5
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	24 17       	cp	r18, r20
    1e7c:	35 07       	cpc	r19, r21
    1e7e:	14 f4       	brge	.+4      	; 0x1e84 <vfprintf+0x2ce>
    1e80:	52 1a       	sub	r5, r18
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <vfprintf+0x2d0>
    1e84:	51 2c       	mov	r5, r1
    1e86:	87 2d       	mov	r24, r7
    1e88:	89 70       	andi	r24, 0x09	; 9
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <vfprintf+0x2e6>
    1e8c:	55 20       	and	r5, r5
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <vfprintf+0x2e6>
    1e90:	b7 01       	movw	r22, r14
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	19 d3       	rcall	.+1586   	; 0x24ca <fputc>
    1e98:	5a 94       	dec	r5
    1e9a:	f8 cf       	rjmp	.-16     	; 0x1e8c <vfprintf+0x2d6>
    1e9c:	66 20       	and	r6, r6
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <vfprintf+0x2f2>
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	86 2d       	mov	r24, r6
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	11 d3       	rcall	.+1570   	; 0x24ca <fputc>
    1ea8:	73 fc       	sbrc	r7, 3
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <vfprintf+0x306>
    1eac:	55 20       	and	r5, r5
    1eae:	31 f0       	breq	.+12     	; 0x1ebc <vfprintf+0x306>
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	80 e3       	ldi	r24, 0x30	; 48
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	09 d3       	rcall	.+1554   	; 0x24ca <fputc>
    1eb8:	5a 94       	dec	r5
    1eba:	f8 cf       	rjmp	.-16     	; 0x1eac <vfprintf+0x2f6>
    1ebc:	77 fe       	sbrs	r7, 7
    1ebe:	5d c0       	rjmp	.+186    	; 0x1f7a <vfprintf+0x3c4>
    1ec0:	9c 2d       	mov	r25, r12
    1ec2:	8d 2d       	mov	r24, r13
    1ec4:	d7 fe       	sbrs	r13, 7
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <vfprintf+0x316>
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	69 2e       	mov	r6, r25
    1ece:	78 2e       	mov	r7, r24
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	c6 01       	movw	r24, r12
    1ed6:	84 19       	sub	r24, r4
    1ed8:	91 09       	sbc	r25, r1
    1eda:	9d 87       	std	Y+13, r25	; 0x0d
    1edc:	8c 87       	std	Y+12, r24	; 0x0c
    1ede:	96 01       	movw	r18, r12
    1ee0:	26 19       	sub	r18, r6
    1ee2:	37 09       	sbc	r19, r7
    1ee4:	28 0d       	add	r18, r8
    1ee6:	39 1d       	adc	r19, r9
    1ee8:	81 2f       	mov	r24, r17
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	ee 27       	eor	r30, r30
    1eee:	ff 27       	eor	r31, r31
    1ef0:	e8 1b       	sub	r30, r24
    1ef2:	f9 0b       	sbc	r31, r25
    1ef4:	ff 87       	std	Y+15, r31	; 0x0f
    1ef6:	ee 87       	std	Y+14, r30	; 0x0e
    1ef8:	ff ef       	ldi	r31, 0xFF	; 255
    1efa:	6f 16       	cp	r6, r31
    1efc:	7f 06       	cpc	r7, r31
    1efe:	61 f4       	brne	.+24     	; 0x1f18 <vfprintf+0x362>
    1f00:	b7 01       	movw	r22, r14
    1f02:	8e e2       	ldi	r24, 0x2E	; 46
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	2b 8b       	std	Y+19, r18	; 0x13
    1f08:	3a 8b       	std	Y+18, r19	; 0x12
    1f0a:	48 8b       	std	Y+16, r20	; 0x10
    1f0c:	59 8b       	std	Y+17, r21	; 0x11
    1f0e:	dd d2       	rcall	.+1466   	; 0x24ca <fputc>
    1f10:	59 89       	ldd	r21, Y+17	; 0x11
    1f12:	48 89       	ldd	r20, Y+16	; 0x10
    1f14:	3a 89       	ldd	r19, Y+18	; 0x12
    1f16:	2b 89       	ldd	r18, Y+19	; 0x13
    1f18:	c6 14       	cp	r12, r6
    1f1a:	d7 04       	cpc	r13, r7
    1f1c:	54 f0       	brlt	.+20     	; 0x1f32 <vfprintf+0x37c>
    1f1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f22:	66 15       	cp	r22, r6
    1f24:	77 05       	cpc	r23, r7
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <vfprintf+0x37c>
    1f28:	f9 01       	movw	r30, r18
    1f2a:	e4 0f       	add	r30, r20
    1f2c:	f5 1f       	adc	r31, r21
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <vfprintf+0x37e>
    1f32:	80 e3       	ldi	r24, 0x30	; 48
    1f34:	71 e0       	ldi	r23, 0x01	; 1
    1f36:	67 1a       	sub	r6, r23
    1f38:	71 08       	sbc	r7, r1
    1f3a:	4f 5f       	subi	r20, 0xFF	; 255
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f40:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f42:	6e 16       	cp	r6, r30
    1f44:	7f 06       	cpc	r7, r31
    1f46:	64 f0       	brlt	.+24     	; 0x1f60 <vfprintf+0x3aa>
    1f48:	b7 01       	movw	r22, r14
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	2b 8b       	std	Y+19, r18	; 0x13
    1f4e:	3a 8b       	std	Y+18, r19	; 0x12
    1f50:	48 8b       	std	Y+16, r20	; 0x10
    1f52:	59 8b       	std	Y+17, r21	; 0x11
    1f54:	ba d2       	rcall	.+1396   	; 0x24ca <fputc>
    1f56:	2b 89       	ldd	r18, Y+19	; 0x13
    1f58:	3a 89       	ldd	r19, Y+18	; 0x12
    1f5a:	48 89       	ldd	r20, Y+16	; 0x10
    1f5c:	59 89       	ldd	r21, Y+17	; 0x11
    1f5e:	cc cf       	rjmp	.-104    	; 0x1ef8 <vfprintf+0x342>
    1f60:	6c 14       	cp	r6, r12
    1f62:	7d 04       	cpc	r7, r13
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <vfprintf+0x3be>
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	96 33       	cpi	r25, 0x36	; 54
    1f6a:	18 f4       	brcc	.+6      	; 0x1f72 <vfprintf+0x3bc>
    1f6c:	95 33       	cpi	r25, 0x35	; 53
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <vfprintf+0x3be>
    1f70:	04 ff       	sbrs	r16, 4
    1f72:	81 e3       	ldi	r24, 0x31	; 49
    1f74:	b7 01       	movw	r22, r14
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	45 c0       	rjmp	.+138    	; 0x2004 <vfprintf+0x44e>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	81 33       	cpi	r24, 0x31	; 49
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <vfprintf+0x3cc>
    1f80:	0f 7e       	andi	r16, 0xEF	; 239
    1f82:	b7 01       	movw	r22, r14
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a1 d2       	rcall	.+1346   	; 0x24ca <fputc>
    1f88:	11 11       	cpse	r17, r1
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <vfprintf+0x3e0>
    1f8c:	74 fe       	sbrs	r7, 4
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <vfprintf+0x406>
    1f90:	85 e4       	ldi	r24, 0x45	; 69
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	15 c0       	rjmp	.+42     	; 0x1fc0 <vfprintf+0x40a>
    1f96:	b7 01       	movw	r22, r14
    1f98:	8e e2       	ldi	r24, 0x2E	; 46
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	96 d2       	rcall	.+1324   	; 0x24ca <fputc>
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	66 24       	eor	r6, r6
    1fa2:	63 94       	inc	r6
    1fa4:	68 0e       	add	r6, r24
    1fa6:	f4 01       	movw	r30, r8
    1fa8:	e8 0f       	add	r30, r24
    1faa:	f1 1d       	adc	r31, r1
    1fac:	80 81       	ld	r24, Z
    1fae:	b7 01       	movw	r22, r14
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	8b d2       	rcall	.+1302   	; 0x24ca <fputc>
    1fb4:	11 50       	subi	r17, 0x01	; 1
    1fb6:	51 f3       	breq	.-44     	; 0x1f8c <vfprintf+0x3d6>
    1fb8:	86 2d       	mov	r24, r6
    1fba:	f2 cf       	rjmp	.-28     	; 0x1fa0 <vfprintf+0x3ea>
    1fbc:	85 e6       	ldi	r24, 0x65	; 101
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b7 01       	movw	r22, r14
    1fc2:	83 d2       	rcall	.+1286   	; 0x24ca <fputc>
    1fc4:	d7 fc       	sbrc	r13, 7
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <vfprintf+0x41c>
    1fc8:	c1 14       	cp	r12, r1
    1fca:	d1 04       	cpc	r13, r1
    1fcc:	39 f4       	brne	.+14     	; 0x1fdc <vfprintf+0x426>
    1fce:	04 ff       	sbrs	r16, 4
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <vfprintf+0x426>
    1fd2:	d1 94       	neg	r13
    1fd4:	c1 94       	neg	r12
    1fd6:	d1 08       	sbc	r13, r1
    1fd8:	8d e2       	ldi	r24, 0x2D	; 45
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <vfprintf+0x428>
    1fdc:	8b e2       	ldi	r24, 0x2B	; 43
    1fde:	b7 01       	movw	r22, r14
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	73 d2       	rcall	.+1254   	; 0x24ca <fputc>
    1fe4:	80 e3       	ldi	r24, 0x30	; 48
    1fe6:	6a e0       	ldi	r22, 0x0A	; 10
    1fe8:	c6 16       	cp	r12, r22
    1fea:	d1 04       	cpc	r13, r1
    1fec:	2c f0       	brlt	.+10     	; 0x1ff8 <vfprintf+0x442>
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	fa e0       	ldi	r31, 0x0A	; 10
    1ff2:	cf 1a       	sub	r12, r31
    1ff4:	d1 08       	sbc	r13, r1
    1ff6:	f7 cf       	rjmp	.-18     	; 0x1fe6 <vfprintf+0x430>
    1ff8:	b7 01       	movw	r22, r14
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	66 d2       	rcall	.+1228   	; 0x24ca <fputc>
    1ffe:	b7 01       	movw	r22, r14
    2000:	c6 01       	movw	r24, r12
    2002:	c0 96       	adiw	r24, 0x30	; 48
    2004:	62 d2       	rcall	.+1220   	; 0x24ca <fputc>
    2006:	36 c1       	rjmp	.+620    	; 0x2274 <vfprintf+0x6be>
    2008:	83 36       	cpi	r24, 0x63	; 99
    200a:	31 f0       	breq	.+12     	; 0x2018 <vfprintf+0x462>
    200c:	83 37       	cpi	r24, 0x73	; 115
    200e:	79 f0       	breq	.+30     	; 0x202e <vfprintf+0x478>
    2010:	83 35       	cpi	r24, 0x53	; 83
    2012:	09 f0       	breq	.+2      	; 0x2016 <vfprintf+0x460>
    2014:	54 c0       	rjmp	.+168    	; 0x20be <vfprintf+0x508>
    2016:	20 c0       	rjmp	.+64     	; 0x2058 <vfprintf+0x4a2>
    2018:	56 01       	movw	r10, r12
    201a:	72 e0       	ldi	r23, 0x02	; 2
    201c:	a7 0e       	add	r10, r23
    201e:	b1 1c       	adc	r11, r1
    2020:	f6 01       	movw	r30, r12
    2022:	80 81       	ld	r24, Z
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	01 e0       	ldi	r16, 0x01	; 1
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	64 01       	movw	r12, r8
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <vfprintf+0x49e>
    202e:	56 01       	movw	r10, r12
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	af 0e       	add	r10, r31
    2034:	b1 1c       	adc	r11, r1
    2036:	f6 01       	movw	r30, r12
    2038:	c0 80       	ld	r12, Z
    203a:	d1 80       	ldd	r13, Z+1	; 0x01
    203c:	26 ff       	sbrs	r18, 6
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <vfprintf+0x490>
    2040:	61 2f       	mov	r22, r17
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0x494>
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	7f ef       	ldi	r23, 0xFF	; 255
    204a:	c6 01       	movw	r24, r12
    204c:	2b 8b       	std	Y+19, r18	; 0x13
    204e:	32 d2       	rcall	.+1124   	; 0x24b4 <strnlen>
    2050:	8c 01       	movw	r16, r24
    2052:	2b 89       	ldd	r18, Y+19	; 0x13
    2054:	2f 77       	andi	r18, 0x7F	; 127
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <vfprintf+0x4ca>
    2058:	56 01       	movw	r10, r12
    205a:	f2 e0       	ldi	r31, 0x02	; 2
    205c:	af 0e       	add	r10, r31
    205e:	b1 1c       	adc	r11, r1
    2060:	f6 01       	movw	r30, r12
    2062:	c0 80       	ld	r12, Z
    2064:	d1 80       	ldd	r13, Z+1	; 0x01
    2066:	26 ff       	sbrs	r18, 6
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <vfprintf+0x4ba>
    206a:	61 2f       	mov	r22, r17
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <vfprintf+0x4be>
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	7f ef       	ldi	r23, 0xFF	; 255
    2074:	c6 01       	movw	r24, r12
    2076:	2b 8b       	std	Y+19, r18	; 0x13
    2078:	12 d2       	rcall	.+1060   	; 0x249e <strnlen_P>
    207a:	8c 01       	movw	r16, r24
    207c:	2b 89       	ldd	r18, Y+19	; 0x13
    207e:	20 68       	ori	r18, 0x80	; 128
    2080:	72 2e       	mov	r7, r18
    2082:	23 fd       	sbrc	r18, 3
    2084:	18 c0       	rjmp	.+48     	; 0x20b6 <vfprintf+0x500>
    2086:	85 2d       	mov	r24, r5
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	08 17       	cp	r16, r24
    208c:	19 07       	cpc	r17, r25
    208e:	98 f4       	brcc	.+38     	; 0x20b6 <vfprintf+0x500>
    2090:	b7 01       	movw	r22, r14
    2092:	80 e2       	ldi	r24, 0x20	; 32
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	19 d2       	rcall	.+1074   	; 0x24ca <fputc>
    2098:	5a 94       	dec	r5
    209a:	f5 cf       	rjmp	.-22     	; 0x2086 <vfprintf+0x4d0>
    209c:	f6 01       	movw	r30, r12
    209e:	77 fc       	sbrc	r7, 7
    20a0:	85 91       	lpm	r24, Z+
    20a2:	77 fe       	sbrs	r7, 7
    20a4:	81 91       	ld	r24, Z+
    20a6:	6f 01       	movw	r12, r30
    20a8:	b7 01       	movw	r22, r14
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e d2       	rcall	.+1052   	; 0x24ca <fputc>
    20ae:	51 10       	cpse	r5, r1
    20b0:	5a 94       	dec	r5
    20b2:	01 50       	subi	r16, 0x01	; 1
    20b4:	11 09       	sbc	r17, r1
    20b6:	01 15       	cp	r16, r1
    20b8:	11 05       	cpc	r17, r1
    20ba:	81 f7       	brne	.-32     	; 0x209c <vfprintf+0x4e6>
    20bc:	db c0       	rjmp	.+438    	; 0x2274 <vfprintf+0x6be>
    20be:	84 36       	cpi	r24, 0x64	; 100
    20c0:	11 f0       	breq	.+4      	; 0x20c6 <vfprintf+0x510>
    20c2:	89 36       	cpi	r24, 0x69	; 105
    20c4:	49 f5       	brne	.+82     	; 0x2118 <vfprintf+0x562>
    20c6:	56 01       	movw	r10, r12
    20c8:	27 ff       	sbrs	r18, 7
    20ca:	09 c0       	rjmp	.+18     	; 0x20de <vfprintf+0x528>
    20cc:	f4 e0       	ldi	r31, 0x04	; 4
    20ce:	af 0e       	add	r10, r31
    20d0:	b1 1c       	adc	r11, r1
    20d2:	f6 01       	movw	r30, r12
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	0a c0       	rjmp	.+20     	; 0x20f2 <vfprintf+0x53c>
    20de:	f2 e0       	ldi	r31, 0x02	; 2
    20e0:	af 0e       	add	r10, r31
    20e2:	b1 1c       	adc	r11, r1
    20e4:	f6 01       	movw	r30, r12
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	88 27       	eor	r24, r24
    20ec:	77 fd       	sbrc	r23, 7
    20ee:	80 95       	com	r24
    20f0:	98 2f       	mov	r25, r24
    20f2:	02 2f       	mov	r16, r18
    20f4:	0f 76       	andi	r16, 0x6F	; 111
    20f6:	97 ff       	sbrs	r25, 7
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <vfprintf+0x554>
    20fa:	90 95       	com	r25
    20fc:	80 95       	com	r24
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	8f 4f       	sbci	r24, 0xFF	; 255
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	00 68       	ori	r16, 0x80	; 128
    210a:	2a e0       	ldi	r18, 0x0A	; 10
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	a4 01       	movw	r20, r8
    2110:	0e d2       	rcall	.+1052   	; 0x252e <__ultoa_invert>
    2112:	c8 2e       	mov	r12, r24
    2114:	c8 18       	sub	r12, r8
    2116:	3d c0       	rjmp	.+122    	; 0x2192 <vfprintf+0x5dc>
    2118:	02 2f       	mov	r16, r18
    211a:	85 37       	cpi	r24, 0x75	; 117
    211c:	21 f4       	brne	.+8      	; 0x2126 <vfprintf+0x570>
    211e:	0f 7e       	andi	r16, 0xEF	; 239
    2120:	2a e0       	ldi	r18, 0x0A	; 10
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	1d c0       	rjmp	.+58     	; 0x2160 <vfprintf+0x5aa>
    2126:	09 7f       	andi	r16, 0xF9	; 249
    2128:	8f 36       	cpi	r24, 0x6F	; 111
    212a:	91 f0       	breq	.+36     	; 0x2150 <vfprintf+0x59a>
    212c:	18 f4       	brcc	.+6      	; 0x2134 <vfprintf+0x57e>
    212e:	88 35       	cpi	r24, 0x58	; 88
    2130:	59 f0       	breq	.+22     	; 0x2148 <vfprintf+0x592>
    2132:	a9 c0       	rjmp	.+338    	; 0x2286 <vfprintf+0x6d0>
    2134:	80 37       	cpi	r24, 0x70	; 112
    2136:	19 f0       	breq	.+6      	; 0x213e <vfprintf+0x588>
    2138:	88 37       	cpi	r24, 0x78	; 120
    213a:	11 f0       	breq	.+4      	; 0x2140 <vfprintf+0x58a>
    213c:	a4 c0       	rjmp	.+328    	; 0x2286 <vfprintf+0x6d0>
    213e:	00 61       	ori	r16, 0x10	; 16
    2140:	04 ff       	sbrs	r16, 4
    2142:	09 c0       	rjmp	.+18     	; 0x2156 <vfprintf+0x5a0>
    2144:	04 60       	ori	r16, 0x04	; 4
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <vfprintf+0x5a0>
    2148:	24 ff       	sbrs	r18, 4
    214a:	08 c0       	rjmp	.+16     	; 0x215c <vfprintf+0x5a6>
    214c:	06 60       	ori	r16, 0x06	; 6
    214e:	06 c0       	rjmp	.+12     	; 0x215c <vfprintf+0x5a6>
    2150:	28 e0       	ldi	r18, 0x08	; 8
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <vfprintf+0x5aa>
    2156:	20 e1       	ldi	r18, 0x10	; 16
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x5aa>
    215c:	20 e1       	ldi	r18, 0x10	; 16
    215e:	32 e0       	ldi	r19, 0x02	; 2
    2160:	56 01       	movw	r10, r12
    2162:	07 ff       	sbrs	r16, 7
    2164:	09 c0       	rjmp	.+18     	; 0x2178 <vfprintf+0x5c2>
    2166:	f4 e0       	ldi	r31, 0x04	; 4
    2168:	af 0e       	add	r10, r31
    216a:	b1 1c       	adc	r11, r1
    216c:	f6 01       	movw	r30, r12
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <vfprintf+0x5d2>
    2178:	f2 e0       	ldi	r31, 0x02	; 2
    217a:	af 0e       	add	r10, r31
    217c:	b1 1c       	adc	r11, r1
    217e:	f6 01       	movw	r30, r12
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a4 01       	movw	r20, r8
    218a:	d1 d1       	rcall	.+930    	; 0x252e <__ultoa_invert>
    218c:	c8 2e       	mov	r12, r24
    218e:	c8 18       	sub	r12, r8
    2190:	0f 77       	andi	r16, 0x7F	; 127
    2192:	06 ff       	sbrs	r16, 6
    2194:	0b c0       	rjmp	.+22     	; 0x21ac <vfprintf+0x5f6>
    2196:	20 2f       	mov	r18, r16
    2198:	2e 7f       	andi	r18, 0xFE	; 254
    219a:	c1 16       	cp	r12, r17
    219c:	50 f4       	brcc	.+20     	; 0x21b2 <vfprintf+0x5fc>
    219e:	04 ff       	sbrs	r16, 4
    21a0:	0a c0       	rjmp	.+20     	; 0x21b6 <vfprintf+0x600>
    21a2:	02 fd       	sbrc	r16, 2
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <vfprintf+0x600>
    21a6:	20 2f       	mov	r18, r16
    21a8:	2e 7e       	andi	r18, 0xEE	; 238
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <vfprintf+0x600>
    21ac:	dc 2c       	mov	r13, r12
    21ae:	20 2f       	mov	r18, r16
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <vfprintf+0x602>
    21b2:	dc 2c       	mov	r13, r12
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <vfprintf+0x602>
    21b6:	d1 2e       	mov	r13, r17
    21b8:	24 ff       	sbrs	r18, 4
    21ba:	0d c0       	rjmp	.+26     	; 0x21d6 <vfprintf+0x620>
    21bc:	fe 01       	movw	r30, r28
    21be:	ec 0d       	add	r30, r12
    21c0:	f1 1d       	adc	r31, r1
    21c2:	80 81       	ld	r24, Z
    21c4:	80 33       	cpi	r24, 0x30	; 48
    21c6:	11 f4       	brne	.+4      	; 0x21cc <vfprintf+0x616>
    21c8:	29 7e       	andi	r18, 0xE9	; 233
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <vfprintf+0x628>
    21cc:	22 ff       	sbrs	r18, 2
    21ce:	06 c0       	rjmp	.+12     	; 0x21dc <vfprintf+0x626>
    21d0:	d3 94       	inc	r13
    21d2:	d3 94       	inc	r13
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <vfprintf+0x628>
    21d6:	82 2f       	mov	r24, r18
    21d8:	86 78       	andi	r24, 0x86	; 134
    21da:	09 f0       	breq	.+2      	; 0x21de <vfprintf+0x628>
    21dc:	d3 94       	inc	r13
    21de:	23 fd       	sbrc	r18, 3
    21e0:	12 c0       	rjmp	.+36     	; 0x2206 <vfprintf+0x650>
    21e2:	20 ff       	sbrs	r18, 0
    21e4:	06 c0       	rjmp	.+12     	; 0x21f2 <vfprintf+0x63c>
    21e6:	1c 2d       	mov	r17, r12
    21e8:	d5 14       	cp	r13, r5
    21ea:	18 f4       	brcc	.+6      	; 0x21f2 <vfprintf+0x63c>
    21ec:	15 0d       	add	r17, r5
    21ee:	1d 19       	sub	r17, r13
    21f0:	d5 2c       	mov	r13, r5
    21f2:	d5 14       	cp	r13, r5
    21f4:	60 f4       	brcc	.+24     	; 0x220e <vfprintf+0x658>
    21f6:	b7 01       	movw	r22, r14
    21f8:	80 e2       	ldi	r24, 0x20	; 32
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	2b 8b       	std	Y+19, r18	; 0x13
    21fe:	65 d1       	rcall	.+714    	; 0x24ca <fputc>
    2200:	d3 94       	inc	r13
    2202:	2b 89       	ldd	r18, Y+19	; 0x13
    2204:	f6 cf       	rjmp	.-20     	; 0x21f2 <vfprintf+0x63c>
    2206:	d5 14       	cp	r13, r5
    2208:	10 f4       	brcc	.+4      	; 0x220e <vfprintf+0x658>
    220a:	5d 18       	sub	r5, r13
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <vfprintf+0x65a>
    220e:	51 2c       	mov	r5, r1
    2210:	24 ff       	sbrs	r18, 4
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <vfprintf+0x680>
    2214:	b7 01       	movw	r22, r14
    2216:	80 e3       	ldi	r24, 0x30	; 48
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	2b 8b       	std	Y+19, r18	; 0x13
    221c:	56 d1       	rcall	.+684    	; 0x24ca <fputc>
    221e:	2b 89       	ldd	r18, Y+19	; 0x13
    2220:	22 ff       	sbrs	r18, 2
    2222:	16 c0       	rjmp	.+44     	; 0x2250 <vfprintf+0x69a>
    2224:	21 ff       	sbrs	r18, 1
    2226:	03 c0       	rjmp	.+6      	; 0x222e <vfprintf+0x678>
    2228:	88 e5       	ldi	r24, 0x58	; 88
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <vfprintf+0x67c>
    222e:	88 e7       	ldi	r24, 0x78	; 120
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	b7 01       	movw	r22, r14
    2234:	0c c0       	rjmp	.+24     	; 0x224e <vfprintf+0x698>
    2236:	82 2f       	mov	r24, r18
    2238:	86 78       	andi	r24, 0x86	; 134
    223a:	51 f0       	breq	.+20     	; 0x2250 <vfprintf+0x69a>
    223c:	21 fd       	sbrc	r18, 1
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <vfprintf+0x68e>
    2240:	80 e2       	ldi	r24, 0x20	; 32
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <vfprintf+0x690>
    2244:	8b e2       	ldi	r24, 0x2B	; 43
    2246:	27 fd       	sbrc	r18, 7
    2248:	8d e2       	ldi	r24, 0x2D	; 45
    224a:	b7 01       	movw	r22, r14
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	3d d1       	rcall	.+634    	; 0x24ca <fputc>
    2250:	c1 16       	cp	r12, r17
    2252:	30 f4       	brcc	.+12     	; 0x2260 <vfprintf+0x6aa>
    2254:	b7 01       	movw	r22, r14
    2256:	80 e3       	ldi	r24, 0x30	; 48
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	37 d1       	rcall	.+622    	; 0x24ca <fputc>
    225c:	11 50       	subi	r17, 0x01	; 1
    225e:	f8 cf       	rjmp	.-16     	; 0x2250 <vfprintf+0x69a>
    2260:	ca 94       	dec	r12
    2262:	f4 01       	movw	r30, r8
    2264:	ec 0d       	add	r30, r12
    2266:	f1 1d       	adc	r31, r1
    2268:	80 81       	ld	r24, Z
    226a:	b7 01       	movw	r22, r14
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	2d d1       	rcall	.+602    	; 0x24ca <fputc>
    2270:	c1 10       	cpse	r12, r1
    2272:	f6 cf       	rjmp	.-20     	; 0x2260 <vfprintf+0x6aa>
    2274:	55 20       	and	r5, r5
    2276:	09 f4       	brne	.+2      	; 0x227a <vfprintf+0x6c4>
    2278:	dd cc       	rjmp	.-1606   	; 0x1c34 <vfprintf+0x7e>
    227a:	b7 01       	movw	r22, r14
    227c:	80 e2       	ldi	r24, 0x20	; 32
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	24 d1       	rcall	.+584    	; 0x24ca <fputc>
    2282:	5a 94       	dec	r5
    2284:	f7 cf       	rjmp	.-18     	; 0x2274 <vfprintf+0x6be>
    2286:	f7 01       	movw	r30, r14
    2288:	86 81       	ldd	r24, Z+6	; 0x06
    228a:	97 81       	ldd	r25, Z+7	; 0x07
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfprintf+0x6dc>
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	9f ef       	ldi	r25, 0xFF	; 255
    2292:	63 96       	adiw	r28, 0x13	; 19
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
    22ae:	bf 90       	pop	r11
    22b0:	af 90       	pop	r10
    22b2:	9f 90       	pop	r9
    22b4:	8f 90       	pop	r8
    22b6:	7f 90       	pop	r7
    22b8:	6f 90       	pop	r6
    22ba:	5f 90       	pop	r5
    22bc:	4f 90       	pop	r4
    22be:	3f 90       	pop	r3
    22c0:	2f 90       	pop	r2
    22c2:	08 95       	ret

000022c4 <__tablejump2__>:
    22c4:	ee 0f       	add	r30, r30
    22c6:	ff 1f       	adc	r31, r31

000022c8 <__tablejump__>:
    22c8:	05 90       	lpm	r0, Z+
    22ca:	f4 91       	lpm	r31, Z
    22cc:	e0 2d       	mov	r30, r0
    22ce:	09 94       	ijmp

000022d0 <__umulhisi3>:
    22d0:	a2 9f       	mul	r26, r18
    22d2:	b0 01       	movw	r22, r0
    22d4:	b3 9f       	mul	r27, r19
    22d6:	c0 01       	movw	r24, r0
    22d8:	a3 9f       	mul	r26, r19
    22da:	70 0d       	add	r23, r0
    22dc:	81 1d       	adc	r24, r1
    22de:	11 24       	eor	r1, r1
    22e0:	91 1d       	adc	r25, r1
    22e2:	b2 9f       	mul	r27, r18
    22e4:	70 0d       	add	r23, r0
    22e6:	81 1d       	adc	r24, r1
    22e8:	11 24       	eor	r1, r1
    22ea:	91 1d       	adc	r25, r1
    22ec:	08 95       	ret

000022ee <__ftoa_engine>:
    22ee:	28 30       	cpi	r18, 0x08	; 8
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <__ftoa_engine+0x6>
    22f2:	27 e0       	ldi	r18, 0x07	; 7
    22f4:	33 27       	eor	r19, r19
    22f6:	da 01       	movw	r26, r20
    22f8:	99 0f       	add	r25, r25
    22fa:	31 1d       	adc	r19, r1
    22fc:	87 fd       	sbrc	r24, 7
    22fe:	91 60       	ori	r25, 0x01	; 1
    2300:	00 96       	adiw	r24, 0x00	; 0
    2302:	61 05       	cpc	r22, r1
    2304:	71 05       	cpc	r23, r1
    2306:	39 f4       	brne	.+14     	; 0x2316 <__ftoa_engine+0x28>
    2308:	32 60       	ori	r19, 0x02	; 2
    230a:	2e 5f       	subi	r18, 0xFE	; 254
    230c:	3d 93       	st	X+, r19
    230e:	30 e3       	ldi	r19, 0x30	; 48
    2310:	2a 95       	dec	r18
    2312:	e1 f7       	brne	.-8      	; 0x230c <__ftoa_engine+0x1e>
    2314:	08 95       	ret
    2316:	9f 3f       	cpi	r25, 0xFF	; 255
    2318:	30 f0       	brcs	.+12     	; 0x2326 <__ftoa_engine+0x38>
    231a:	80 38       	cpi	r24, 0x80	; 128
    231c:	71 05       	cpc	r23, r1
    231e:	61 05       	cpc	r22, r1
    2320:	09 f0       	breq	.+2      	; 0x2324 <__ftoa_engine+0x36>
    2322:	3c 5f       	subi	r19, 0xFC	; 252
    2324:	3c 5f       	subi	r19, 0xFC	; 252
    2326:	3d 93       	st	X+, r19
    2328:	91 30       	cpi	r25, 0x01	; 1
    232a:	08 f0       	brcs	.+2      	; 0x232e <__ftoa_engine+0x40>
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	91 1d       	adc	r25, r1
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	1f 93       	push	r17
    2336:	0f 93       	push	r16
    2338:	ff 92       	push	r15
    233a:	ef 92       	push	r14
    233c:	19 2f       	mov	r17, r25
    233e:	98 7f       	andi	r25, 0xF8	; 248
    2340:	96 95       	lsr	r25
    2342:	e9 2f       	mov	r30, r25
    2344:	96 95       	lsr	r25
    2346:	96 95       	lsr	r25
    2348:	e9 0f       	add	r30, r25
    234a:	ff 27       	eor	r31, r31
    234c:	e2 50       	subi	r30, 0x02	; 2
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	99 27       	eor	r25, r25
    2352:	33 27       	eor	r19, r19
    2354:	ee 24       	eor	r14, r14
    2356:	ff 24       	eor	r15, r15
    2358:	a7 01       	movw	r20, r14
    235a:	e7 01       	movw	r28, r14
    235c:	05 90       	lpm	r0, Z+
    235e:	08 94       	sec
    2360:	07 94       	ror	r0
    2362:	28 f4       	brcc	.+10     	; 0x236e <__ftoa_engine+0x80>
    2364:	36 0f       	add	r19, r22
    2366:	e7 1e       	adc	r14, r23
    2368:	f8 1e       	adc	r15, r24
    236a:	49 1f       	adc	r20, r25
    236c:	51 1d       	adc	r21, r1
    236e:	66 0f       	add	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	06 94       	lsr	r0
    2378:	a1 f7       	brne	.-24     	; 0x2362 <__ftoa_engine+0x74>
    237a:	05 90       	lpm	r0, Z+
    237c:	07 94       	ror	r0
    237e:	28 f4       	brcc	.+10     	; 0x238a <__ftoa_engine+0x9c>
    2380:	e7 0e       	add	r14, r23
    2382:	f8 1e       	adc	r15, r24
    2384:	49 1f       	adc	r20, r25
    2386:	56 1f       	adc	r21, r22
    2388:	c1 1d       	adc	r28, r1
    238a:	77 0f       	add	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	66 1f       	adc	r22, r22
    2392:	06 94       	lsr	r0
    2394:	a1 f7       	brne	.-24     	; 0x237e <__ftoa_engine+0x90>
    2396:	05 90       	lpm	r0, Z+
    2398:	07 94       	ror	r0
    239a:	28 f4       	brcc	.+10     	; 0x23a6 <__ftoa_engine+0xb8>
    239c:	f8 0e       	add	r15, r24
    239e:	49 1f       	adc	r20, r25
    23a0:	56 1f       	adc	r21, r22
    23a2:	c7 1f       	adc	r28, r23
    23a4:	d1 1d       	adc	r29, r1
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	66 1f       	adc	r22, r22
    23ac:	77 1f       	adc	r23, r23
    23ae:	06 94       	lsr	r0
    23b0:	a1 f7       	brne	.-24     	; 0x239a <__ftoa_engine+0xac>
    23b2:	05 90       	lpm	r0, Z+
    23b4:	07 94       	ror	r0
    23b6:	20 f4       	brcc	.+8      	; 0x23c0 <__ftoa_engine+0xd2>
    23b8:	49 0f       	add	r20, r25
    23ba:	56 1f       	adc	r21, r22
    23bc:	c7 1f       	adc	r28, r23
    23be:	d8 1f       	adc	r29, r24
    23c0:	99 0f       	add	r25, r25
    23c2:	66 1f       	adc	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	88 1f       	adc	r24, r24
    23c8:	06 94       	lsr	r0
    23ca:	a9 f7       	brne	.-22     	; 0x23b6 <__ftoa_engine+0xc8>
    23cc:	84 91       	lpm	r24, Z
    23ce:	10 95       	com	r17
    23d0:	17 70       	andi	r17, 0x07	; 7
    23d2:	41 f0       	breq	.+16     	; 0x23e4 <__ftoa_engine+0xf6>
    23d4:	d6 95       	lsr	r29
    23d6:	c7 95       	ror	r28
    23d8:	57 95       	ror	r21
    23da:	47 95       	ror	r20
    23dc:	f7 94       	ror	r15
    23de:	e7 94       	ror	r14
    23e0:	1a 95       	dec	r17
    23e2:	c1 f7       	brne	.-16     	; 0x23d4 <__ftoa_engine+0xe6>
    23e4:	e4 ea       	ldi	r30, 0xA4	; 164
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	68 94       	set
    23ea:	15 90       	lpm	r1, Z+
    23ec:	15 91       	lpm	r17, Z+
    23ee:	35 91       	lpm	r19, Z+
    23f0:	65 91       	lpm	r22, Z+
    23f2:	95 91       	lpm	r25, Z+
    23f4:	05 90       	lpm	r0, Z+
    23f6:	7f e2       	ldi	r23, 0x2F	; 47
    23f8:	73 95       	inc	r23
    23fa:	e1 18       	sub	r14, r1
    23fc:	f1 0a       	sbc	r15, r17
    23fe:	43 0b       	sbc	r20, r19
    2400:	56 0b       	sbc	r21, r22
    2402:	c9 0b       	sbc	r28, r25
    2404:	d0 09       	sbc	r29, r0
    2406:	c0 f7       	brcc	.-16     	; 0x23f8 <__ftoa_engine+0x10a>
    2408:	e1 0c       	add	r14, r1
    240a:	f1 1e       	adc	r15, r17
    240c:	43 1f       	adc	r20, r19
    240e:	56 1f       	adc	r21, r22
    2410:	c9 1f       	adc	r28, r25
    2412:	d0 1d       	adc	r29, r0
    2414:	7e f4       	brtc	.+30     	; 0x2434 <__ftoa_engine+0x146>
    2416:	70 33       	cpi	r23, 0x30	; 48
    2418:	11 f4       	brne	.+4      	; 0x241e <__ftoa_engine+0x130>
    241a:	8a 95       	dec	r24
    241c:	e6 cf       	rjmp	.-52     	; 0x23ea <__ftoa_engine+0xfc>
    241e:	e8 94       	clt
    2420:	01 50       	subi	r16, 0x01	; 1
    2422:	30 f0       	brcs	.+12     	; 0x2430 <__ftoa_engine+0x142>
    2424:	08 0f       	add	r16, r24
    2426:	0a f4       	brpl	.+2      	; 0x242a <__ftoa_engine+0x13c>
    2428:	00 27       	eor	r16, r16
    242a:	02 17       	cp	r16, r18
    242c:	08 f4       	brcc	.+2      	; 0x2430 <__ftoa_engine+0x142>
    242e:	20 2f       	mov	r18, r16
    2430:	23 95       	inc	r18
    2432:	02 2f       	mov	r16, r18
    2434:	7a 33       	cpi	r23, 0x3A	; 58
    2436:	28 f0       	brcs	.+10     	; 0x2442 <__ftoa_engine+0x154>
    2438:	79 e3       	ldi	r23, 0x39	; 57
    243a:	7d 93       	st	X+, r23
    243c:	2a 95       	dec	r18
    243e:	e9 f7       	brne	.-6      	; 0x243a <__ftoa_engine+0x14c>
    2440:	10 c0       	rjmp	.+32     	; 0x2462 <__ftoa_engine+0x174>
    2442:	7d 93       	st	X+, r23
    2444:	2a 95       	dec	r18
    2446:	89 f6       	brne	.-94     	; 0x23ea <__ftoa_engine+0xfc>
    2448:	06 94       	lsr	r0
    244a:	97 95       	ror	r25
    244c:	67 95       	ror	r22
    244e:	37 95       	ror	r19
    2450:	17 95       	ror	r17
    2452:	17 94       	ror	r1
    2454:	e1 18       	sub	r14, r1
    2456:	f1 0a       	sbc	r15, r17
    2458:	43 0b       	sbc	r20, r19
    245a:	56 0b       	sbc	r21, r22
    245c:	c9 0b       	sbc	r28, r25
    245e:	d0 09       	sbc	r29, r0
    2460:	98 f0       	brcs	.+38     	; 0x2488 <__ftoa_engine+0x19a>
    2462:	23 95       	inc	r18
    2464:	7e 91       	ld	r23, -X
    2466:	73 95       	inc	r23
    2468:	7a 33       	cpi	r23, 0x3A	; 58
    246a:	08 f0       	brcs	.+2      	; 0x246e <__ftoa_engine+0x180>
    246c:	70 e3       	ldi	r23, 0x30	; 48
    246e:	7c 93       	st	X, r23
    2470:	20 13       	cpse	r18, r16
    2472:	b8 f7       	brcc	.-18     	; 0x2462 <__ftoa_engine+0x174>
    2474:	7e 91       	ld	r23, -X
    2476:	70 61       	ori	r23, 0x10	; 16
    2478:	7d 93       	st	X+, r23
    247a:	30 f0       	brcs	.+12     	; 0x2488 <__ftoa_engine+0x19a>
    247c:	83 95       	inc	r24
    247e:	71 e3       	ldi	r23, 0x31	; 49
    2480:	7d 93       	st	X+, r23
    2482:	70 e3       	ldi	r23, 0x30	; 48
    2484:	2a 95       	dec	r18
    2486:	e1 f7       	brne	.-8      	; 0x2480 <__ftoa_engine+0x192>
    2488:	11 24       	eor	r1, r1
    248a:	ef 90       	pop	r14
    248c:	ff 90       	pop	r15
    248e:	0f 91       	pop	r16
    2490:	1f 91       	pop	r17
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	99 27       	eor	r25, r25
    2498:	87 fd       	sbrc	r24, 7
    249a:	90 95       	com	r25
    249c:	08 95       	ret

0000249e <strnlen_P>:
    249e:	fc 01       	movw	r30, r24
    24a0:	05 90       	lpm	r0, Z+
    24a2:	61 50       	subi	r22, 0x01	; 1
    24a4:	70 40       	sbci	r23, 0x00	; 0
    24a6:	01 10       	cpse	r0, r1
    24a8:	d8 f7       	brcc	.-10     	; 0x24a0 <strnlen_P+0x2>
    24aa:	80 95       	com	r24
    24ac:	90 95       	com	r25
    24ae:	8e 0f       	add	r24, r30
    24b0:	9f 1f       	adc	r25, r31
    24b2:	08 95       	ret

000024b4 <strnlen>:
    24b4:	fc 01       	movw	r30, r24
    24b6:	61 50       	subi	r22, 0x01	; 1
    24b8:	70 40       	sbci	r23, 0x00	; 0
    24ba:	01 90       	ld	r0, Z+
    24bc:	01 10       	cpse	r0, r1
    24be:	d8 f7       	brcc	.-10     	; 0x24b6 <strnlen+0x2>
    24c0:	80 95       	com	r24
    24c2:	90 95       	com	r25
    24c4:	8e 0f       	add	r24, r30
    24c6:	9f 1f       	adc	r25, r31
    24c8:	08 95       	ret

000024ca <fputc>:
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	18 2f       	mov	r17, r24
    24d4:	09 2f       	mov	r16, r25
    24d6:	eb 01       	movw	r28, r22
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	81 fd       	sbrc	r24, 1
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <fputc+0x1a>
    24de:	8f ef       	ldi	r24, 0xFF	; 255
    24e0:	9f ef       	ldi	r25, 0xFF	; 255
    24e2:	20 c0       	rjmp	.+64     	; 0x2524 <fputc+0x5a>
    24e4:	82 ff       	sbrs	r24, 2
    24e6:	10 c0       	rjmp	.+32     	; 0x2508 <fputc+0x3e>
    24e8:	4e 81       	ldd	r20, Y+6	; 0x06
    24ea:	5f 81       	ldd	r21, Y+7	; 0x07
    24ec:	2c 81       	ldd	r18, Y+4	; 0x04
    24ee:	3d 81       	ldd	r19, Y+5	; 0x05
    24f0:	42 17       	cp	r20, r18
    24f2:	53 07       	cpc	r21, r19
    24f4:	7c f4       	brge	.+30     	; 0x2514 <fputc+0x4a>
    24f6:	e8 81       	ld	r30, Y
    24f8:	f9 81       	ldd	r31, Y+1	; 0x01
    24fa:	9f 01       	movw	r18, r30
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	39 83       	std	Y+1, r19	; 0x01
    2502:	28 83       	st	Y, r18
    2504:	10 83       	st	Z, r17
    2506:	06 c0       	rjmp	.+12     	; 0x2514 <fputc+0x4a>
    2508:	e8 85       	ldd	r30, Y+8	; 0x08
    250a:	f9 85       	ldd	r31, Y+9	; 0x09
    250c:	81 2f       	mov	r24, r17
    250e:	09 95       	icall
    2510:	89 2b       	or	r24, r25
    2512:	29 f7       	brne	.-54     	; 0x24de <fputc+0x14>
    2514:	2e 81       	ldd	r18, Y+6	; 0x06
    2516:	3f 81       	ldd	r19, Y+7	; 0x07
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	3f 83       	std	Y+7, r19	; 0x07
    251e:	2e 83       	std	Y+6, r18	; 0x06
    2520:	81 2f       	mov	r24, r17
    2522:	90 2f       	mov	r25, r16
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	08 95       	ret

0000252e <__ultoa_invert>:
    252e:	fa 01       	movw	r30, r20
    2530:	aa 27       	eor	r26, r26
    2532:	28 30       	cpi	r18, 0x08	; 8
    2534:	51 f1       	breq	.+84     	; 0x258a <__ultoa_invert+0x5c>
    2536:	20 31       	cpi	r18, 0x10	; 16
    2538:	81 f1       	breq	.+96     	; 0x259a <__ultoa_invert+0x6c>
    253a:	e8 94       	clt
    253c:	6f 93       	push	r22
    253e:	6e 7f       	andi	r22, 0xFE	; 254
    2540:	6e 5f       	subi	r22, 0xFE	; 254
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	8f 4f       	sbci	r24, 0xFF	; 255
    2546:	9f 4f       	sbci	r25, 0xFF	; 255
    2548:	af 4f       	sbci	r26, 0xFF	; 255
    254a:	b1 e0       	ldi	r27, 0x01	; 1
    254c:	3e d0       	rcall	.+124    	; 0x25ca <__ultoa_invert+0x9c>
    254e:	b4 e0       	ldi	r27, 0x04	; 4
    2550:	3c d0       	rcall	.+120    	; 0x25ca <__ultoa_invert+0x9c>
    2552:	67 0f       	add	r22, r23
    2554:	78 1f       	adc	r23, r24
    2556:	89 1f       	adc	r24, r25
    2558:	9a 1f       	adc	r25, r26
    255a:	a1 1d       	adc	r26, r1
    255c:	68 0f       	add	r22, r24
    255e:	79 1f       	adc	r23, r25
    2560:	8a 1f       	adc	r24, r26
    2562:	91 1d       	adc	r25, r1
    2564:	a1 1d       	adc	r26, r1
    2566:	6a 0f       	add	r22, r26
    2568:	71 1d       	adc	r23, r1
    256a:	81 1d       	adc	r24, r1
    256c:	91 1d       	adc	r25, r1
    256e:	a1 1d       	adc	r26, r1
    2570:	20 d0       	rcall	.+64     	; 0x25b2 <__ultoa_invert+0x84>
    2572:	09 f4       	brne	.+2      	; 0x2576 <__ultoa_invert+0x48>
    2574:	68 94       	set
    2576:	3f 91       	pop	r19
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	26 9f       	mul	r18, r22
    257c:	11 24       	eor	r1, r1
    257e:	30 19       	sub	r19, r0
    2580:	30 5d       	subi	r19, 0xD0	; 208
    2582:	31 93       	st	Z+, r19
    2584:	de f6       	brtc	.-74     	; 0x253c <__ultoa_invert+0xe>
    2586:	cf 01       	movw	r24, r30
    2588:	08 95       	ret
    258a:	46 2f       	mov	r20, r22
    258c:	47 70       	andi	r20, 0x07	; 7
    258e:	40 5d       	subi	r20, 0xD0	; 208
    2590:	41 93       	st	Z+, r20
    2592:	b3 e0       	ldi	r27, 0x03	; 3
    2594:	0f d0       	rcall	.+30     	; 0x25b4 <__ultoa_invert+0x86>
    2596:	c9 f7       	brne	.-14     	; 0x258a <__ultoa_invert+0x5c>
    2598:	f6 cf       	rjmp	.-20     	; 0x2586 <__ultoa_invert+0x58>
    259a:	46 2f       	mov	r20, r22
    259c:	4f 70       	andi	r20, 0x0F	; 15
    259e:	40 5d       	subi	r20, 0xD0	; 208
    25a0:	4a 33       	cpi	r20, 0x3A	; 58
    25a2:	18 f0       	brcs	.+6      	; 0x25aa <__ultoa_invert+0x7c>
    25a4:	49 5d       	subi	r20, 0xD9	; 217
    25a6:	31 fd       	sbrc	r19, 1
    25a8:	40 52       	subi	r20, 0x20	; 32
    25aa:	41 93       	st	Z+, r20
    25ac:	02 d0       	rcall	.+4      	; 0x25b2 <__ultoa_invert+0x84>
    25ae:	a9 f7       	brne	.-22     	; 0x259a <__ultoa_invert+0x6c>
    25b0:	ea cf       	rjmp	.-44     	; 0x2586 <__ultoa_invert+0x58>
    25b2:	b4 e0       	ldi	r27, 0x04	; 4
    25b4:	a6 95       	lsr	r26
    25b6:	97 95       	ror	r25
    25b8:	87 95       	ror	r24
    25ba:	77 95       	ror	r23
    25bc:	67 95       	ror	r22
    25be:	ba 95       	dec	r27
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <__ultoa_invert+0x86>
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	61 05       	cpc	r22, r1
    25c6:	71 05       	cpc	r23, r1
    25c8:	08 95       	ret
    25ca:	9b 01       	movw	r18, r22
    25cc:	ac 01       	movw	r20, r24
    25ce:	0a 2e       	mov	r0, r26
    25d0:	06 94       	lsr	r0
    25d2:	57 95       	ror	r21
    25d4:	47 95       	ror	r20
    25d6:	37 95       	ror	r19
    25d8:	27 95       	ror	r18
    25da:	ba 95       	dec	r27
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__ultoa_invert+0xa2>
    25de:	62 0f       	add	r22, r18
    25e0:	73 1f       	adc	r23, r19
    25e2:	84 1f       	adc	r24, r20
    25e4:	95 1f       	adc	r25, r21
    25e6:	a0 1d       	adc	r26, r0
    25e8:	08 95       	ret

000025ea <__eerd_byte_m128a>:
    25ea:	e1 99       	sbic	0x1c, 1	; 28
    25ec:	fe cf       	rjmp	.-4      	; 0x25ea <__eerd_byte_m128a>
    25ee:	9f bb       	out	0x1f, r25	; 31
    25f0:	8e bb       	out	0x1e, r24	; 30
    25f2:	e0 9a       	sbi	0x1c, 0	; 28
    25f4:	99 27       	eor	r25, r25
    25f6:	8d b3       	in	r24, 0x1d	; 29
    25f8:	08 95       	ret

000025fa <__eerd_word_m128a>:
    25fa:	a8 e1       	ldi	r26, 0x18	; 24
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	42 e0       	ldi	r20, 0x02	; 2
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <__eerd_blraw_m128a>

00002604 <__eeupd_byte_m128a>:
    2604:	26 2f       	mov	r18, r22

00002606 <__eeupd_r18_m128a>:
    2606:	e1 99       	sbic	0x1c, 1	; 28
    2608:	fe cf       	rjmp	.-4      	; 0x2606 <__eeupd_r18_m128a>
    260a:	9f bb       	out	0x1f, r25	; 31
    260c:	8e bb       	out	0x1e, r24	; 30
    260e:	e0 9a       	sbi	0x1c, 0	; 28
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	0d b2       	in	r0, 0x1d	; 29
    2614:	02 16       	cp	r0, r18
    2616:	31 f0       	breq	.+12     	; 0x2624 <__eeupd_r18_m128a+0x1e>
    2618:	2d bb       	out	0x1d, r18	; 29
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	e2 9a       	sbi	0x1c, 2	; 28
    2620:	e1 9a       	sbi	0x1c, 1	; 28
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	08 95       	ret

00002626 <__eeupd_word_m128a>:
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	27 2f       	mov	r18, r23
    262a:	ed df       	rcall	.-38     	; 0x2606 <__eeupd_r18_m128a>
    262c:	eb cf       	rjmp	.-42     	; 0x2604 <__eeupd_byte_m128a>

0000262e <__eerd_block_m128a>:
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22

00002632 <__eerd_blraw_m128a>:
    2632:	fc 01       	movw	r30, r24
    2634:	e1 99       	sbic	0x1c, 1	; 28
    2636:	fe cf       	rjmp	.-4      	; 0x2634 <__eerd_blraw_m128a+0x2>
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <__eerd_blraw_m128a+0x14>
    263a:	ff bb       	out	0x1f, r31	; 31
    263c:	ee bb       	out	0x1e, r30	; 30
    263e:	e0 9a       	sbi	0x1c, 0	; 28
    2640:	31 96       	adiw	r30, 0x01	; 1
    2642:	0d b2       	in	r0, 0x1d	; 29
    2644:	0d 92       	st	X+, r0
    2646:	41 50       	subi	r20, 0x01	; 1
    2648:	50 40       	sbci	r21, 0x00	; 0
    264a:	b8 f7       	brcc	.-18     	; 0x263a <__eerd_blraw_m128a+0x8>
    264c:	08 95       	ret

0000264e <_exit>:
    264e:	f8 94       	cli

00002650 <__stop_program>:
    2650:	ff cf       	rjmp	.-2      	; 0x2650 <__stop_program>
